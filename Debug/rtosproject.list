
rtosproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006824  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080069b4  080069b4  000079b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b68  08006b68  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006b68  08006b68  00007b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b70  08006b70  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b70  08006b70  00007b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b74  08006b74  00007b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006b78  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          00004c08  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004c74  20004c74  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001802c  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034f8  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  000235c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001001  00000000  00000000  00024a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f02  00000000  00000000  00025a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000159d0  00000000  00000000  0004896b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7868  00000000  00000000  0005e33b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135ba3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ef8  00000000  00000000  00135be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0013bae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800699c 	.word	0x0800699c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800699c 	.word	0x0800699c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <DHT11_Read>:

    return HAL_OK;
}

// Read temperature and humidity from DHT11
HAL_StatusTypeDef DHT11_Read(uint8_t *temperature, uint8_t *humidity) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
    uint8_t i, j;

    // Send start signal (pulling pin low for 18ms)
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2102      	movs	r1, #2
 80005aa:	484c      	ldr	r0, [pc, #304]	@ (80006dc <DHT11_Read+0x140>)
 80005ac:	f000 fede 	bl	800136c <HAL_GPIO_WritePin>
    HAL_Delay(18);
 80005b0:	2012      	movs	r0, #18
 80005b2:	f000 fc21 	bl	8000df8 <HAL_Delay>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2102      	movs	r1, #2
 80005ba:	4848      	ldr	r0, [pc, #288]	@ (80006dc <DHT11_Read+0x140>)
 80005bc:	f000 fed6 	bl	800136c <HAL_GPIO_WritePin>

    // Now configure the pin as input to receive data from DHT11
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DHT11_PIN;
 80005d0:	2302      	movs	r3, #2
 80005d2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	4619      	mov	r1, r3
 80005e2:	483e      	ldr	r0, [pc, #248]	@ (80006dc <DHT11_Read+0x140>)
 80005e4:	f000 fd0e 	bl	8001004 <HAL_GPIO_Init>

    // Wait for DHT11 response (it pulls the line low for 80us)
    while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET);
 80005e8:	bf00      	nop
 80005ea:	2102      	movs	r1, #2
 80005ec:	483b      	ldr	r0, [pc, #236]	@ (80006dc <DHT11_Read+0x140>)
 80005ee:	f000 fea5 	bl	800133c <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d0f8      	beq.n	80005ea <DHT11_Read+0x4e>

    // Wait for DHT11 to pull the line high
    while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET);
 80005f8:	bf00      	nop
 80005fa:	2102      	movs	r1, #2
 80005fc:	4837      	ldr	r0, [pc, #220]	@ (80006dc <DHT11_Read+0x140>)
 80005fe:	f000 fe9d 	bl	800133c <HAL_GPIO_ReadPin>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0f8      	beq.n	80005fa <DHT11_Read+0x5e>

    // Wait for the line to go high again
    while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET);
 8000608:	bf00      	nop
 800060a:	2102      	movs	r1, #2
 800060c:	4833      	ldr	r0, [pc, #204]	@ (80006dc <DHT11_Read+0x140>)
 800060e:	f000 fe95 	bl	800133c <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d0f8      	beq.n	800060a <DHT11_Read+0x6e>

    // Read the 40 bits of data from DHT11
    for (i = 0; i < 5; i++) {
 8000618:	2300      	movs	r3, #0
 800061a:	77fb      	strb	r3, [r7, #31]
 800061c:	e03a      	b.n	8000694 <DHT11_Read+0xf8>
        data[i] = 0;
 800061e:	7ffb      	ldrb	r3, [r7, #31]
 8000620:	4a2f      	ldr	r2, [pc, #188]	@ (80006e0 <DHT11_Read+0x144>)
 8000622:	2100      	movs	r1, #0
 8000624:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 8; j++) {
 8000626:	2300      	movs	r3, #0
 8000628:	77bb      	strb	r3, [r7, #30]
 800062a:	e02d      	b.n	8000688 <DHT11_Read+0xec>
            while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET); // Wait for pin to go high
 800062c:	bf00      	nop
 800062e:	2102      	movs	r1, #2
 8000630:	482a      	ldr	r0, [pc, #168]	@ (80006dc <DHT11_Read+0x140>)
 8000632:	f000 fe83 	bl	800133c <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0f8      	beq.n	800062e <DHT11_Read+0x92>
            HAL_Delay(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f000 fbdb 	bl	8000df8 <HAL_Delay>
            if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) {
 8000642:	2102      	movs	r1, #2
 8000644:	4825      	ldr	r0, [pc, #148]	@ (80006dc <DHT11_Read+0x140>)
 8000646:	f000 fe79 	bl	800133c <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b01      	cmp	r3, #1
 800064e:	d110      	bne.n	8000672 <DHT11_Read+0xd6>
                data[i] |= (1 << (7 - j));
 8000650:	7ffb      	ldrb	r3, [r7, #31]
 8000652:	4a23      	ldr	r2, [pc, #140]	@ (80006e0 <DHT11_Read+0x144>)
 8000654:	5cd3      	ldrb	r3, [r2, r3]
 8000656:	b25a      	sxtb	r2, r3
 8000658:	7fbb      	ldrb	r3, [r7, #30]
 800065a:	f1c3 0307 	rsb	r3, r3, #7
 800065e:	2101      	movs	r1, #1
 8000660:	fa01 f303 	lsl.w	r3, r1, r3
 8000664:	b25b      	sxtb	r3, r3
 8000666:	4313      	orrs	r3, r2
 8000668:	b25a      	sxtb	r2, r3
 800066a:	7ffb      	ldrb	r3, [r7, #31]
 800066c:	b2d1      	uxtb	r1, r2
 800066e:	4a1c      	ldr	r2, [pc, #112]	@ (80006e0 <DHT11_Read+0x144>)
 8000670:	54d1      	strb	r1, [r2, r3]
            }
            while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET); // Wait for pin to go low
 8000672:	bf00      	nop
 8000674:	2102      	movs	r1, #2
 8000676:	4819      	ldr	r0, [pc, #100]	@ (80006dc <DHT11_Read+0x140>)
 8000678:	f000 fe60 	bl	800133c <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b01      	cmp	r3, #1
 8000680:	d0f8      	beq.n	8000674 <DHT11_Read+0xd8>
        for (j = 0; j < 8; j++) {
 8000682:	7fbb      	ldrb	r3, [r7, #30]
 8000684:	3301      	adds	r3, #1
 8000686:	77bb      	strb	r3, [r7, #30]
 8000688:	7fbb      	ldrb	r3, [r7, #30]
 800068a:	2b07      	cmp	r3, #7
 800068c:	d9ce      	bls.n	800062c <DHT11_Read+0x90>
    for (i = 0; i < 5; i++) {
 800068e:	7ffb      	ldrb	r3, [r7, #31]
 8000690:	3301      	adds	r3, #1
 8000692:	77fb      	strb	r3, [r7, #31]
 8000694:	7ffb      	ldrb	r3, [r7, #31]
 8000696:	2b04      	cmp	r3, #4
 8000698:	d9c1      	bls.n	800061e <DHT11_Read+0x82>
        }
    }

    // Check if checksum matches
    if (data[4] == (data[0] + data[1] + data[2] + data[3])) {
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <DHT11_Read+0x144>)
 800069c:	791b      	ldrb	r3, [r3, #4]
 800069e:	4619      	mov	r1, r3
 80006a0:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <DHT11_Read+0x144>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <DHT11_Read+0x144>)
 80006a8:	785b      	ldrb	r3, [r3, #1]
 80006aa:	4413      	add	r3, r2
 80006ac:	4a0c      	ldr	r2, [pc, #48]	@ (80006e0 <DHT11_Read+0x144>)
 80006ae:	7892      	ldrb	r2, [r2, #2]
 80006b0:	4413      	add	r3, r2
 80006b2:	4a0b      	ldr	r2, [pc, #44]	@ (80006e0 <DHT11_Read+0x144>)
 80006b4:	78d2      	ldrb	r2, [r2, #3]
 80006b6:	4413      	add	r3, r2
 80006b8:	4299      	cmp	r1, r3
 80006ba:	d109      	bne.n	80006d0 <DHT11_Read+0x134>
        *humidity = data[0];  // Humidity byte
 80006bc:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <DHT11_Read+0x144>)
 80006be:	781a      	ldrb	r2, [r3, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	701a      	strb	r2, [r3, #0]
        *temperature = data[2];  // Temperature byte
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <DHT11_Read+0x144>)
 80006c6:	789a      	ldrb	r2, [r3, #2]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	701a      	strb	r2, [r3, #0]
        return HAL_OK;
 80006cc:	2300      	movs	r3, #0
 80006ce:	e000      	b.n	80006d2 <DHT11_Read+0x136>
    } else {
        return HAL_ERROR;  // Checksum error
 80006d0:	2301      	movs	r3, #1
    }
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40020000 	.word	0x40020000
 80006e0:	20000088 	.word	0x20000088

080006e4 <_write>:
void StartUARTTask(void *argument);
void StartLEDTask(void *argument);

/* USER CODE BEGIN PFP */
/* Redirect printf to UART */
int _write(int file, char *ptr, int len) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006f8:	68b9      	ldr	r1, [r7, #8]
 80006fa:	4804      	ldr	r0, [pc, #16]	@ (800070c <_write+0x28>)
 80006fc:	f001 f9cc 	bl	8001a98 <HAL_UART_Transmit>
    return len;
 8000700:	687b      	ldr	r3, [r7, #4]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000090 	.word	0x20000090

08000710 <main>:
/* USER CODE END PFP */

/* Main function -------------------------------------------------------------*/
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* Reset peripherals and initialize Flash & Systick */
  HAL_Init();
 8000714:	f000 fb42 	bl	8000d9c <HAL_Init>

  /* Configure system clock */
  SystemClock_Config();
 8000718:	f000 f95e 	bl	80009d8 <SystemClock_Config>

  /* Initialize peripherals */
  MX_GPIO_Init();
 800071c:	f000 f8f0 	bl	8000900 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000720:	f000 f920 	bl	8000964 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  printf("\r\nSystem Initialized\r\n");
 8000724:	4815      	ldr	r0, [pc, #84]	@ (800077c <main+0x6c>)
 8000726:	f005 f9cf 	bl	8005ac8 <puts>
  printf("Starting FreeRTOS scheduler...\r\n");
 800072a:	4815      	ldr	r0, [pc, #84]	@ (8000780 <main+0x70>)
 800072c:	f005 f9cc 	bl	8005ac8 <puts>
  /* USER CODE END 2 */

  /* Initialize RTOS kernel */
  osKernelInitialize();
 8000730:	f001 fdb2 	bl	8002298 <osKernelInitialize>

  /* Create semaphore */
  dataReadySemaphoreHandle = osSemaphoreNew(1, 0, NULL);
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	2001      	movs	r0, #1
 800073a:	f001 fea4 	bl	8002486 <osSemaphoreNew>
 800073e:	4603      	mov	r3, r0
 8000740:	4a10      	ldr	r2, [pc, #64]	@ (8000784 <main+0x74>)
 8000742:	6013      	str	r3, [r2, #0]

  /* Create tasks */
  DHT11TaskHandle = osThreadNew(StartDHT11Task, NULL, &DHT11Task_attributes);
 8000744:	4a10      	ldr	r2, [pc, #64]	@ (8000788 <main+0x78>)
 8000746:	2100      	movs	r1, #0
 8000748:	4810      	ldr	r0, [pc, #64]	@ (800078c <main+0x7c>)
 800074a:	f001 fdef 	bl	800232c <osThreadNew>
 800074e:	4603      	mov	r3, r0
 8000750:	4a0f      	ldr	r2, [pc, #60]	@ (8000790 <main+0x80>)
 8000752:	6013      	str	r3, [r2, #0]
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 8000754:	4a0f      	ldr	r2, [pc, #60]	@ (8000794 <main+0x84>)
 8000756:	2100      	movs	r1, #0
 8000758:	480f      	ldr	r0, [pc, #60]	@ (8000798 <main+0x88>)
 800075a:	f001 fde7 	bl	800232c <osThreadNew>
 800075e:	4603      	mov	r3, r0
 8000760:	4a0e      	ldr	r2, [pc, #56]	@ (800079c <main+0x8c>)
 8000762:	6013      	str	r3, [r2, #0]
  LEDTaskHandle = osThreadNew(StartLEDTask, NULL, &LEDTask_attributes);
 8000764:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <main+0x90>)
 8000766:	2100      	movs	r1, #0
 8000768:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <main+0x94>)
 800076a:	f001 fddf 	bl	800232c <osThreadNew>
 800076e:	4603      	mov	r3, r0
 8000770:	4a0d      	ldr	r2, [pc, #52]	@ (80007a8 <main+0x98>)
 8000772:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8000774:	f001 fdb4 	bl	80022e0 <osKernelStart>

  /* Infinite loop */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <main+0x68>
 800077c:	080069d4 	.word	0x080069d4
 8000780:	080069ec 	.word	0x080069ec
 8000784:	200000e4 	.word	0x200000e4
 8000788:	08006ac0 	.word	0x08006ac0
 800078c:	080007ad 	.word	0x080007ad
 8000790:	200000d8 	.word	0x200000d8
 8000794:	08006ae4 	.word	0x08006ae4
 8000798:	08000829 	.word	0x08000829
 800079c:	200000dc 	.word	0x200000dc
 80007a0:	08006b08 	.word	0x08006b08
 80007a4:	080008d5 	.word	0x080008d5
 80007a8:	200000e0 	.word	0x200000e0

080007ac <StartDHT11Task>:
  }
}

/* Task Definitions ----------------------------------------------------------*/
void StartDHT11Task(void *argument)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint8_t temperature, humidity;
  /* USER CODE BEGIN StartDHT11Task */
  printf("DHT11 Task Started\r\n");
 80007b4:	4817      	ldr	r0, [pc, #92]	@ (8000814 <StartDHT11Task+0x68>)
 80007b6:	f005 f987 	bl	8005ac8 <puts>
  /* USER CODE END StartDHT11Task */

  for (;;)
  {
    if (DHT11_Read(&temperature, &humidity) == HAL_OK)
 80007ba:	f107 020e 	add.w	r2, r7, #14
 80007be:	f107 030f 	add.w	r3, r7, #15
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fee9 	bl	800059c <DHT11_Read>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d118      	bne.n	8000802 <StartDHT11Task+0x56>
    {
      dht11_data[0] = temperature;
 80007d0:	7bfa      	ldrb	r2, [r7, #15]
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <StartDHT11Task+0x6c>)
 80007d4:	701a      	strb	r2, [r3, #0]
      dht11_data[1] = humidity;
 80007d6:	7bba      	ldrb	r2, [r7, #14]
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <StartDHT11Task+0x6c>)
 80007da:	705a      	strb	r2, [r3, #1]
      osSemaphoreRelease(dataReadySemaphoreHandle);
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <StartDHT11Task+0x70>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 ff2b 	bl	800263c <osSemaphoreRelease>
      /* USER CODE BEGIN DHT11_Read_Success */
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Visual indicator
 80007e6:	2201      	movs	r2, #1
 80007e8:	2101      	movs	r1, #1
 80007ea:	480d      	ldr	r0, [pc, #52]	@ (8000820 <StartDHT11Task+0x74>)
 80007ec:	f000 fdbe 	bl	800136c <HAL_GPIO_WritePin>
      osDelay(10);
 80007f0:	200a      	movs	r0, #10
 80007f2:	f001 fe2d 	bl	8002450 <osDelay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2101      	movs	r1, #1
 80007fa:	4809      	ldr	r0, [pc, #36]	@ (8000820 <StartDHT11Task+0x74>)
 80007fc:	f000 fdb6 	bl	800136c <HAL_GPIO_WritePin>
 8000800:	e002      	b.n	8000808 <StartDHT11Task+0x5c>
      /* USER CODE END DHT11_Read_Success */
    }
    else
    {
      /* USER CODE BEGIN DHT11_Read_Fail */
      printf("DHT11 Read Failed\r\n");
 8000802:	4808      	ldr	r0, [pc, #32]	@ (8000824 <StartDHT11Task+0x78>)
 8000804:	f005 f960 	bl	8005ac8 <puts>
      /* USER CODE END DHT11_Read_Fail */
    }
    osDelay(2000); // Increased delay to 2 seconds
 8000808:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800080c:	f001 fe20 	bl	8002450 <osDelay>
    if (DHT11_Read(&temperature, &humidity) == HAL_OK)
 8000810:	e7d3      	b.n	80007ba <StartDHT11Task+0xe>
 8000812:	bf00      	nop
 8000814:	08006a0c 	.word	0x08006a0c
 8000818:	200000e8 	.word	0x200000e8
 800081c:	200000e4 	.word	0x200000e4
 8000820:	40020400 	.word	0x40020400
 8000824:	08006a20 	.word	0x08006a20

08000828 <StartUARTTask>:
  }
}

void StartUARTTask(void *argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b096      	sub	sp, #88	@ 0x58
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
  char uart_buffer[64];
  /* USER CODE BEGIN StartUARTTask */
  printf("UART Task Started\r\n");
 8000830:	481f      	ldr	r0, [pc, #124]	@ (80008b0 <StartUARTTask+0x88>)
 8000832:	f005 f949 	bl	8005ac8 <puts>
  /* USER CODE END StartUARTTask */

  for (;;)
  {
    if (osSemaphoreAcquire(dataReadySemaphoreHandle, 1000) == osOK) // 1s timeout
 8000836:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <StartUARTTask+0x8c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800083e:	4618      	mov	r0, r3
 8000840:	f001 feaa 	bl	8002598 <osSemaphoreAcquire>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d12e      	bne.n	80008a8 <StartUARTTask+0x80>
    {
      int len = snprintf(uart_buffer, sizeof(uart_buffer),
                      "Temp: %dC, Hum: %d%%\r\n", // Added \r for Windows terminals
                      dht11_data[0], dht11_data[1]);
 800084a:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <StartUARTTask+0x90>)
 800084c:	781b      	ldrb	r3, [r3, #0]
      int len = snprintf(uart_buffer, sizeof(uart_buffer),
 800084e:	461a      	mov	r2, r3
                      dht11_data[0], dht11_data[1]);
 8000850:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <StartUARTTask+0x90>)
 8000852:	785b      	ldrb	r3, [r3, #1]
      int len = snprintf(uart_buffer, sizeof(uart_buffer),
 8000854:	f107 000c 	add.w	r0, r7, #12
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	4613      	mov	r3, r2
 800085c:	4a17      	ldr	r2, [pc, #92]	@ (80008bc <StartUARTTask+0x94>)
 800085e:	2140      	movs	r1, #64	@ 0x40
 8000860:	f005 f93a 	bl	8005ad8 <sniprintf>
 8000864:	64f8      	str	r0, [r7, #76]	@ 0x4c

      if (HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, len, 1000) != HAL_OK)
 8000866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000868:	b29a      	uxth	r2, r3
 800086a:	f107 010c 	add.w	r1, r7, #12
 800086e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000872:	4813      	ldr	r0, [pc, #76]	@ (80008c0 <StartUARTTask+0x98>)
 8000874:	f001 f910 	bl	8001a98 <HAL_UART_Transmit>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <StartUARTTask+0x5c>
      {
        /* USER CODE BEGIN UART_Error */
        printf("UART Transmit Failed\r\n");
 800087e:	4811      	ldr	r0, [pc, #68]	@ (80008c4 <StartUARTTask+0x9c>)
 8000880:	f005 f922 	bl	8005ac8 <puts>
        /* USER CODE END UART_Error */
      }

      data_sent_count++;
 8000884:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <StartUARTTask+0xa0>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <StartUARTTask+0xa0>)
 800088e:	701a      	strb	r2, [r3, #0]
      if (data_sent_count >= MAX_DATA_SENT)
 8000890:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <StartUARTTask+0xa0>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b09      	cmp	r3, #9
 8000896:	d9ce      	bls.n	8000836 <StartUARTTask+0xe>
      {
        data_sent_count = 0;
 8000898:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <StartUARTTask+0xa0>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800089e:	2101      	movs	r1, #1
 80008a0:	480a      	ldr	r0, [pc, #40]	@ (80008cc <StartUARTTask+0xa4>)
 80008a2:	f000 fd7c 	bl	800139e <HAL_GPIO_TogglePin>
 80008a6:	e7c6      	b.n	8000836 <StartUARTTask+0xe>
      }
    }
    else
    {
      /* USER CODE BEGIN Semaphore_Timeout */
      printf("Waiting for DHT11 data...\r\n");
 80008a8:	4809      	ldr	r0, [pc, #36]	@ (80008d0 <StartUARTTask+0xa8>)
 80008aa:	f005 f90d 	bl	8005ac8 <puts>
    if (osSemaphoreAcquire(dataReadySemaphoreHandle, 1000) == osOK) // 1s timeout
 80008ae:	e7c2      	b.n	8000836 <StartUARTTask+0xe>
 80008b0:	08006a34 	.word	0x08006a34
 80008b4:	200000e4 	.word	0x200000e4
 80008b8:	200000e8 	.word	0x200000e8
 80008bc:	08006a48 	.word	0x08006a48
 80008c0:	20000090 	.word	0x20000090
 80008c4:	08006a60 	.word	0x08006a60
 80008c8:	200000ed 	.word	0x200000ed
 80008cc:	40020400 	.word	0x40020400
 80008d0:	08006a78 	.word	0x08006a78

080008d4 <StartLEDTask>:
    }
  }
}

void StartLEDTask(void *argument)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDTask */
  printf("LED Task Started\r\n");
 80008dc:	4806      	ldr	r0, [pc, #24]	@ (80008f8 <StartLEDTask+0x24>)
 80008de:	f005 f8f3 	bl	8005ac8 <puts>
  /* USER CODE END StartLEDTask */

  for (;;)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Active LED blinking
 80008e2:	2101      	movs	r1, #1
 80008e4:	4805      	ldr	r0, [pc, #20]	@ (80008fc <StartLEDTask+0x28>)
 80008e6:	f000 fd5a 	bl	800139e <HAL_GPIO_TogglePin>
    osDelay(500);
 80008ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008ee:	f001 fdaf 	bl	8002450 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Active LED blinking
 80008f2:	bf00      	nop
 80008f4:	e7f5      	b.n	80008e2 <StartLEDTask+0xe>
 80008f6:	bf00      	nop
 80008f8:	08006a94 	.word	0x08006a94
 80008fc:	40020400 	.word	0x40020400

08000900 <MX_GPIO_Init>:
  }
}

/* Peripheral Initialization -------------------------------------------------*/
void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	4b10      	ldr	r3, [pc, #64]	@ (800095c <MX_GPIO_Init+0x5c>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091c:	4a0f      	ldr	r2, [pc, #60]	@ (800095c <MX_GPIO_Init+0x5c>)
 800091e:	f043 0302 	orr.w	r3, r3, #2
 8000922:	6313      	str	r3, [r2, #48]	@ 0x30
 8000924:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <MX_GPIO_Init+0x5c>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000928:	f003 0302 	and.w	r3, r3, #2
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2101      	movs	r1, #1
 8000934:	480a      	ldr	r0, [pc, #40]	@ (8000960 <MX_GPIO_Init+0x60>)
 8000936:	f000 fd19 	bl	800136c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800093a:	2301      	movs	r3, #1
 800093c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_GPIO_Init+0x60>)
 8000950:	f000 fb58 	bl	8001004 <HAL_GPIO_Init>
}
 8000954:	bf00      	nop
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40020400 	.word	0x40020400

08000964 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_USART1_UART_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <MX_USART1_UART_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_USART1_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_USART1_UART_Init+0x4c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_USART1_UART_Init+0x4c>)
 800099c:	f001 f82c 	bl	80019f8 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009a6:	f000 f807 	bl	80009b8 <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000090 	.word	0x20000090
 80009b4:	40011000 	.word	0x40011000

080009b8 <Error_Handler>:

/* Error Handler -------------------------------------------------------------*/
void Error_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Fast blink on error
 80009c0:	2101      	movs	r1, #1
 80009c2:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <Error_Handler+0x1c>)
 80009c4:	f000 fceb 	bl	800139e <HAL_GPIO_TogglePin>
    osDelay(100);
 80009c8:	2064      	movs	r0, #100	@ 0x64
 80009ca:	f001 fd41 	bl	8002450 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Fast blink on error
 80009ce:	bf00      	nop
 80009d0:	e7f6      	b.n	80009c0 <Error_Handler+0x8>
 80009d2:	bf00      	nop
 80009d4:	40020400 	.word	0x40020400

080009d8 <SystemClock_Config>:
  /* USER CODE END Error_Handler_Debug */
}

/* System Clock Configuration ------------------------------------------------*/
void SystemClock_Config(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  // Add your clock configuration code
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_MspInit+0x54>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	4a11      	ldr	r2, [pc, #68]	@ (8000a3c <HAL_MspInit+0x54>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fe:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <HAL_MspInit+0x54>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <HAL_MspInit+0x54>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <HAL_MspInit+0x54>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <HAL_MspInit+0x54>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	210f      	movs	r1, #15
 8000a2a:	f06f 0001 	mvn.w	r0, #1
 8000a2e:	f000 fabf 	bl	8000fb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a19      	ldr	r2, [pc, #100]	@ (8000ac4 <HAL_UART_MspInit+0x84>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d12c      	bne.n	8000abc <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	4a17      	ldr	r2, [pc, #92]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a6c:	f043 0310 	orr.w	r3, r3, #16
 8000a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a10      	ldr	r2, [pc, #64]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a9a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aac:	2307      	movs	r3, #7
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <HAL_UART_MspInit+0x8c>)
 8000ab8:	f000 faa4 	bl	8001004 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	@ 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000

08000ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	@ 0x38
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b34      	ldr	r3, [pc, #208]	@ (8000bb8 <HAL_InitTick+0xe8>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	4a33      	ldr	r2, [pc, #204]	@ (8000bb8 <HAL_InitTick+0xe8>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af0:	4b31      	ldr	r3, [pc, #196]	@ (8000bb8 <HAL_InitTick+0xe8>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000afc:	f107 0210 	add.w	r2, r7, #16
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fc98 	bl	800143c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d103      	bne.n	8000b1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b16:	f000 fc69 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8000b1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b1c:	e004      	b.n	8000b28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b1e:	f000 fc65 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8000b22:	4603      	mov	r3, r0
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b2a:	4a24      	ldr	r2, [pc, #144]	@ (8000bbc <HAL_InitTick+0xec>)
 8000b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b30:	0c9b      	lsrs	r3, r3, #18
 8000b32:	3b01      	subs	r3, #1
 8000b34:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000b36:	4b22      	ldr	r3, [pc, #136]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b3c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b40:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b44:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000b46:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b4a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000b5e:	4818      	ldr	r0, [pc, #96]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b60:	f000 fc9e 	bl	80014a0 <HAL_TIM_Base_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b6a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d11b      	bne.n	8000baa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000b72:	4813      	ldr	r0, [pc, #76]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b74:	f000 fcee 	bl	8001554 <HAL_TIM_Base_Start_IT>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d111      	bne.n	8000baa <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b86:	201c      	movs	r0, #28
 8000b88:	f000 fa2e 	bl	8000fe8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b0f      	cmp	r3, #15
 8000b90:	d808      	bhi.n	8000ba4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000b92:	2200      	movs	r2, #0
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	201c      	movs	r0, #28
 8000b98:	f000 fa0a 	bl	8000fb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9c:	4a09      	ldr	r2, [pc, #36]	@ (8000bc4 <HAL_InitTick+0xf4>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e002      	b.n	8000baa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000baa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3738      	adds	r7, #56	@ 0x38
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	431bde83 	.word	0x431bde83
 8000bc0:	200000f0 	.word	0x200000f0
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <NMI_Handler+0x4>

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <MemManage_Handler+0x4>

08000be0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <UsageFault_Handler+0x4>

08000bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <TIM2_IRQHandler+0x10>)
 8000c06:	f000 fd15 	bl	8001634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000f0 	.word	0x200000f0

08000c14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	e00a      	b.n	8000c3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c26:	f3af 8000 	nop.w
 8000c2a:	4601      	mov	r1, r0
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	60ba      	str	r2, [r7, #8]
 8000c32:	b2ca      	uxtb	r2, r1
 8000c34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dbf0      	blt.n	8000c26 <_read+0x12>
  }

  return len;
 8000c44:	687b      	ldr	r3, [r7, #4]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c76:	605a      	str	r2, [r3, #4]
  return 0;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_isatty>:

int _isatty(int file)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc0:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <_sbrk+0x5c>)
 8000cc2:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <_sbrk+0x60>)
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ccc:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <_sbrk+0x64>)
 8000cd6:	4a12      	ldr	r2, [pc, #72]	@ (8000d20 <_sbrk+0x68>)
 8000cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d207      	bcs.n	8000cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce8:	f005 f8b0 	bl	8005e4c <__errno>
 8000cec:	4603      	mov	r3, r0
 8000cee:	220c      	movs	r2, #12
 8000cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cf6:	e009      	b.n	8000d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <_sbrk+0x64>)
 8000d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20020000 	.word	0x20020000
 8000d18:	00000400 	.word	0x00000400
 8000d1c:	20000138 	.word	0x20000138
 8000d20:	20004c78 	.word	0x20004c78

08000d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <SystemInit+0x20>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <SystemInit+0x20>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d4c:	f7ff ffea 	bl	8000d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	@ (8000d88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	@ (8000d8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	@ (8000d94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d76:	f005 f86f 	bl	8005e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7a:	f7ff fcc9 	bl	8000710 <main>
  bx  lr    
 8000d7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d8c:	08006b78 	.word	0x08006b78
  ldr r2, =_sbss
 8000d90:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d94:	20004c74 	.word	0x20004c74

08000d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <HAL_Init+0x40>)
 8000da6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <HAL_Init+0x40>)
 8000db2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	@ (8000ddc <HAL_Init+0x40>)
 8000dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 f8e8 	bl	8000f9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dca:	200f      	movs	r0, #15
 8000dcc:	f7ff fe80 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd0:	f7ff fe0a 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023c00 	.word	0x40023c00

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2000013c 	.word	0x2000013c

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	@ (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	@ (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	@ (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	@ 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ff4c 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc2:	f7ff ff61 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8000fc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	68b9      	ldr	r1, [r7, #8]
 8000fcc:	6978      	ldr	r0, [r7, #20]
 8000fce:	f7ff ffb1 	bl	8000f34 <NVIC_EncodePriority>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff80 	bl	8000ee0 <__NVIC_SetPriority>
}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff54 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	@ 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	e16b      	b.n	80012f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 815a 	bne.w	80012f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001052:	2b02      	cmp	r3, #2
 8001054:	d130      	bne.n	80010b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	f003 0201 	and.w	r2, r3, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d017      	beq.n	80010f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d123      	bne.n	8001148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3208      	adds	r2, #8
 8001142:	69b9      	ldr	r1, [r7, #24]
 8001144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0203 	and.w	r2, r3, #3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80b4 	beq.w	80012f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b60      	ldr	r3, [pc, #384]	@ (8001310 <HAL_GPIO_Init+0x30c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	4a5f      	ldr	r2, [pc, #380]	@ (8001310 <HAL_GPIO_Init+0x30c>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001198:	6453      	str	r3, [r2, #68]	@ 0x44
 800119a:	4b5d      	ldr	r3, [pc, #372]	@ (8001310 <HAL_GPIO_Init+0x30c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001314 <HAL_GPIO_Init+0x310>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a52      	ldr	r2, [pc, #328]	@ (8001318 <HAL_GPIO_Init+0x314>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d02b      	beq.n	800122a <HAL_GPIO_Init+0x226>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a51      	ldr	r2, [pc, #324]	@ (800131c <HAL_GPIO_Init+0x318>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d025      	beq.n	8001226 <HAL_GPIO_Init+0x222>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a50      	ldr	r2, [pc, #320]	@ (8001320 <HAL_GPIO_Init+0x31c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01f      	beq.n	8001222 <HAL_GPIO_Init+0x21e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001324 <HAL_GPIO_Init+0x320>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x21a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001328 <HAL_GPIO_Init+0x324>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x216>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4d      	ldr	r2, [pc, #308]	@ (800132c <HAL_GPIO_Init+0x328>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x212>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001330 <HAL_GPIO_Init+0x32c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x20e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4b      	ldr	r2, [pc, #300]	@ (8001334 <HAL_GPIO_Init+0x330>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x20a>
 800120a:	2307      	movs	r3, #7
 800120c:	e00e      	b.n	800122c <HAL_GPIO_Init+0x228>
 800120e:	2308      	movs	r3, #8
 8001210:	e00c      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001212:	2306      	movs	r3, #6
 8001214:	e00a      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001216:	2305      	movs	r3, #5
 8001218:	e008      	b.n	800122c <HAL_GPIO_Init+0x228>
 800121a:	2304      	movs	r3, #4
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x228>
 800121e:	2303      	movs	r3, #3
 8001220:	e004      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001222:	2302      	movs	r3, #2
 8001224:	e002      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x228>
 800122a:	2300      	movs	r3, #0
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	f002 0203 	and.w	r2, r2, #3
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4093      	lsls	r3, r2
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123c:	4935      	ldr	r1, [pc, #212]	@ (8001314 <HAL_GPIO_Init+0x310>)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124a:	4b3b      	ldr	r3, [pc, #236]	@ (8001338 <HAL_GPIO_Init+0x334>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126e:	4a32      	ldr	r2, [pc, #200]	@ (8001338 <HAL_GPIO_Init+0x334>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001274:	4b30      	ldr	r3, [pc, #192]	@ (8001338 <HAL_GPIO_Init+0x334>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001298:	4a27      	ldr	r2, [pc, #156]	@ (8001338 <HAL_GPIO_Init+0x334>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800129e:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <HAL_GPIO_Init+0x334>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001338 <HAL_GPIO_Init+0x334>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <HAL_GPIO_Init+0x334>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ec:	4a12      	ldr	r2, [pc, #72]	@ (8001338 <HAL_GPIO_Init+0x334>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	f67f ae90 	bls.w	8001020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3724      	adds	r7, #36	@ 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40013800 	.word	0x40013800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40020800 	.word	0x40020800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	40021000 	.word	0x40021000
 800132c:	40021400 	.word	0x40021400
 8001330:	40021800 	.word	0x40021800
 8001334:	40021c00 	.word	0x40021c00
 8001338:	40013c00 	.word	0x40013c00

0800133c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	887b      	ldrh	r3, [r7, #2]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001354:	2301      	movs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e001      	b.n	800135e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001388:	e003      	b.n	8001392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	041a      	lsls	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	619a      	str	r2, [r3, #24]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800139e:	b480      	push	{r7}
 80013a0:	b085      	sub	sp, #20
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	460b      	mov	r3, r1
 80013a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013b0:	887a      	ldrh	r2, [r7, #2]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4013      	ands	r3, r2
 80013b6:	041a      	lsls	r2, r3, #16
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	400b      	ands	r3, r1
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	619a      	str	r2, [r3, #24]
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000000 	.word	0x20000000

080013ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013f0:	f7ff fff0 	bl	80013d4 <HAL_RCC_GetHCLKFreq>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <HAL_RCC_GetPCLK1Freq+0x20>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	0a9b      	lsrs	r3, r3, #10
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	4903      	ldr	r1, [pc, #12]	@ (8001410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001402:	5ccb      	ldrb	r3, [r1, r3]
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001408:	4618      	mov	r0, r3
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	08006b2c 	.word	0x08006b2c

08001414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001418:	f7ff ffdc 	bl	80013d4 <HAL_RCC_GetHCLKFreq>
 800141c:	4602      	mov	r2, r0
 800141e:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	0b5b      	lsrs	r3, r3, #13
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	4903      	ldr	r1, [pc, #12]	@ (8001438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800142a:	5ccb      	ldrb	r3, [r1, r3]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	08006b2c 	.word	0x08006b2c

0800143c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	220f      	movs	r2, #15
 800144a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 0203 	and.w	r2, r3, #3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001470:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	08db      	lsrs	r3, r3, #3
 8001476:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800147e:	4b07      	ldr	r3, [pc, #28]	@ (800149c <HAL_RCC_GetClockConfig+0x60>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0207 	and.w	r2, r3, #7
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	601a      	str	r2, [r3, #0]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40023c00 	.word	0x40023c00

080014a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e041      	b.n	8001536 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d106      	bne.n	80014cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f839 	bl	800153e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2202      	movs	r2, #2
 80014d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3304      	adds	r3, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4610      	mov	r0, r2
 80014e0:	f000 f9ca 	bl	8001878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b01      	cmp	r3, #1
 8001566:	d001      	beq.n	800156c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e04e      	b.n	800160a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0201 	orr.w	r2, r2, #1
 8001582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a23      	ldr	r2, [pc, #140]	@ (8001618 <HAL_TIM_Base_Start_IT+0xc4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d022      	beq.n	80015d4 <HAL_TIM_Base_Start_IT+0x80>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001596:	d01d      	beq.n	80015d4 <HAL_TIM_Base_Start_IT+0x80>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a1f      	ldr	r2, [pc, #124]	@ (800161c <HAL_TIM_Base_Start_IT+0xc8>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d018      	beq.n	80015d4 <HAL_TIM_Base_Start_IT+0x80>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001620 <HAL_TIM_Base_Start_IT+0xcc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d013      	beq.n	80015d4 <HAL_TIM_Base_Start_IT+0x80>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001624 <HAL_TIM_Base_Start_IT+0xd0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00e      	beq.n	80015d4 <HAL_TIM_Base_Start_IT+0x80>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001628 <HAL_TIM_Base_Start_IT+0xd4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d009      	beq.n	80015d4 <HAL_TIM_Base_Start_IT+0x80>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	@ (800162c <HAL_TIM_Base_Start_IT+0xd8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d004      	beq.n	80015d4 <HAL_TIM_Base_Start_IT+0x80>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a18      	ldr	r2, [pc, #96]	@ (8001630 <HAL_TIM_Base_Start_IT+0xdc>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d111      	bne.n	80015f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d010      	beq.n	8001608 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 0201 	orr.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015f6:	e007      	b.n	8001608 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40010000 	.word	0x40010000
 800161c:	40000400 	.word	0x40000400
 8001620:	40000800 	.word	0x40000800
 8001624:	40000c00 	.word	0x40000c00
 8001628:	40010400 	.word	0x40010400
 800162c:	40014000 	.word	0x40014000
 8001630:	40001800 	.word	0x40001800

08001634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d020      	beq.n	8001698 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01b      	beq.n	8001698 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f06f 0202 	mvn.w	r2, #2
 8001668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f8dc 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 8001684:	e005      	b.n	8001692 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f8ce 	bl	8001828 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f8df 	bl	8001850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d020      	beq.n	80016e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01b      	beq.n	80016e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f06f 0204 	mvn.w	r2, #4
 80016b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2202      	movs	r2, #2
 80016ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f8b6 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 80016d0:	e005      	b.n	80016de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f8a8 	bl	8001828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f8b9 	bl	8001850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d020      	beq.n	8001730 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d01b      	beq.n	8001730 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f06f 0208 	mvn.w	r2, #8
 8001700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2204      	movs	r2, #4
 8001706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f890 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 800171c:	e005      	b.n	800172a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f882 	bl	8001828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f893 	bl	8001850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	d020      	beq.n	800177c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	2b00      	cmp	r3, #0
 8001742:	d01b      	beq.n	800177c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f06f 0210 	mvn.w	r2, #16
 800174c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2208      	movs	r2, #8
 8001752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f86a 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 8001768:	e005      	b.n	8001776 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f85c 	bl	8001828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f86d 	bl	8001850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00c      	beq.n	80017a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d007      	beq.n	80017a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f06f 0201 	mvn.w	r2, #1
 8001798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f83a 	bl	8001814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00c      	beq.n	80017c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d007      	beq.n	80017c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80017bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f910 	bl	80019e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00c      	beq.n	80017e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80017e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f83e 	bl	8001864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00c      	beq.n	800180c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f003 0320 	and.w	r3, r3, #32
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f06f 0220 	mvn.w	r2, #32
 8001804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f8e2 	bl	80019d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a46      	ldr	r2, [pc, #280]	@ (80019a4 <TIM_Base_SetConfig+0x12c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d013      	beq.n	80018b8 <TIM_Base_SetConfig+0x40>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001896:	d00f      	beq.n	80018b8 <TIM_Base_SetConfig+0x40>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a43      	ldr	r2, [pc, #268]	@ (80019a8 <TIM_Base_SetConfig+0x130>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00b      	beq.n	80018b8 <TIM_Base_SetConfig+0x40>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a42      	ldr	r2, [pc, #264]	@ (80019ac <TIM_Base_SetConfig+0x134>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d007      	beq.n	80018b8 <TIM_Base_SetConfig+0x40>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a41      	ldr	r2, [pc, #260]	@ (80019b0 <TIM_Base_SetConfig+0x138>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d003      	beq.n	80018b8 <TIM_Base_SetConfig+0x40>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a40      	ldr	r2, [pc, #256]	@ (80019b4 <TIM_Base_SetConfig+0x13c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d108      	bne.n	80018ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a35      	ldr	r2, [pc, #212]	@ (80019a4 <TIM_Base_SetConfig+0x12c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d02b      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018d8:	d027      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a32      	ldr	r2, [pc, #200]	@ (80019a8 <TIM_Base_SetConfig+0x130>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d023      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a31      	ldr	r2, [pc, #196]	@ (80019ac <TIM_Base_SetConfig+0x134>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d01f      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a30      	ldr	r2, [pc, #192]	@ (80019b0 <TIM_Base_SetConfig+0x138>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01b      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a2f      	ldr	r2, [pc, #188]	@ (80019b4 <TIM_Base_SetConfig+0x13c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d017      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a2e      	ldr	r2, [pc, #184]	@ (80019b8 <TIM_Base_SetConfig+0x140>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a2d      	ldr	r2, [pc, #180]	@ (80019bc <TIM_Base_SetConfig+0x144>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00f      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a2c      	ldr	r2, [pc, #176]	@ (80019c0 <TIM_Base_SetConfig+0x148>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d00b      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a2b      	ldr	r2, [pc, #172]	@ (80019c4 <TIM_Base_SetConfig+0x14c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d007      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a2a      	ldr	r2, [pc, #168]	@ (80019c8 <TIM_Base_SetConfig+0x150>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d003      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a29      	ldr	r2, [pc, #164]	@ (80019cc <TIM_Base_SetConfig+0x154>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d108      	bne.n	800193c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	4313      	orrs	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a10      	ldr	r2, [pc, #64]	@ (80019a4 <TIM_Base_SetConfig+0x12c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d003      	beq.n	8001970 <TIM_Base_SetConfig+0xf8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a12      	ldr	r2, [pc, #72]	@ (80019b4 <TIM_Base_SetConfig+0x13c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d103      	bne.n	8001978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b01      	cmp	r3, #1
 8001988:	d105      	bne.n	8001996 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	f023 0201 	bic.w	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	611a      	str	r2, [r3, #16]
  }
}
 8001996:	bf00      	nop
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40010000 	.word	0x40010000
 80019a8:	40000400 	.word	0x40000400
 80019ac:	40000800 	.word	0x40000800
 80019b0:	40000c00 	.word	0x40000c00
 80019b4:	40010400 	.word	0x40010400
 80019b8:	40014000 	.word	0x40014000
 80019bc:	40014400 	.word	0x40014400
 80019c0:	40014800 	.word	0x40014800
 80019c4:	40001800 	.word	0x40001800
 80019c8:	40001c00 	.word	0x40001c00
 80019cc:	40002000 	.word	0x40002000

080019d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e042      	b.n	8001a90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff f80e 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2224      	movs	r2, #36	@ 0x24
 8001a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f973 	bl	8001d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	d175      	bne.n	8001ba4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <HAL_UART_Transmit+0x2c>
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e06e      	b.n	8001ba6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2221      	movs	r2, #33	@ 0x21
 8001ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ad6:	f7ff f983 	bl	8000de0 <HAL_GetTick>
 8001ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	88fa      	ldrh	r2, [r7, #6]
 8001ae6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001af0:	d108      	bne.n	8001b04 <HAL_UART_Transmit+0x6c>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d104      	bne.n	8001b04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	e003      	b.n	8001b0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b0c:	e02e      	b.n	8001b6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2200      	movs	r2, #0
 8001b16:	2180      	movs	r1, #128	@ 0x80
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 f848 	bl	8001bae <UART_WaitOnFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e03a      	b.n	8001ba6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10b      	bne.n	8001b4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	e007      	b.n	8001b5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1cb      	bne.n	8001b0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2140      	movs	r1, #64	@ 0x40
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 f814 	bl	8001bae <UART_WaitOnFlagUntilTimeout>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e006      	b.n	8001ba6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e000      	b.n	8001ba6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001ba4:	2302      	movs	r3, #2
  }
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3720      	adds	r7, #32
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bbe:	e03b      	b.n	8001c38 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bc6:	d037      	beq.n	8001c38 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc8:	f7ff f90a 	bl	8000de0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	6a3a      	ldr	r2, [r7, #32]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d302      	bcc.n	8001bde <UART_WaitOnFlagUntilTimeout+0x30>
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e03a      	b.n	8001c58 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d023      	beq.n	8001c38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b80      	cmp	r3, #128	@ 0x80
 8001bf4:	d020      	beq.n	8001c38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b40      	cmp	r3, #64	@ 0x40
 8001bfa:	d01d      	beq.n	8001c38 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d116      	bne.n	8001c38 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 f81d 	bl	8001c60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2208      	movs	r2, #8
 8001c2a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e00f      	b.n	8001c58 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	4013      	ands	r3, r2
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	bf0c      	ite	eq
 8001c48:	2301      	moveq	r3, #1
 8001c4a:	2300      	movne	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d0b4      	beq.n	8001bc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b095      	sub	sp, #84	@ 0x54
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	330c      	adds	r3, #12
 8001c6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c72:	e853 3f00 	ldrex	r3, [r3]
 8001c76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	330c      	adds	r3, #12
 8001c86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c88:	643a      	str	r2, [r7, #64]	@ 0x40
 8001c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c90:	e841 2300 	strex	r3, r2, [r1]
 8001c94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e5      	bne.n	8001c68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3314      	adds	r3, #20
 8001ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	e853 3f00 	ldrex	r3, [r3]
 8001caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3314      	adds	r3, #20
 8001cba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cc4:	e841 2300 	strex	r3, r2, [r1]
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1e5      	bne.n	8001c9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d119      	bne.n	8001d0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	330c      	adds	r3, #12
 8001cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	e853 3f00 	ldrex	r3, [r3]
 8001ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f023 0310 	bic.w	r3, r3, #16
 8001cee:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	330c      	adds	r3, #12
 8001cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001cf8:	61ba      	str	r2, [r7, #24]
 8001cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cfc:	6979      	ldr	r1, [r7, #20]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	e841 2300 	strex	r3, r2, [r1]
 8001d04:	613b      	str	r3, [r7, #16]
   return(result);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1e5      	bne.n	8001cd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001d1a:	bf00      	nop
 8001d1c:	3754      	adds	r7, #84	@ 0x54
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d2c:	b0c0      	sub	sp, #256	@ 0x100
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d44:	68d9      	ldr	r1, [r3, #12]
 8001d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	ea40 0301 	orr.w	r3, r0, r1
 8001d50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001d80:	f021 010c 	bic.w	r1, r1, #12
 8001d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d8e:	430b      	orrs	r3, r1
 8001d90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da2:	6999      	ldr	r1, [r3, #24]
 8001da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	ea40 0301 	orr.w	r3, r0, r1
 8001dae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4b8f      	ldr	r3, [pc, #572]	@ (8001ff4 <UART_SetConfig+0x2cc>)
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d005      	beq.n	8001dc8 <UART_SetConfig+0xa0>
 8001dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4b8d      	ldr	r3, [pc, #564]	@ (8001ff8 <UART_SetConfig+0x2d0>)
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d104      	bne.n	8001dd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001dc8:	f7ff fb24 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 8001dcc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001dd0:	e003      	b.n	8001dda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001dd2:	f7ff fb0b 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8001dd6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001de4:	f040 810c 	bne.w	8002000 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001dec:	2200      	movs	r2, #0
 8001dee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001df2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001df6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001dfa:	4622      	mov	r2, r4
 8001dfc:	462b      	mov	r3, r5
 8001dfe:	1891      	adds	r1, r2, r2
 8001e00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e02:	415b      	adcs	r3, r3
 8001e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	eb12 0801 	adds.w	r8, r2, r1
 8001e10:	4629      	mov	r1, r5
 8001e12:	eb43 0901 	adc.w	r9, r3, r1
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e2a:	4690      	mov	r8, r2
 8001e2c:	4699      	mov	r9, r3
 8001e2e:	4623      	mov	r3, r4
 8001e30:	eb18 0303 	adds.w	r3, r8, r3
 8001e34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e38:	462b      	mov	r3, r5
 8001e3a:	eb49 0303 	adc.w	r3, r9, r3
 8001e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001e56:	460b      	mov	r3, r1
 8001e58:	18db      	adds	r3, r3, r3
 8001e5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	eb42 0303 	adc.w	r3, r2, r3
 8001e62:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e6c:	f7fe fa00 	bl	8000270 <__aeabi_uldivmod>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4b61      	ldr	r3, [pc, #388]	@ (8001ffc <UART_SetConfig+0x2d4>)
 8001e76:	fba3 2302 	umull	r2, r3, r3, r2
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	011c      	lsls	r4, r3, #4
 8001e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e82:	2200      	movs	r2, #0
 8001e84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001e90:	4642      	mov	r2, r8
 8001e92:	464b      	mov	r3, r9
 8001e94:	1891      	adds	r1, r2, r2
 8001e96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001e98:	415b      	adcs	r3, r3
 8001e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ea0:	4641      	mov	r1, r8
 8001ea2:	eb12 0a01 	adds.w	sl, r2, r1
 8001ea6:	4649      	mov	r1, r9
 8001ea8:	eb43 0b01 	adc.w	fp, r3, r1
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001eb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ebc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ec0:	4692      	mov	sl, r2
 8001ec2:	469b      	mov	fp, r3
 8001ec4:	4643      	mov	r3, r8
 8001ec6:	eb1a 0303 	adds.w	r3, sl, r3
 8001eca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001ece:	464b      	mov	r3, r9
 8001ed0:	eb4b 0303 	adc.w	r3, fp, r3
 8001ed4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001ee4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001ee8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001eec:	460b      	mov	r3, r1
 8001eee:	18db      	adds	r3, r3, r3
 8001ef0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	eb42 0303 	adc.w	r3, r2, r3
 8001ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001efa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001efe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001f02:	f7fe f9b5 	bl	8000270 <__aeabi_uldivmod>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001ffc <UART_SetConfig+0x2d4>)
 8001f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	2264      	movs	r2, #100	@ 0x64
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	1acb      	subs	r3, r1, r3
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001f22:	4b36      	ldr	r3, [pc, #216]	@ (8001ffc <UART_SetConfig+0x2d4>)
 8001f24:	fba3 2302 	umull	r2, r3, r3, r2
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001f30:	441c      	add	r4, r3
 8001f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f36:	2200      	movs	r2, #0
 8001f38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f44:	4642      	mov	r2, r8
 8001f46:	464b      	mov	r3, r9
 8001f48:	1891      	adds	r1, r2, r2
 8001f4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f4c:	415b      	adcs	r3, r3
 8001f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f54:	4641      	mov	r1, r8
 8001f56:	1851      	adds	r1, r2, r1
 8001f58:	6339      	str	r1, [r7, #48]	@ 0x30
 8001f5a:	4649      	mov	r1, r9
 8001f5c:	414b      	adcs	r3, r1
 8001f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001f6c:	4659      	mov	r1, fp
 8001f6e:	00cb      	lsls	r3, r1, #3
 8001f70:	4651      	mov	r1, sl
 8001f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f76:	4651      	mov	r1, sl
 8001f78:	00ca      	lsls	r2, r1, #3
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4642      	mov	r2, r8
 8001f82:	189b      	adds	r3, r3, r2
 8001f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f88:	464b      	mov	r3, r9
 8001f8a:	460a      	mov	r2, r1
 8001f8c:	eb42 0303 	adc.w	r3, r2, r3
 8001f90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001fa0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001fa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001fa8:	460b      	mov	r3, r1
 8001faa:	18db      	adds	r3, r3, r3
 8001fac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fae:	4613      	mov	r3, r2
 8001fb0:	eb42 0303 	adc.w	r3, r2, r3
 8001fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001fbe:	f7fe f957 	bl	8000270 <__aeabi_uldivmod>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <UART_SetConfig+0x2d4>)
 8001fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	2164      	movs	r1, #100	@ 0x64
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	3332      	adds	r3, #50	@ 0x32
 8001fda:	4a08      	ldr	r2, [pc, #32]	@ (8001ffc <UART_SetConfig+0x2d4>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	f003 0207 	and.w	r2, r3, #7
 8001fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4422      	add	r2, r4
 8001fee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ff0:	e106      	b.n	8002200 <UART_SetConfig+0x4d8>
 8001ff2:	bf00      	nop
 8001ff4:	40011000 	.word	0x40011000
 8001ff8:	40011400 	.word	0x40011400
 8001ffc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002004:	2200      	movs	r2, #0
 8002006:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800200a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800200e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002012:	4642      	mov	r2, r8
 8002014:	464b      	mov	r3, r9
 8002016:	1891      	adds	r1, r2, r2
 8002018:	6239      	str	r1, [r7, #32]
 800201a:	415b      	adcs	r3, r3
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
 800201e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002022:	4641      	mov	r1, r8
 8002024:	1854      	adds	r4, r2, r1
 8002026:	4649      	mov	r1, r9
 8002028:	eb43 0501 	adc.w	r5, r3, r1
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	00eb      	lsls	r3, r5, #3
 8002036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800203a:	00e2      	lsls	r2, r4, #3
 800203c:	4614      	mov	r4, r2
 800203e:	461d      	mov	r5, r3
 8002040:	4643      	mov	r3, r8
 8002042:	18e3      	adds	r3, r4, r3
 8002044:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002048:	464b      	mov	r3, r9
 800204a:	eb45 0303 	adc.w	r3, r5, r3
 800204e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800205e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800206e:	4629      	mov	r1, r5
 8002070:	008b      	lsls	r3, r1, #2
 8002072:	4621      	mov	r1, r4
 8002074:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002078:	4621      	mov	r1, r4
 800207a:	008a      	lsls	r2, r1, #2
 800207c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002080:	f7fe f8f6 	bl	8000270 <__aeabi_uldivmod>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4b60      	ldr	r3, [pc, #384]	@ (800220c <UART_SetConfig+0x4e4>)
 800208a:	fba3 2302 	umull	r2, r3, r3, r2
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	011c      	lsls	r4, r3, #4
 8002092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002096:	2200      	movs	r2, #0
 8002098:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800209c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80020a4:	4642      	mov	r2, r8
 80020a6:	464b      	mov	r3, r9
 80020a8:	1891      	adds	r1, r2, r2
 80020aa:	61b9      	str	r1, [r7, #24]
 80020ac:	415b      	adcs	r3, r3
 80020ae:	61fb      	str	r3, [r7, #28]
 80020b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020b4:	4641      	mov	r1, r8
 80020b6:	1851      	adds	r1, r2, r1
 80020b8:	6139      	str	r1, [r7, #16]
 80020ba:	4649      	mov	r1, r9
 80020bc:	414b      	adcs	r3, r1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020cc:	4659      	mov	r1, fp
 80020ce:	00cb      	lsls	r3, r1, #3
 80020d0:	4651      	mov	r1, sl
 80020d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020d6:	4651      	mov	r1, sl
 80020d8:	00ca      	lsls	r2, r1, #3
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	4603      	mov	r3, r0
 80020e0:	4642      	mov	r2, r8
 80020e2:	189b      	adds	r3, r3, r2
 80020e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020e8:	464b      	mov	r3, r9
 80020ea:	460a      	mov	r2, r1
 80020ec:	eb42 0303 	adc.w	r3, r2, r3
 80020f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80020f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800210c:	4649      	mov	r1, r9
 800210e:	008b      	lsls	r3, r1, #2
 8002110:	4641      	mov	r1, r8
 8002112:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002116:	4641      	mov	r1, r8
 8002118:	008a      	lsls	r2, r1, #2
 800211a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800211e:	f7fe f8a7 	bl	8000270 <__aeabi_uldivmod>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4611      	mov	r1, r2
 8002128:	4b38      	ldr	r3, [pc, #224]	@ (800220c <UART_SetConfig+0x4e4>)
 800212a:	fba3 2301 	umull	r2, r3, r3, r1
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2264      	movs	r2, #100	@ 0x64
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	1acb      	subs	r3, r1, r3
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	3332      	adds	r3, #50	@ 0x32
 800213c:	4a33      	ldr	r2, [pc, #204]	@ (800220c <UART_SetConfig+0x4e4>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002148:	441c      	add	r4, r3
 800214a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800214e:	2200      	movs	r2, #0
 8002150:	673b      	str	r3, [r7, #112]	@ 0x70
 8002152:	677a      	str	r2, [r7, #116]	@ 0x74
 8002154:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002158:	4642      	mov	r2, r8
 800215a:	464b      	mov	r3, r9
 800215c:	1891      	adds	r1, r2, r2
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	415b      	adcs	r3, r3
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002168:	4641      	mov	r1, r8
 800216a:	1851      	adds	r1, r2, r1
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	4649      	mov	r1, r9
 8002170:	414b      	adcs	r3, r1
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002180:	4659      	mov	r1, fp
 8002182:	00cb      	lsls	r3, r1, #3
 8002184:	4651      	mov	r1, sl
 8002186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800218a:	4651      	mov	r1, sl
 800218c:	00ca      	lsls	r2, r1, #3
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
 8002192:	4603      	mov	r3, r0
 8002194:	4642      	mov	r2, r8
 8002196:	189b      	adds	r3, r3, r2
 8002198:	66bb      	str	r3, [r7, #104]	@ 0x68
 800219a:	464b      	mov	r3, r9
 800219c:	460a      	mov	r2, r1
 800219e:	eb42 0303 	adc.w	r3, r2, r3
 80021a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80021ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80021bc:	4649      	mov	r1, r9
 80021be:	008b      	lsls	r3, r1, #2
 80021c0:	4641      	mov	r1, r8
 80021c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021c6:	4641      	mov	r1, r8
 80021c8:	008a      	lsls	r2, r1, #2
 80021ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80021ce:	f7fe f84f 	bl	8000270 <__aeabi_uldivmod>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4b0d      	ldr	r3, [pc, #52]	@ (800220c <UART_SetConfig+0x4e4>)
 80021d8:	fba3 1302 	umull	r1, r3, r3, r2
 80021dc:	095b      	lsrs	r3, r3, #5
 80021de:	2164      	movs	r1, #100	@ 0x64
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	3332      	adds	r3, #50	@ 0x32
 80021ea:	4a08      	ldr	r2, [pc, #32]	@ (800220c <UART_SetConfig+0x4e4>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	f003 020f 	and.w	r2, r3, #15
 80021f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4422      	add	r2, r4
 80021fe:	609a      	str	r2, [r3, #8]
}
 8002200:	bf00      	nop
 8002202:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002206:	46bd      	mov	sp, r7
 8002208:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800220c:	51eb851f 	.word	0x51eb851f

08002210 <__NVIC_SetPriority>:
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db0a      	blt.n	800223a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	490c      	ldr	r1, [pc, #48]	@ (800225c <__NVIC_SetPriority+0x4c>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	440b      	add	r3, r1
 8002234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002238:	e00a      	b.n	8002250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4908      	ldr	r1, [pc, #32]	@ (8002260 <__NVIC_SetPriority+0x50>)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3b04      	subs	r3, #4
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	440b      	add	r3, r1
 800224e:	761a      	strb	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002268:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <SysTick_Handler+0x1c>)
 800226a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800226c:	f002 f996 	bl	800459c <xTaskGetSchedulerState>
 8002270:	4603      	mov	r3, r0
 8002272:	2b01      	cmp	r3, #1
 8002274:	d001      	beq.n	800227a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002276:	f003 f88f 	bl	8005398 <xPortSysTickHandler>
  }
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000e010 	.word	0xe000e010

08002284 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002288:	2100      	movs	r1, #0
 800228a:	f06f 0004 	mvn.w	r0, #4
 800228e:	f7ff ffbf 	bl	8002210 <__NVIC_SetPriority>
#endif
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800229e:	f3ef 8305 	mrs	r3, IPSR
 80022a2:	603b      	str	r3, [r7, #0]
  return(result);
 80022a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80022aa:	f06f 0305 	mvn.w	r3, #5
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	e00c      	b.n	80022cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80022b2:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <osKernelInitialize+0x44>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d105      	bne.n	80022c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80022ba:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <osKernelInitialize+0x44>)
 80022bc:	2201      	movs	r2, #1
 80022be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	e002      	b.n	80022cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80022cc:	687b      	ldr	r3, [r7, #4]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000140 	.word	0x20000140

080022e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022e6:	f3ef 8305 	mrs	r3, IPSR
 80022ea:	603b      	str	r3, [r7, #0]
  return(result);
 80022ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80022f2:	f06f 0305 	mvn.w	r3, #5
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	e010      	b.n	800231c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80022fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002328 <osKernelStart+0x48>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d109      	bne.n	8002316 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002302:	f7ff ffbf 	bl	8002284 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002306:	4b08      	ldr	r3, [pc, #32]	@ (8002328 <osKernelStart+0x48>)
 8002308:	2202      	movs	r2, #2
 800230a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800230c:	f001 fce2 	bl	8003cd4 <vTaskStartScheduler>
      stat = osOK;
 8002310:	2300      	movs	r3, #0
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	e002      	b.n	800231c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800231a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800231c:	687b      	ldr	r3, [r7, #4]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000140 	.word	0x20000140

0800232c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b08e      	sub	sp, #56	@ 0x38
 8002330:	af04      	add	r7, sp, #16
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800233c:	f3ef 8305 	mrs	r3, IPSR
 8002340:	617b      	str	r3, [r7, #20]
  return(result);
 8002342:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002344:	2b00      	cmp	r3, #0
 8002346:	d17e      	bne.n	8002446 <osThreadNew+0x11a>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d07b      	beq.n	8002446 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800234e:	2380      	movs	r3, #128	@ 0x80
 8002350:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002352:	2318      	movs	r3, #24
 8002354:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800235e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d045      	beq.n	80023f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <osThreadNew+0x48>
        name = attr->name;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <osThreadNew+0x6e>
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2b38      	cmp	r3, #56	@ 0x38
 800238c:	d805      	bhi.n	800239a <osThreadNew+0x6e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <osThreadNew+0x72>
        return (NULL);
 800239a:	2300      	movs	r3, #0
 800239c:	e054      	b.n	8002448 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00e      	beq.n	80023d4 <osThreadNew+0xa8>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2ba7      	cmp	r3, #167	@ 0xa7
 80023bc:	d90a      	bls.n	80023d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d006      	beq.n	80023d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <osThreadNew+0xa8>
        mem = 1;
 80023ce:	2301      	movs	r3, #1
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	e010      	b.n	80023f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10c      	bne.n	80023f6 <osThreadNew+0xca>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d108      	bne.n	80023f6 <osThreadNew+0xca>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d104      	bne.n	80023f6 <osThreadNew+0xca>
          mem = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
 80023f0:	e001      	b.n	80023f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d110      	bne.n	800241e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002404:	9202      	str	r2, [sp, #8]
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	6a3a      	ldr	r2, [r7, #32]
 8002410:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f001 fa6a 	bl	80038ec <xTaskCreateStatic>
 8002418:	4603      	mov	r3, r0
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	e013      	b.n	8002446 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d110      	bne.n	8002446 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	b29a      	uxth	r2, r3
 8002428:	f107 0310 	add.w	r3, r7, #16
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f001 fab8 	bl	80039ac <xTaskCreate>
 800243c:	4603      	mov	r3, r0
 800243e:	2b01      	cmp	r3, #1
 8002440:	d001      	beq.n	8002446 <osThreadNew+0x11a>
            hTask = NULL;
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002446:	693b      	ldr	r3, [r7, #16]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3728      	adds	r7, #40	@ 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002458:	f3ef 8305 	mrs	r3, IPSR
 800245c:	60bb      	str	r3, [r7, #8]
  return(result);
 800245e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <osDelay+0x1c>
    stat = osErrorISR;
 8002464:	f06f 0305 	mvn.w	r3, #5
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	e007      	b.n	800247c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f001 fbf6 	bl	8003c68 <vTaskDelay>
    }
  }

  return (stat);
 800247c:	68fb      	ldr	r3, [r7, #12]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002486:	b580      	push	{r7, lr}
 8002488:	b08a      	sub	sp, #40	@ 0x28
 800248a:	af02      	add	r7, sp, #8
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002496:	f3ef 8305 	mrs	r3, IPSR
 800249a:	613b      	str	r3, [r7, #16]
  return(result);
 800249c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d175      	bne.n	800258e <osSemaphoreNew+0x108>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d072      	beq.n	800258e <osSemaphoreNew+0x108>
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d86e      	bhi.n	800258e <osSemaphoreNew+0x108>
    mem = -1;
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024b4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d015      	beq.n	80024e8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <osSemaphoreNew+0x4c>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b4f      	cmp	r3, #79	@ 0x4f
 80024ca:	d902      	bls.n	80024d2 <osSemaphoreNew+0x4c>
        mem = 1;
 80024cc:	2301      	movs	r3, #1
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	e00c      	b.n	80024ec <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d108      	bne.n	80024ec <osSemaphoreNew+0x66>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d104      	bne.n	80024ec <osSemaphoreNew+0x66>
          mem = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	e001      	b.n	80024ec <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024f2:	d04c      	beq.n	800258e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d128      	bne.n	800254c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d10a      	bne.n	8002516 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2203      	movs	r2, #3
 8002506:	9200      	str	r2, [sp, #0]
 8002508:	2200      	movs	r2, #0
 800250a:	2100      	movs	r1, #0
 800250c:	2001      	movs	r0, #1
 800250e:	f000 fa2b 	bl	8002968 <xQueueGenericCreateStatic>
 8002512:	61f8      	str	r0, [r7, #28]
 8002514:	e005      	b.n	8002522 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002516:	2203      	movs	r2, #3
 8002518:	2100      	movs	r1, #0
 800251a:	2001      	movs	r0, #1
 800251c:	f000 faa1 	bl	8002a62 <xQueueGenericCreate>
 8002520:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d022      	beq.n	800256e <osSemaphoreNew+0xe8>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01f      	beq.n	800256e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800252e:	2300      	movs	r3, #0
 8002530:	2200      	movs	r2, #0
 8002532:	2100      	movs	r1, #0
 8002534:	69f8      	ldr	r0, [r7, #28]
 8002536:	f000 fb61 	bl	8002bfc <xQueueGenericSend>
 800253a:	4603      	mov	r3, r0
 800253c:	2b01      	cmp	r3, #1
 800253e:	d016      	beq.n	800256e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002540:	69f8      	ldr	r0, [r7, #28]
 8002542:	f000 ffff 	bl	8003544 <vQueueDelete>
            hSemaphore = NULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	e010      	b.n	800256e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d108      	bne.n	8002564 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	461a      	mov	r2, r3
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fadf 	bl	8002b1e <xQueueCreateCountingSemaphoreStatic>
 8002560:	61f8      	str	r0, [r7, #28]
 8002562:	e004      	b.n	800256e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fb12 	bl	8002b90 <xQueueCreateCountingSemaphore>
 800256c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00c      	beq.n	800258e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <osSemaphoreNew+0xfc>
          name = attr->name;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	e001      	b.n	8002586 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002586:	6979      	ldr	r1, [r7, #20]
 8002588:	69f8      	ldr	r0, [r7, #28]
 800258a:	f001 f927 	bl	80037dc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800258e:	69fb      	ldr	r3, [r7, #28]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d103      	bne.n	80025b8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80025b0:	f06f 0303 	mvn.w	r3, #3
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	e039      	b.n	800262c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025b8:	f3ef 8305 	mrs	r3, IPSR
 80025bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80025be:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d022      	beq.n	800260a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80025ca:	f06f 0303 	mvn.w	r3, #3
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	e02c      	b.n	800262c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80025d6:	f107 0308 	add.w	r3, r7, #8
 80025da:	461a      	mov	r2, r3
 80025dc:	2100      	movs	r1, #0
 80025de:	6938      	ldr	r0, [r7, #16]
 80025e0:	f000 ff2e 	bl	8003440 <xQueueReceiveFromISR>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d003      	beq.n	80025f2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80025ea:	f06f 0302 	mvn.w	r3, #2
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	e01c      	b.n	800262c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d019      	beq.n	800262c <osSemaphoreAcquire+0x94>
 80025f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002638 <osSemaphoreAcquire+0xa0>)
 80025fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	e010      	b.n	800262c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800260a:	6839      	ldr	r1, [r7, #0]
 800260c:	6938      	ldr	r0, [r7, #16]
 800260e:	f000 fe07 	bl	8003220 <xQueueSemaphoreTake>
 8002612:	4603      	mov	r3, r0
 8002614:	2b01      	cmp	r3, #1
 8002616:	d009      	beq.n	800262c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800261e:	f06f 0301 	mvn.w	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	e002      	b.n	800262c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002626:	f06f 0302 	mvn.w	r3, #2
 800262a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800262c:	697b      	ldr	r3, [r7, #20]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	e000ed04 	.word	0xe000ed04

0800263c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d103      	bne.n	800265a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002652:	f06f 0303 	mvn.w	r3, #3
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	e02c      	b.n	80026b4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800265a:	f3ef 8305 	mrs	r3, IPSR
 800265e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002660:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01a      	beq.n	800269c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	4619      	mov	r1, r3
 8002670:	6938      	ldr	r0, [r7, #16]
 8002672:	f000 fc63 	bl	8002f3c <xQueueGiveFromISR>
 8002676:	4603      	mov	r3, r0
 8002678:	2b01      	cmp	r3, #1
 800267a:	d003      	beq.n	8002684 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800267c:	f06f 0302 	mvn.w	r3, #2
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e017      	b.n	80026b4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d014      	beq.n	80026b4 <osSemaphoreRelease+0x78>
 800268a:	4b0d      	ldr	r3, [pc, #52]	@ (80026c0 <osSemaphoreRelease+0x84>)
 800268c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	f3bf 8f6f 	isb	sy
 800269a:	e00b      	b.n	80026b4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800269c:	2300      	movs	r3, #0
 800269e:	2200      	movs	r2, #0
 80026a0:	2100      	movs	r1, #0
 80026a2:	6938      	ldr	r0, [r7, #16]
 80026a4:	f000 faaa 	bl	8002bfc <xQueueGenericSend>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d002      	beq.n	80026b4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80026ae:	f06f 0302 	mvn.w	r3, #2
 80026b2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80026b4:	697b      	ldr	r3, [r7, #20]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	e000ed04 	.word	0xe000ed04

080026c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a07      	ldr	r2, [pc, #28]	@ (80026f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80026d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	4a06      	ldr	r2, [pc, #24]	@ (80026f4 <vApplicationGetIdleTaskMemory+0x30>)
 80026da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2280      	movs	r2, #128	@ 0x80
 80026e0:	601a      	str	r2, [r3, #0]
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000144 	.word	0x20000144
 80026f4:	200001ec 	.word	0x200001ec

080026f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4a07      	ldr	r2, [pc, #28]	@ (8002724 <vApplicationGetTimerTaskMemory+0x2c>)
 8002708:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4a06      	ldr	r2, [pc, #24]	@ (8002728 <vApplicationGetTimerTaskMemory+0x30>)
 800270e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002716:	601a      	str	r2, [r3, #0]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	200003ec 	.word	0x200003ec
 8002728:	20000494 	.word	0x20000494

0800272c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f103 0208 	add.w	r2, r3, #8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002744:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f103 0208 	add.w	r2, r3, #8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f103 0208 	add.w	r2, r3, #8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	601a      	str	r2, [r3, #0]
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027ce:	b480      	push	{r7}
 80027d0:	b085      	sub	sp, #20
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027e4:	d103      	bne.n	80027ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e00c      	b.n	8002808 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3308      	adds	r3, #8
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	e002      	b.n	80027fc <vListInsert+0x2e>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	429a      	cmp	r2, r3
 8002806:	d2f6      	bcs.n	80027f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	601a      	str	r2, [r3, #0]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6892      	ldr	r2, [r2, #8]
 8002856:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6852      	ldr	r2, [r2, #4]
 8002860:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	429a      	cmp	r2, r3
 800286a:	d103      	bne.n	8002874 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	1e5a      	subs	r2, r3, #1
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10b      	bne.n	80028c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028ba:	bf00      	nop
 80028bc:	bf00      	nop
 80028be:	e7fd      	b.n	80028bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028c0:	f002 fcda 	bl	8005278 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028cc:	68f9      	ldr	r1, [r7, #12]
 80028ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	441a      	add	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f0:	3b01      	subs	r3, #1
 80028f2:	68f9      	ldr	r1, [r7, #12]
 80028f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	441a      	add	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	22ff      	movs	r2, #255	@ 0xff
 8002904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	22ff      	movs	r2, #255	@ 0xff
 800290c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d114      	bne.n	8002940 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01a      	beq.n	8002954 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3310      	adds	r3, #16
 8002922:	4618      	mov	r0, r3
 8002924:	f001 fc74 	bl	8004210 <xTaskRemoveFromEventList>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d012      	beq.n	8002954 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <xQueueGenericReset+0xd0>)
 8002930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f3bf 8f4f 	dsb	sy
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	e009      	b.n	8002954 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3310      	adds	r3, #16
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fef1 	bl	800272c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	3324      	adds	r3, #36	@ 0x24
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff feec 	bl	800272c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002954:	f002 fcc2 	bl	80052dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002958:	2301      	movs	r3, #1
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	e000ed04 	.word	0xe000ed04

08002968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08e      	sub	sp, #56	@ 0x38
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10b      	bne.n	8002994 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800297c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800298e:	bf00      	nop
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10b      	bne.n	80029b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800299a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800299e:	f383 8811 	msr	BASEPRI, r3
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	e7fd      	b.n	80029ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <xQueueGenericCreateStatic+0x56>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <xQueueGenericCreateStatic+0x5a>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <xQueueGenericCreateStatic+0x5c>
 80029c2:	2300      	movs	r3, #0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10b      	bne.n	80029e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80029c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	623b      	str	r3, [r7, #32]
}
 80029da:	bf00      	nop
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <xQueueGenericCreateStatic+0x84>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <xQueueGenericCreateStatic+0x88>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <xQueueGenericCreateStatic+0x8a>
 80029f0:	2300      	movs	r3, #0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10b      	bne.n	8002a0e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	61fb      	str	r3, [r7, #28]
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	e7fd      	b.n	8002a0a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a0e:	2350      	movs	r3, #80	@ 0x50
 8002a10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b50      	cmp	r3, #80	@ 0x50
 8002a16:	d00b      	beq.n	8002a30 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	61bb      	str	r3, [r7, #24]
}
 8002a2a:	bf00      	nop
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a44:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f840 	bl	8002ad8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3730      	adds	r7, #48	@ 0x30
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b08a      	sub	sp, #40	@ 0x28
 8002a66:	af02      	add	r7, sp, #8
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <xQueueGenericCreate+0x2c>
	__asm volatile
 8002a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a7a:	f383 8811 	msr	BASEPRI, r3
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	613b      	str	r3, [r7, #16]
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	e7fd      	b.n	8002a8a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	3350      	adds	r3, #80	@ 0x50
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f002 fd0d 	bl	80054bc <pvPortMalloc>
 8002aa2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d011      	beq.n	8002ace <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	3350      	adds	r3, #80	@ 0x50
 8002ab2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002abc:	79fa      	ldrb	r2, [r7, #7]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f805 	bl	8002ad8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ace:	69bb      	ldr	r3, [r7, #24]
	}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3720      	adds	r7, #32
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d103      	bne.n	8002af4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e002      	b.n	8002afa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b06:	2101      	movs	r1, #1
 8002b08:	69b8      	ldr	r0, [r7, #24]
 8002b0a:	f7ff fec3 	bl	8002894 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b08a      	sub	sp, #40	@ 0x28
 8002b22:	af02      	add	r7, sp, #8
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10b      	bne.n	8002b48 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8002b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b34:	f383 8811 	msr	BASEPRI, r3
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	61bb      	str	r3, [r7, #24]
}
 8002b42:	bf00      	nop
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d90b      	bls.n	8002b68 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	617b      	str	r3, [r7, #20]
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002b68:	2302      	movs	r3, #2
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2100      	movs	r1, #0
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f7ff fef8 	bl	8002968 <xQueueGenericCreateStatic>
 8002b78:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002b86:	69fb      	ldr	r3, [r7, #28]
	}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10b      	bne.n	8002bb8 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	613b      	str	r3, [r7, #16]
}
 8002bb2:	bf00      	nop
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d90b      	bls.n	8002bd8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	60fb      	str	r3, [r7, #12]
}
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002bd8:	2202      	movs	r2, #2
 8002bda:	2100      	movs	r1, #0
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ff40 	bl	8002a62 <xQueueGenericCreate>
 8002be2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002bf0:	697b      	ldr	r3, [r7, #20]
	}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08e      	sub	sp, #56	@ 0x38
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10b      	bne.n	8002c30 <xQueueGenericSend+0x34>
	__asm volatile
 8002c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c2a:	bf00      	nop
 8002c2c:	bf00      	nop
 8002c2e:	e7fd      	b.n	8002c2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <xQueueGenericSend+0x42>
 8002c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <xQueueGenericSend+0x46>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <xQueueGenericSend+0x48>
 8002c42:	2300      	movs	r3, #0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10b      	bne.n	8002c60 <xQueueGenericSend+0x64>
	__asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d103      	bne.n	8002c6e <xQueueGenericSend+0x72>
 8002c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <xQueueGenericSend+0x76>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <xQueueGenericSend+0x78>
 8002c72:	2300      	movs	r3, #0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10b      	bne.n	8002c90 <xQueueGenericSend+0x94>
	__asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	623b      	str	r3, [r7, #32]
}
 8002c8a:	bf00      	nop
 8002c8c:	bf00      	nop
 8002c8e:	e7fd      	b.n	8002c8c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c90:	f001 fc84 	bl	800459c <xTaskGetSchedulerState>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <xQueueGenericSend+0xa4>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <xQueueGenericSend+0xa8>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <xQueueGenericSend+0xaa>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10b      	bne.n	8002cc2 <xQueueGenericSend+0xc6>
	__asm volatile
 8002caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	61fb      	str	r3, [r7, #28]
}
 8002cbc:	bf00      	nop
 8002cbe:	bf00      	nop
 8002cc0:	e7fd      	b.n	8002cbe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cc2:	f002 fad9 	bl	8005278 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <xQueueGenericSend+0xdc>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d129      	bne.n	8002d2c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cde:	f000 fc6d 	bl	80035bc <prvCopyDataToQueue>
 8002ce2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cee:	3324      	adds	r3, #36	@ 0x24
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f001 fa8d 	bl	8004210 <xTaskRemoveFromEventList>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8002dfc <xQueueGenericSend+0x200>)
 8002cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	e00a      	b.n	8002d24 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d007      	beq.n	8002d24 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d14:	4b39      	ldr	r3, [pc, #228]	@ (8002dfc <xQueueGenericSend+0x200>)
 8002d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d24:	f002 fada 	bl	80052dc <vPortExitCritical>
				return pdPASS;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e063      	b.n	8002df4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d103      	bne.n	8002d3a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d32:	f002 fad3 	bl	80052dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e05c      	b.n	8002df4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d106      	bne.n	8002d4e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	4618      	mov	r0, r3
 8002d46:	f001 fac7 	bl	80042d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d4e:	f002 fac5 	bl	80052dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d52:	f001 f82f 	bl	8003db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d56:	f002 fa8f 	bl	8005278 <vPortEnterCritical>
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d60:	b25b      	sxtb	r3, r3
 8002d62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d66:	d103      	bne.n	8002d70 <xQueueGenericSend+0x174>
 8002d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d76:	b25b      	sxtb	r3, r3
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d7c:	d103      	bne.n	8002d86 <xQueueGenericSend+0x18a>
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d86:	f002 faa9 	bl	80052dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d8a:	1d3a      	adds	r2, r7, #4
 8002d8c:	f107 0314 	add.w	r3, r7, #20
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 fab6 	bl	8004304 <xTaskCheckForTimeOut>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d124      	bne.n	8002de8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002da0:	f000 fd04 	bl	80037ac <prvIsQueueFull>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d018      	beq.n	8002ddc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dac:	3310      	adds	r3, #16
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 f9da 	bl	800416c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002db8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dba:	f000 fc8f 	bl	80036dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002dbe:	f001 f807 	bl	8003dd0 <xTaskResumeAll>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f47f af7c 	bne.w	8002cc2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002dca:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <xQueueGenericSend+0x200>)
 8002dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	e772      	b.n	8002cc2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ddc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dde:	f000 fc7d 	bl	80036dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002de2:	f000 fff5 	bl	8003dd0 <xTaskResumeAll>
 8002de6:	e76c      	b.n	8002cc2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002de8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dea:	f000 fc77 	bl	80036dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dee:	f000 ffef 	bl	8003dd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002df2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3738      	adds	r7, #56	@ 0x38
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	e000ed04 	.word	0xe000ed04

08002e00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b090      	sub	sp, #64	@ 0x40
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10b      	bne.n	8002e30 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e2a:	bf00      	nop
 8002e2c:	bf00      	nop
 8002e2e:	e7fd      	b.n	8002e2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d103      	bne.n	8002e3e <xQueueGenericSendFromISR+0x3e>
 8002e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <xQueueGenericSendFromISR+0x42>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <xQueueGenericSendFromISR+0x44>
 8002e42:	2300      	movs	r3, #0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10b      	bne.n	8002e60 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e5a:	bf00      	nop
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d103      	bne.n	8002e6e <xQueueGenericSendFromISR+0x6e>
 8002e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <xQueueGenericSendFromISR+0x72>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <xQueueGenericSendFromISR+0x74>
 8002e72:	2300      	movs	r3, #0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	623b      	str	r3, [r7, #32]
}
 8002e8a:	bf00      	nop
 8002e8c:	bf00      	nop
 8002e8e:	e7fd      	b.n	8002e8c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e90:	f002 fad2 	bl	8005438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e94:	f3ef 8211 	mrs	r2, BASEPRI
 8002e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	61fa      	str	r2, [r7, #28]
 8002eaa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002eac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002eae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d302      	bcc.n	8002ec2 <xQueueGenericSendFromISR+0xc2>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d12f      	bne.n	8002f22 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ec8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002ed8:	f000 fb70 	bl	80035bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002edc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ee4:	d112      	bne.n	8002f0c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d016      	beq.n	8002f1c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef0:	3324      	adds	r3, #36	@ 0x24
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f001 f98c 	bl	8004210 <xTaskRemoveFromEventList>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00e      	beq.n	8002f1c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00b      	beq.n	8002f1c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	e007      	b.n	8002f1c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002f10:	3301      	adds	r3, #1
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	b25a      	sxtb	r2, r3
 8002f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002f20:	e001      	b.n	8002f26 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f28:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3740      	adds	r7, #64	@ 0x40
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08e      	sub	sp, #56	@ 0x38
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10b      	bne.n	8002f68 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	623b      	str	r3, [r7, #32]
}
 8002f62:	bf00      	nop
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	61fb      	str	r3, [r7, #28]
}
 8002f82:	bf00      	nop
 8002f84:	bf00      	nop
 8002f86:	e7fd      	b.n	8002f84 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d103      	bne.n	8002f98 <xQueueGiveFromISR+0x5c>
 8002f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <xQueueGiveFromISR+0x60>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <xQueueGiveFromISR+0x62>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10b      	bne.n	8002fba <xQueueGiveFromISR+0x7e>
	__asm volatile
 8002fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	61bb      	str	r3, [r7, #24]
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	e7fd      	b.n	8002fb6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fba:	f002 fa3d 	bl	8005438 <vPortValidateInterruptPriority>
	__asm volatile
 8002fbe:	f3ef 8211 	mrs	r2, BASEPRI
 8002fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	617a      	str	r2, [r7, #20]
 8002fd4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002fd6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fde:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d22b      	bcs.n	8003042 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ff0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ffc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003004:	d112      	bne.n	800302c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800300e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003010:	3324      	adds	r3, #36	@ 0x24
 8003012:	4618      	mov	r0, r3
 8003014:	f001 f8fc 	bl	8004210 <xTaskRemoveFromEventList>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00e      	beq.n	800303c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00b      	beq.n	800303c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	e007      	b.n	800303c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800302c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003030:	3301      	adds	r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	b25a      	sxtb	r2, r3
 8003036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800303c:	2301      	movs	r3, #1
 800303e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003040:	e001      	b.n	8003046 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003042:	2300      	movs	r3, #0
 8003044:	637b      	str	r3, [r7, #52]	@ 0x34
 8003046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003048:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f383 8811 	msr	BASEPRI, r3
}
 8003050:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003054:	4618      	mov	r0, r3
 8003056:	3738      	adds	r7, #56	@ 0x38
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08c      	sub	sp, #48	@ 0x30
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003068:	2300      	movs	r3, #0
 800306a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10b      	bne.n	800308e <xQueueReceive+0x32>
	__asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	623b      	str	r3, [r7, #32]
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	e7fd      	b.n	800308a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d103      	bne.n	800309c <xQueueReceive+0x40>
 8003094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <xQueueReceive+0x44>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <xQueueReceive+0x46>
 80030a0:	2300      	movs	r3, #0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <xQueueReceive+0x62>
	__asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	61fb      	str	r3, [r7, #28]
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	e7fd      	b.n	80030ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030be:	f001 fa6d 	bl	800459c <xTaskGetSchedulerState>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <xQueueReceive+0x72>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <xQueueReceive+0x76>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <xQueueReceive+0x78>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <xQueueReceive+0x94>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	61bb      	str	r3, [r7, #24]
}
 80030ea:	bf00      	nop
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030f0:	f002 f8c2 	bl	8005278 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01f      	beq.n	8003140 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003104:	f000 fac4 	bl	8003690 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	1e5a      	subs	r2, r3, #1
 800310c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00f      	beq.n	8003138 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311a:	3310      	adds	r3, #16
 800311c:	4618      	mov	r0, r3
 800311e:	f001 f877 	bl	8004210 <xTaskRemoveFromEventList>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003128:	4b3c      	ldr	r3, [pc, #240]	@ (800321c <xQueueReceive+0x1c0>)
 800312a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003138:	f002 f8d0 	bl	80052dc <vPortExitCritical>
				return pdPASS;
 800313c:	2301      	movs	r3, #1
 800313e:	e069      	b.n	8003214 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d103      	bne.n	800314e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003146:	f002 f8c9 	bl	80052dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800314a:	2300      	movs	r3, #0
 800314c:	e062      	b.n	8003214 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800314e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d106      	bne.n	8003162 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003154:	f107 0310 	add.w	r3, r7, #16
 8003158:	4618      	mov	r0, r3
 800315a:	f001 f8bd 	bl	80042d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800315e:	2301      	movs	r3, #1
 8003160:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003162:	f002 f8bb 	bl	80052dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003166:	f000 fe25 	bl	8003db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800316a:	f002 f885 	bl	8005278 <vPortEnterCritical>
 800316e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003170:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003174:	b25b      	sxtb	r3, r3
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800317a:	d103      	bne.n	8003184 <xQueueReceive+0x128>
 800317c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003186:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800318a:	b25b      	sxtb	r3, r3
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003190:	d103      	bne.n	800319a <xQueueReceive+0x13e>
 8003192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800319a:	f002 f89f 	bl	80052dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800319e:	1d3a      	adds	r2, r7, #4
 80031a0:	f107 0310 	add.w	r3, r7, #16
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f001 f8ac 	bl	8004304 <xTaskCheckForTimeOut>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d123      	bne.n	80031fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031b4:	f000 fae4 	bl	8003780 <prvIsQueueEmpty>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d017      	beq.n	80031ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c0:	3324      	adds	r3, #36	@ 0x24
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 ffd0 	bl	800416c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031ce:	f000 fa85 	bl	80036dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031d2:	f000 fdfd 	bl	8003dd0 <xTaskResumeAll>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d189      	bne.n	80030f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80031dc:	4b0f      	ldr	r3, [pc, #60]	@ (800321c <xQueueReceive+0x1c0>)
 80031de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	e780      	b.n	80030f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031f0:	f000 fa74 	bl	80036dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031f4:	f000 fdec 	bl	8003dd0 <xTaskResumeAll>
 80031f8:	e77a      	b.n	80030f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031fc:	f000 fa6e 	bl	80036dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003200:	f000 fde6 	bl	8003dd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003204:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003206:	f000 fabb 	bl	8003780 <prvIsQueueEmpty>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	f43f af6f 	beq.w	80030f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003212:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003214:	4618      	mov	r0, r3
 8003216:	3730      	adds	r7, #48	@ 0x30
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	e000ed04 	.word	0xe000ed04

08003220 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08e      	sub	sp, #56	@ 0x38
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800322a:	2300      	movs	r3, #0
 800322c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003232:	2300      	movs	r3, #0
 8003234:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10b      	bne.n	8003254 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800323c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	623b      	str	r3, [r7, #32]
}
 800324e:	bf00      	nop
 8003250:	bf00      	nop
 8003252:	e7fd      	b.n	8003250 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00b      	beq.n	8003274 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	61fb      	str	r3, [r7, #28]
}
 800326e:	bf00      	nop
 8003270:	bf00      	nop
 8003272:	e7fd      	b.n	8003270 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003274:	f001 f992 	bl	800459c <xTaskGetSchedulerState>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <xQueueSemaphoreTake+0x64>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <xQueueSemaphoreTake+0x68>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <xQueueSemaphoreTake+0x6a>
 8003288:	2300      	movs	r3, #0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10b      	bne.n	80032a6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	61bb      	str	r3, [r7, #24]
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	e7fd      	b.n	80032a2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032a6:	f001 ffe7 	bl	8005278 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80032aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ae:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80032b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d024      	beq.n	8003300 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80032b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b8:	1e5a      	subs	r2, r3, #1
 80032ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032bc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d104      	bne.n	80032d0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80032c6:	f001 fae3 	bl	8004890 <pvTaskIncrementMutexHeldCount>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00f      	beq.n	80032f8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032da:	3310      	adds	r3, #16
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 ff97 	bl	8004210 <xTaskRemoveFromEventList>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d007      	beq.n	80032f8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032e8:	4b54      	ldr	r3, [pc, #336]	@ (800343c <xQueueSemaphoreTake+0x21c>)
 80032ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032f8:	f001 fff0 	bl	80052dc <vPortExitCritical>
				return pdPASS;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e098      	b.n	8003432 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d112      	bne.n	800332c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00b      	beq.n	8003324 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	617b      	str	r3, [r7, #20]
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	e7fd      	b.n	8003320 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003324:	f001 ffda 	bl	80052dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003328:	2300      	movs	r3, #0
 800332a:	e082      	b.n	8003432 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800332c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003332:	f107 030c 	add.w	r3, r7, #12
 8003336:	4618      	mov	r0, r3
 8003338:	f000 ffce 	bl	80042d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800333c:	2301      	movs	r3, #1
 800333e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003340:	f001 ffcc 	bl	80052dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003344:	f000 fd36 	bl	8003db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003348:	f001 ff96 	bl	8005278 <vPortEnterCritical>
 800334c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003352:	b25b      	sxtb	r3, r3
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003358:	d103      	bne.n	8003362 <xQueueSemaphoreTake+0x142>
 800335a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003364:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003368:	b25b      	sxtb	r3, r3
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800336e:	d103      	bne.n	8003378 <xQueueSemaphoreTake+0x158>
 8003370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003378:	f001 ffb0 	bl	80052dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800337c:	463a      	mov	r2, r7
 800337e:	f107 030c 	add.w	r3, r7, #12
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f000 ffbd 	bl	8004304 <xTaskCheckForTimeOut>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d132      	bne.n	80033f6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003390:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003392:	f000 f9f5 	bl	8003780 <prvIsQueueEmpty>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d026      	beq.n	80033ea <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800339c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d109      	bne.n	80033b8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80033a4:	f001 ff68 	bl	8005278 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f001 f913 	bl	80045d8 <xTaskPriorityInherit>
 80033b2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80033b4:	f001 ff92 	bl	80052dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ba:	3324      	adds	r3, #36	@ 0x24
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fed3 	bl	800416c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033c8:	f000 f988 	bl	80036dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033cc:	f000 fd00 	bl	8003dd0 <xTaskResumeAll>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f47f af67 	bne.w	80032a6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80033d8:	4b18      	ldr	r3, [pc, #96]	@ (800343c <xQueueSemaphoreTake+0x21c>)
 80033da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	e75d      	b.n	80032a6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80033ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033ec:	f000 f976 	bl	80036dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033f0:	f000 fcee 	bl	8003dd0 <xTaskResumeAll>
 80033f4:	e757      	b.n	80032a6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80033f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033f8:	f000 f970 	bl	80036dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033fc:	f000 fce8 	bl	8003dd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003400:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003402:	f000 f9bd 	bl	8003780 <prvIsQueueEmpty>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	f43f af4c 	beq.w	80032a6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800340e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00d      	beq.n	8003430 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003414:	f001 ff30 	bl	8005278 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003418:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800341a:	f000 f8b7 	bl	800358c <prvGetDisinheritPriorityAfterTimeout>
 800341e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003426:	4618      	mov	r0, r3
 8003428:	f001 f9ae 	bl	8004788 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800342c:	f001 ff56 	bl	80052dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003430:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003432:	4618      	mov	r0, r3
 8003434:	3738      	adds	r7, #56	@ 0x38
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	e000ed04 	.word	0xe000ed04

08003440 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08e      	sub	sp, #56	@ 0x38
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10b      	bne.n	800346e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	623b      	str	r3, [r7, #32]
}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	e7fd      	b.n	800346a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d103      	bne.n	800347c <xQueueReceiveFromISR+0x3c>
 8003474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <xQueueReceiveFromISR+0x40>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <xQueueReceiveFromISR+0x42>
 8003480:	2300      	movs	r3, #0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	61fb      	str	r3, [r7, #28]
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	e7fd      	b.n	800349a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800349e:	f001 ffcb 	bl	8005438 <vPortValidateInterruptPriority>
	__asm volatile
 80034a2:	f3ef 8211 	mrs	r2, BASEPRI
 80034a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	61ba      	str	r2, [r7, #24]
 80034b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80034ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d02f      	beq.n	800352a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80034ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034d8:	f000 f8da 	bl	8003690 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034de:	1e5a      	subs	r2, r3, #1
 80034e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80034e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034ec:	d112      	bne.n	8003514 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d016      	beq.n	8003524 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f8:	3310      	adds	r3, #16
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fe88 	bl	8004210 <xTaskRemoveFromEventList>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00e      	beq.n	8003524 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e007      	b.n	8003524 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003518:	3301      	adds	r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	b25a      	sxtb	r2, r3
 800351e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003524:	2301      	movs	r3, #1
 8003526:	637b      	str	r3, [r7, #52]	@ 0x34
 8003528:	e001      	b.n	800352e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800352a:	2300      	movs	r3, #0
 800352c:	637b      	str	r3, [r7, #52]	@ 0x34
 800352e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003530:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f383 8811 	msr	BASEPRI, r3
}
 8003538:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800353a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800353c:	4618      	mov	r0, r3
 800353e:	3738      	adds	r7, #56	@ 0x38
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <vQueueDelete+0x2a>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	60bb      	str	r3, [r7, #8]
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	e7fd      	b.n	800356a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f95e 	bl	8003830 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f002 f86a 	bl	8005658 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	2b00      	cmp	r3, #0
 800359a:	d006      	beq.n	80035aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	e001      	b.n	80035ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80035ae:	68fb      	ldr	r3, [r7, #12]
	}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10d      	bne.n	80035f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d14d      	bne.n	800367e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 f85e 	bl	80046a8 <xTaskPriorityDisinherit>
 80035ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	e043      	b.n	800367e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d119      	bne.n	8003630 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6858      	ldr	r0, [r3, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	461a      	mov	r2, r3
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	f002 fc4d 	bl	8005ea6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003614:	441a      	add	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	d32b      	bcc.n	800367e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	e026      	b.n	800367e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68d8      	ldr	r0, [r3, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	461a      	mov	r2, r3
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	f002 fc33 	bl	8005ea6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	425b      	negs	r3, r3
 800364a:	441a      	add	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d207      	bcs.n	800366c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003664:	425b      	negs	r3, r3
 8003666:	441a      	add	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d105      	bne.n	800367e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	3b01      	subs	r3, #1
 800367c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003686:	697b      	ldr	r3, [r7, #20]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d018      	beq.n	80036d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	441a      	add	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d303      	bcc.n	80036c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68d9      	ldr	r1, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	461a      	mov	r2, r3
 80036ce:	6838      	ldr	r0, [r7, #0]
 80036d0:	f002 fbe9 	bl	8005ea6 <memcpy>
	}
}
 80036d4:	bf00      	nop
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80036e4:	f001 fdc8 	bl	8005278 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036f0:	e011      	b.n	8003716 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d012      	beq.n	8003720 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3324      	adds	r3, #36	@ 0x24
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fd86 	bl	8004210 <xTaskRemoveFromEventList>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800370a:	f000 fe5f 	bl	80043cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	3b01      	subs	r3, #1
 8003712:	b2db      	uxtb	r3, r3
 8003714:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371a:	2b00      	cmp	r3, #0
 800371c:	dce9      	bgt.n	80036f2 <prvUnlockQueue+0x16>
 800371e:	e000      	b.n	8003722 <prvUnlockQueue+0x46>
					break;
 8003720:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	22ff      	movs	r2, #255	@ 0xff
 8003726:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800372a:	f001 fdd7 	bl	80052dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800372e:	f001 fda3 	bl	8005278 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003738:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800373a:	e011      	b.n	8003760 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d012      	beq.n	800376a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3310      	adds	r3, #16
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fd61 	bl	8004210 <xTaskRemoveFromEventList>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003754:	f000 fe3a 	bl	80043cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003758:	7bbb      	ldrb	r3, [r7, #14]
 800375a:	3b01      	subs	r3, #1
 800375c:	b2db      	uxtb	r3, r3
 800375e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003764:	2b00      	cmp	r3, #0
 8003766:	dce9      	bgt.n	800373c <prvUnlockQueue+0x60>
 8003768:	e000      	b.n	800376c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800376a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	22ff      	movs	r2, #255	@ 0xff
 8003770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003774:	f001 fdb2 	bl	80052dc <vPortExitCritical>
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003788:	f001 fd76 	bl	8005278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003794:	2301      	movs	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	e001      	b.n	800379e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800379e:	f001 fd9d 	bl	80052dc <vPortExitCritical>

	return xReturn;
 80037a2:	68fb      	ldr	r3, [r7, #12]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037b4:	f001 fd60 	bl	8005278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d102      	bne.n	80037ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80037c4:	2301      	movs	r3, #1
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e001      	b.n	80037ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037ce:	f001 fd85 	bl	80052dc <vPortExitCritical>

	return xReturn;
 80037d2:	68fb      	ldr	r3, [r7, #12]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e014      	b.n	8003816 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80037ec:	4a0f      	ldr	r2, [pc, #60]	@ (800382c <vQueueAddToRegistry+0x50>)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10b      	bne.n	8003810 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80037f8:	490c      	ldr	r1, [pc, #48]	@ (800382c <vQueueAddToRegistry+0x50>)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003802:	4a0a      	ldr	r2, [pc, #40]	@ (800382c <vQueueAddToRegistry+0x50>)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800380e:	e006      	b.n	800381e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3301      	adds	r3, #1
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b07      	cmp	r3, #7
 800381a:	d9e7      	bls.n	80037ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20000894 	.word	0x20000894

08003830 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e016      	b.n	800386c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800383e:	4a10      	ldr	r2, [pc, #64]	@ (8003880 <vQueueUnregisterQueue+0x50>)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4413      	add	r3, r2
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	429a      	cmp	r2, r3
 800384c:	d10b      	bne.n	8003866 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800384e:	4a0c      	ldr	r2, [pc, #48]	@ (8003880 <vQueueUnregisterQueue+0x50>)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2100      	movs	r1, #0
 8003854:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003858:	4a09      	ldr	r2, [pc, #36]	@ (8003880 <vQueueUnregisterQueue+0x50>)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	2200      	movs	r2, #0
 8003862:	605a      	str	r2, [r3, #4]
				break;
 8003864:	e006      	b.n	8003874 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3301      	adds	r3, #1
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b07      	cmp	r3, #7
 8003870:	d9e5      	bls.n	800383e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003872:	bf00      	nop
 8003874:	bf00      	nop
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	20000894 	.word	0x20000894

08003884 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003894:	f001 fcf0 	bl	8005278 <vPortEnterCritical>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800389e:	b25b      	sxtb	r3, r3
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038a4:	d103      	bne.n	80038ae <vQueueWaitForMessageRestricted+0x2a>
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038b4:	b25b      	sxtb	r3, r3
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038ba:	d103      	bne.n	80038c4 <vQueueWaitForMessageRestricted+0x40>
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038c4:	f001 fd0a 	bl	80052dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d106      	bne.n	80038de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	3324      	adds	r3, #36	@ 0x24
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fc6d 	bl	80041b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80038de:	6978      	ldr	r0, [r7, #20]
 80038e0:	f7ff fefc 	bl	80036dc <prvUnlockQueue>
	}
 80038e4:	bf00      	nop
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08e      	sub	sp, #56	@ 0x38
 80038f0:	af04      	add	r7, sp, #16
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10b      	bne.n	8003918 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	623b      	str	r3, [r7, #32]
}
 8003912:	bf00      	nop
 8003914:	bf00      	nop
 8003916:	e7fd      	b.n	8003914 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10b      	bne.n	8003936 <xTaskCreateStatic+0x4a>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	61fb      	str	r3, [r7, #28]
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	e7fd      	b.n	8003932 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003936:	23a8      	movs	r3, #168	@ 0xa8
 8003938:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2ba8      	cmp	r3, #168	@ 0xa8
 800393e:	d00b      	beq.n	8003958 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	61bb      	str	r3, [r7, #24]
}
 8003952:	bf00      	nop
 8003954:	bf00      	nop
 8003956:	e7fd      	b.n	8003954 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003958:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800395a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01e      	beq.n	800399e <xTaskCreateStatic+0xb2>
 8003960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01b      	beq.n	800399e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800396e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	2202      	movs	r2, #2
 8003974:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003978:	2300      	movs	r3, #0
 800397a:	9303      	str	r3, [sp, #12]
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	9302      	str	r3, [sp, #8]
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f851 	bl	8003a38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003996:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003998:	f000 f8f6 	bl	8003b88 <prvAddNewTaskToReadyList>
 800399c:	e001      	b.n	80039a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039a2:	697b      	ldr	r3, [r7, #20]
	}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3728      	adds	r7, #40	@ 0x28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08c      	sub	sp, #48	@ 0x30
 80039b0:	af04      	add	r7, sp, #16
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 fd7b 	bl	80054bc <pvPortMalloc>
 80039c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00e      	beq.n	80039ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039ce:	20a8      	movs	r0, #168	@ 0xa8
 80039d0:	f001 fd74 	bl	80054bc <pvPortMalloc>
 80039d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80039e2:	e005      	b.n	80039f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039e4:	6978      	ldr	r0, [r7, #20]
 80039e6:	f001 fe37 	bl	8005658 <vPortFree>
 80039ea:	e001      	b.n	80039f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d017      	beq.n	8003a26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	2300      	movs	r3, #0
 8003a02:	9303      	str	r3, [sp, #12]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	9302      	str	r3, [sp, #8]
 8003a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f80f 	bl	8003a38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a1a:	69f8      	ldr	r0, [r7, #28]
 8003a1c:	f000 f8b4 	bl	8003b88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a20:	2301      	movs	r3, #1
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	e002      	b.n	8003a2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a2c:	69bb      	ldr	r3, [r7, #24]
	}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a48:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	461a      	mov	r2, r3
 8003a50:	21a5      	movs	r1, #165	@ 0xa5
 8003a52:	f002 f94f 	bl	8005cf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a60:	3b01      	subs	r3, #1
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f023 0307 	bic.w	r3, r3, #7
 8003a6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	617b      	str	r3, [r7, #20]
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	e7fd      	b.n	8003a8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01f      	beq.n	8003ad8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	e012      	b.n	8003ac4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	7819      	ldrb	r1, [r3, #0]
 8003aa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	4413      	add	r3, r2
 8003aac:	3334      	adds	r3, #52	@ 0x34
 8003aae:	460a      	mov	r2, r1
 8003ab0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d006      	beq.n	8003acc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2b0f      	cmp	r3, #15
 8003ac8:	d9e9      	bls.n	8003a9e <prvInitialiseNewTask+0x66>
 8003aca:	e000      	b.n	8003ace <prvInitialiseNewTask+0x96>
			{
				break;
 8003acc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ad6:	e003      	b.n	8003ae0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae2:	2b37      	cmp	r3, #55	@ 0x37
 8003ae4:	d901      	bls.n	8003aea <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ae6:	2337      	movs	r3, #55	@ 0x37
 8003ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003af4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af8:	2200      	movs	r2, #0
 8003afa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afe:	3304      	adds	r3, #4
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe fe33 	bl	800276c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b08:	3318      	adds	r3, #24
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fe2e 	bl	800276c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b18:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b24:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	3354      	adds	r3, #84	@ 0x54
 8003b3a:	224c      	movs	r2, #76	@ 0x4c
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f002 f8d8 	bl	8005cf4 <memset>
 8003b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b46:	4a0d      	ldr	r2, [pc, #52]	@ (8003b7c <prvInitialiseNewTask+0x144>)
 8003b48:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b80 <prvInitialiseNewTask+0x148>)
 8003b4e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b52:	4a0c      	ldr	r2, [pc, #48]	@ (8003b84 <prvInitialiseNewTask+0x14c>)
 8003b54:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	68f9      	ldr	r1, [r7, #12]
 8003b5a:	69b8      	ldr	r0, [r7, #24]
 8003b5c:	f001 fa5a 	bl	8005014 <pxPortInitialiseStack>
 8003b60:	4602      	mov	r2, r0
 8003b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b72:	bf00      	nop
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20004b28 	.word	0x20004b28
 8003b80:	20004b90 	.word	0x20004b90
 8003b84:	20004bf8 	.word	0x20004bf8

08003b88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b90:	f001 fb72 	bl	8005278 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b94:	4b2d      	ldr	r3, [pc, #180]	@ (8003c4c <prvAddNewTaskToReadyList+0xc4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c4c <prvAddNewTaskToReadyList+0xc4>)
 8003b9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003c50 <prvAddNewTaskToReadyList+0xc8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c50 <prvAddNewTaskToReadyList+0xc8>)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bac:	4b27      	ldr	r3, [pc, #156]	@ (8003c4c <prvAddNewTaskToReadyList+0xc4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d110      	bne.n	8003bd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bb4:	f000 fc2e 	bl	8004414 <prvInitialiseTaskLists>
 8003bb8:	e00d      	b.n	8003bd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bba:	4b26      	ldr	r3, [pc, #152]	@ (8003c54 <prvAddNewTaskToReadyList+0xcc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bc2:	4b23      	ldr	r3, [pc, #140]	@ (8003c50 <prvAddNewTaskToReadyList+0xc8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d802      	bhi.n	8003bd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c50 <prvAddNewTaskToReadyList+0xc8>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bd6:	4b20      	ldr	r3, [pc, #128]	@ (8003c58 <prvAddNewTaskToReadyList+0xd0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8003c58 <prvAddNewTaskToReadyList+0xd0>)
 8003bde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003be0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c58 <prvAddNewTaskToReadyList+0xd0>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bec:	4b1b      	ldr	r3, [pc, #108]	@ (8003c5c <prvAddNewTaskToReadyList+0xd4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d903      	bls.n	8003bfc <prvAddNewTaskToReadyList+0x74>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf8:	4a18      	ldr	r2, [pc, #96]	@ (8003c5c <prvAddNewTaskToReadyList+0xd4>)
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4a15      	ldr	r2, [pc, #84]	@ (8003c60 <prvAddNewTaskToReadyList+0xd8>)
 8003c0a:	441a      	add	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4610      	mov	r0, r2
 8003c14:	f7fe fdb7 	bl	8002786 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c18:	f001 fb60 	bl	80052dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <prvAddNewTaskToReadyList+0xcc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00e      	beq.n	8003c42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c24:	4b0a      	ldr	r3, [pc, #40]	@ (8003c50 <prvAddNewTaskToReadyList+0xc8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d207      	bcs.n	8003c42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c32:	4b0c      	ldr	r3, [pc, #48]	@ (8003c64 <prvAddNewTaskToReadyList+0xdc>)
 8003c34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000da8 	.word	0x20000da8
 8003c50:	200008d4 	.word	0x200008d4
 8003c54:	20000db4 	.word	0x20000db4
 8003c58:	20000dc4 	.word	0x20000dc4
 8003c5c:	20000db0 	.word	0x20000db0
 8003c60:	200008d8 	.word	0x200008d8
 8003c64:	e000ed04 	.word	0xe000ed04

08003c68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d018      	beq.n	8003cac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c7a:	4b14      	ldr	r3, [pc, #80]	@ (8003ccc <vTaskDelay+0x64>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00b      	beq.n	8003c9a <vTaskDelay+0x32>
	__asm volatile
 8003c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	60bb      	str	r3, [r7, #8]
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop
 8003c98:	e7fd      	b.n	8003c96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c9a:	f000 f88b 	bl	8003db4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fe09 	bl	80048b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ca6:	f000 f893 	bl	8003dd0 <xTaskResumeAll>
 8003caa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d107      	bne.n	8003cc2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003cb2:	4b07      	ldr	r3, [pc, #28]	@ (8003cd0 <vTaskDelay+0x68>)
 8003cb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000dd0 	.word	0x20000dd0
 8003cd0:	e000ed04 	.word	0xe000ed04

08003cd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	@ 0x28
 8003cd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ce2:	463a      	mov	r2, r7
 8003ce4:	1d39      	adds	r1, r7, #4
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe fcea 	bl	80026c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cf0:	6839      	ldr	r1, [r7, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	9202      	str	r2, [sp, #8]
 8003cf8:	9301      	str	r3, [sp, #4]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	460a      	mov	r2, r1
 8003d02:	4924      	ldr	r1, [pc, #144]	@ (8003d94 <vTaskStartScheduler+0xc0>)
 8003d04:	4824      	ldr	r0, [pc, #144]	@ (8003d98 <vTaskStartScheduler+0xc4>)
 8003d06:	f7ff fdf1 	bl	80038ec <xTaskCreateStatic>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4a23      	ldr	r2, [pc, #140]	@ (8003d9c <vTaskStartScheduler+0xc8>)
 8003d0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d10:	4b22      	ldr	r3, [pc, #136]	@ (8003d9c <vTaskStartScheduler+0xc8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	e001      	b.n	8003d22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d102      	bne.n	8003d2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d28:	f000 fe1a 	bl	8004960 <xTimerCreateTimerTask>
 8003d2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d11b      	bne.n	8003d6c <vTaskStartScheduler+0x98>
	__asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	613b      	str	r3, [r7, #16]
}
 8003d46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d48:	4b15      	ldr	r3, [pc, #84]	@ (8003da0 <vTaskStartScheduler+0xcc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3354      	adds	r3, #84	@ 0x54
 8003d4e:	4a15      	ldr	r2, [pc, #84]	@ (8003da4 <vTaskStartScheduler+0xd0>)
 8003d50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d52:	4b15      	ldr	r3, [pc, #84]	@ (8003da8 <vTaskStartScheduler+0xd4>)
 8003d54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d5a:	4b14      	ldr	r3, [pc, #80]	@ (8003dac <vTaskStartScheduler+0xd8>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d60:	4b13      	ldr	r3, [pc, #76]	@ (8003db0 <vTaskStartScheduler+0xdc>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d66:	f001 f9e3 	bl	8005130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d6a:	e00f      	b.n	8003d8c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d72:	d10b      	bne.n	8003d8c <vTaskStartScheduler+0xb8>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	60fb      	str	r3, [r7, #12]
}
 8003d86:	bf00      	nop
 8003d88:	bf00      	nop
 8003d8a:	e7fd      	b.n	8003d88 <vTaskStartScheduler+0xb4>
}
 8003d8c:	bf00      	nop
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	08006aa8 	.word	0x08006aa8
 8003d98:	080043e5 	.word	0x080043e5
 8003d9c:	20000dcc 	.word	0x20000dcc
 8003da0:	200008d4 	.word	0x200008d4
 8003da4:	2000001c 	.word	0x2000001c
 8003da8:	20000dc8 	.word	0x20000dc8
 8003dac:	20000db4 	.word	0x20000db4
 8003db0:	20000dac 	.word	0x20000dac

08003db4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003db8:	4b04      	ldr	r3, [pc, #16]	@ (8003dcc <vTaskSuspendAll+0x18>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	4a03      	ldr	r2, [pc, #12]	@ (8003dcc <vTaskSuspendAll+0x18>)
 8003dc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003dc2:	bf00      	nop
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	20000dd0 	.word	0x20000dd0

08003dd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dde:	4b42      	ldr	r3, [pc, #264]	@ (8003ee8 <xTaskResumeAll+0x118>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10b      	bne.n	8003dfe <xTaskResumeAll+0x2e>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	603b      	str	r3, [r7, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	e7fd      	b.n	8003dfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dfe:	f001 fa3b 	bl	8005278 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e02:	4b39      	ldr	r3, [pc, #228]	@ (8003ee8 <xTaskResumeAll+0x118>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	4a37      	ldr	r2, [pc, #220]	@ (8003ee8 <xTaskResumeAll+0x118>)
 8003e0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e0c:	4b36      	ldr	r3, [pc, #216]	@ (8003ee8 <xTaskResumeAll+0x118>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d162      	bne.n	8003eda <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e14:	4b35      	ldr	r3, [pc, #212]	@ (8003eec <xTaskResumeAll+0x11c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d05e      	beq.n	8003eda <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e1c:	e02f      	b.n	8003e7e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e1e:	4b34      	ldr	r3, [pc, #208]	@ (8003ef0 <xTaskResumeAll+0x120>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3318      	adds	r3, #24
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe fd08 	bl	8002840 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fe fd03 	bl	8002840 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef4 <xTaskResumeAll+0x124>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d903      	bls.n	8003e4e <xTaskResumeAll+0x7e>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ef4 <xTaskResumeAll+0x124>)
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4a27      	ldr	r2, [pc, #156]	@ (8003ef8 <xTaskResumeAll+0x128>)
 8003e5c:	441a      	add	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f7fe fc8e 	bl	8002786 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6e:	4b23      	ldr	r3, [pc, #140]	@ (8003efc <xTaskResumeAll+0x12c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d302      	bcc.n	8003e7e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003e78:	4b21      	ldr	r3, [pc, #132]	@ (8003f00 <xTaskResumeAll+0x130>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef0 <xTaskResumeAll+0x120>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1cb      	bne.n	8003e1e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e8c:	f000 fb66 	bl	800455c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e90:	4b1c      	ldr	r3, [pc, #112]	@ (8003f04 <xTaskResumeAll+0x134>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d010      	beq.n	8003ebe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e9c:	f000 f846 	bl	8003f2c <xTaskIncrementTick>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003ea6:	4b16      	ldr	r3, [pc, #88]	@ (8003f00 <xTaskResumeAll+0x130>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f1      	bne.n	8003e9c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003eb8:	4b12      	ldr	r3, [pc, #72]	@ (8003f04 <xTaskResumeAll+0x134>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ebe:	4b10      	ldr	r3, [pc, #64]	@ (8003f00 <xTaskResumeAll+0x130>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003eca:	4b0f      	ldr	r3, [pc, #60]	@ (8003f08 <xTaskResumeAll+0x138>)
 8003ecc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003eda:	f001 f9ff 	bl	80052dc <vPortExitCritical>

	return xAlreadyYielded;
 8003ede:	68bb      	ldr	r3, [r7, #8]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000dd0 	.word	0x20000dd0
 8003eec:	20000da8 	.word	0x20000da8
 8003ef0:	20000d68 	.word	0x20000d68
 8003ef4:	20000db0 	.word	0x20000db0
 8003ef8:	200008d8 	.word	0x200008d8
 8003efc:	200008d4 	.word	0x200008d4
 8003f00:	20000dbc 	.word	0x20000dbc
 8003f04:	20000db8 	.word	0x20000db8
 8003f08:	e000ed04 	.word	0xe000ed04

08003f0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f12:	4b05      	ldr	r3, [pc, #20]	@ (8003f28 <xTaskGetTickCount+0x1c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f18:	687b      	ldr	r3, [r7, #4]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	20000dac 	.word	0x20000dac

08003f2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f36:	4b4f      	ldr	r3, [pc, #316]	@ (8004074 <xTaskIncrementTick+0x148>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f040 8090 	bne.w	8004060 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f40:	4b4d      	ldr	r3, [pc, #308]	@ (8004078 <xTaskIncrementTick+0x14c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f48:	4a4b      	ldr	r2, [pc, #300]	@ (8004078 <xTaskIncrementTick+0x14c>)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d121      	bne.n	8003f98 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f54:	4b49      	ldr	r3, [pc, #292]	@ (800407c <xTaskIncrementTick+0x150>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	603b      	str	r3, [r7, #0]
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	e7fd      	b.n	8003f72 <xTaskIncrementTick+0x46>
 8003f76:	4b41      	ldr	r3, [pc, #260]	@ (800407c <xTaskIncrementTick+0x150>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	4b40      	ldr	r3, [pc, #256]	@ (8004080 <xTaskIncrementTick+0x154>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a3e      	ldr	r2, [pc, #248]	@ (800407c <xTaskIncrementTick+0x150>)
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	4a3e      	ldr	r2, [pc, #248]	@ (8004080 <xTaskIncrementTick+0x154>)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	4b3e      	ldr	r3, [pc, #248]	@ (8004084 <xTaskIncrementTick+0x158>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	4a3c      	ldr	r2, [pc, #240]	@ (8004084 <xTaskIncrementTick+0x158>)
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	f000 fae2 	bl	800455c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f98:	4b3b      	ldr	r3, [pc, #236]	@ (8004088 <xTaskIncrementTick+0x15c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d349      	bcc.n	8004036 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fa2:	4b36      	ldr	r3, [pc, #216]	@ (800407c <xTaskIncrementTick+0x150>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d104      	bne.n	8003fb6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fac:	4b36      	ldr	r3, [pc, #216]	@ (8004088 <xTaskIncrementTick+0x15c>)
 8003fae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fb2:	601a      	str	r2, [r3, #0]
					break;
 8003fb4:	e03f      	b.n	8004036 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb6:	4b31      	ldr	r3, [pc, #196]	@ (800407c <xTaskIncrementTick+0x150>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d203      	bcs.n	8003fd6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fce:	4a2e      	ldr	r2, [pc, #184]	@ (8004088 <xTaskIncrementTick+0x15c>)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fd4:	e02f      	b.n	8004036 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fc30 	bl	8002840 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d004      	beq.n	8003ff2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	3318      	adds	r3, #24
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fe fc27 	bl	8002840 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff6:	4b25      	ldr	r3, [pc, #148]	@ (800408c <xTaskIncrementTick+0x160>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d903      	bls.n	8004006 <xTaskIncrementTick+0xda>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	4a22      	ldr	r2, [pc, #136]	@ (800408c <xTaskIncrementTick+0x160>)
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4a1f      	ldr	r2, [pc, #124]	@ (8004090 <xTaskIncrementTick+0x164>)
 8004014:	441a      	add	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	3304      	adds	r3, #4
 800401a:	4619      	mov	r1, r3
 800401c:	4610      	mov	r0, r2
 800401e:	f7fe fbb2 	bl	8002786 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004026:	4b1b      	ldr	r3, [pc, #108]	@ (8004094 <xTaskIncrementTick+0x168>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402c:	429a      	cmp	r2, r3
 800402e:	d3b8      	bcc.n	8003fa2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004030:	2301      	movs	r3, #1
 8004032:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004034:	e7b5      	b.n	8003fa2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004036:	4b17      	ldr	r3, [pc, #92]	@ (8004094 <xTaskIncrementTick+0x168>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800403c:	4914      	ldr	r1, [pc, #80]	@ (8004090 <xTaskIncrementTick+0x164>)
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d901      	bls.n	8004052 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800404e:	2301      	movs	r3, #1
 8004050:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004052:	4b11      	ldr	r3, [pc, #68]	@ (8004098 <xTaskIncrementTick+0x16c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d007      	beq.n	800406a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800405a:	2301      	movs	r3, #1
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	e004      	b.n	800406a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004060:	4b0e      	ldr	r3, [pc, #56]	@ (800409c <xTaskIncrementTick+0x170>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	4a0d      	ldr	r2, [pc, #52]	@ (800409c <xTaskIncrementTick+0x170>)
 8004068:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800406a:	697b      	ldr	r3, [r7, #20]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	20000dd0 	.word	0x20000dd0
 8004078:	20000dac 	.word	0x20000dac
 800407c:	20000d60 	.word	0x20000d60
 8004080:	20000d64 	.word	0x20000d64
 8004084:	20000dc0 	.word	0x20000dc0
 8004088:	20000dc8 	.word	0x20000dc8
 800408c:	20000db0 	.word	0x20000db0
 8004090:	200008d8 	.word	0x200008d8
 8004094:	200008d4 	.word	0x200008d4
 8004098:	20000dbc 	.word	0x20000dbc
 800409c:	20000db8 	.word	0x20000db8

080040a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004154 <vTaskSwitchContext+0xb4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004158 <vTaskSwitchContext+0xb8>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040b4:	e047      	b.n	8004146 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80040b6:	4b28      	ldr	r3, [pc, #160]	@ (8004158 <vTaskSwitchContext+0xb8>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040bc:	4b27      	ldr	r3, [pc, #156]	@ (800415c <vTaskSwitchContext+0xbc>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	e011      	b.n	80040e8 <vTaskSwitchContext+0x48>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10b      	bne.n	80040e2 <vTaskSwitchContext+0x42>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	607b      	str	r3, [r7, #4]
}
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	e7fd      	b.n	80040de <vTaskSwitchContext+0x3e>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	491d      	ldr	r1, [pc, #116]	@ (8004160 <vTaskSwitchContext+0xc0>)
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0e3      	beq.n	80040c4 <vTaskSwitchContext+0x24>
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4a16      	ldr	r2, [pc, #88]	@ (8004160 <vTaskSwitchContext+0xc0>)
 8004108:	4413      	add	r3, r2
 800410a:	60bb      	str	r3, [r7, #8]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	605a      	str	r2, [r3, #4]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	3308      	adds	r3, #8
 800411e:	429a      	cmp	r2, r3
 8004120:	d104      	bne.n	800412c <vTaskSwitchContext+0x8c>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	605a      	str	r2, [r3, #4]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	4a0c      	ldr	r2, [pc, #48]	@ (8004164 <vTaskSwitchContext+0xc4>)
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	4a09      	ldr	r2, [pc, #36]	@ (800415c <vTaskSwitchContext+0xbc>)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800413c:	4b09      	ldr	r3, [pc, #36]	@ (8004164 <vTaskSwitchContext+0xc4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3354      	adds	r3, #84	@ 0x54
 8004142:	4a09      	ldr	r2, [pc, #36]	@ (8004168 <vTaskSwitchContext+0xc8>)
 8004144:	6013      	str	r3, [r2, #0]
}
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000dd0 	.word	0x20000dd0
 8004158:	20000dbc 	.word	0x20000dbc
 800415c:	20000db0 	.word	0x20000db0
 8004160:	200008d8 	.word	0x200008d8
 8004164:	200008d4 	.word	0x200008d4
 8004168:	2000001c 	.word	0x2000001c

0800416c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10b      	bne.n	8004194 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	60fb      	str	r3, [r7, #12]
}
 800418e:	bf00      	nop
 8004190:	bf00      	nop
 8004192:	e7fd      	b.n	8004190 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004194:	4b07      	ldr	r3, [pc, #28]	@ (80041b4 <vTaskPlaceOnEventList+0x48>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3318      	adds	r3, #24
 800419a:	4619      	mov	r1, r3
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7fe fb16 	bl	80027ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041a2:	2101      	movs	r1, #1
 80041a4:	6838      	ldr	r0, [r7, #0]
 80041a6:	f000 fb87 	bl	80048b8 <prvAddCurrentTaskToDelayedList>
}
 80041aa:	bf00      	nop
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	200008d4 	.word	0x200008d4

080041b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10b      	bne.n	80041e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	617b      	str	r3, [r7, #20]
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	e7fd      	b.n	80041de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041e2:	4b0a      	ldr	r3, [pc, #40]	@ (800420c <vTaskPlaceOnEventListRestricted+0x54>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3318      	adds	r3, #24
 80041e8:	4619      	mov	r1, r3
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7fe facb 	bl	8002786 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80041f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	68b8      	ldr	r0, [r7, #8]
 8004200:	f000 fb5a 	bl	80048b8 <prvAddCurrentTaskToDelayedList>
	}
 8004204:	bf00      	nop
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200008d4 	.word	0x200008d4

08004210 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	60fb      	str	r3, [r7, #12]
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	e7fd      	b.n	800423a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	3318      	adds	r3, #24
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe fafc 	bl	8002840 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004248:	4b1d      	ldr	r3, [pc, #116]	@ (80042c0 <xTaskRemoveFromEventList+0xb0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d11d      	bne.n	800428c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	3304      	adds	r3, #4
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe faf3 	bl	8002840 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425e:	4b19      	ldr	r3, [pc, #100]	@ (80042c4 <xTaskRemoveFromEventList+0xb4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d903      	bls.n	800426e <xTaskRemoveFromEventList+0x5e>
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	4a16      	ldr	r2, [pc, #88]	@ (80042c4 <xTaskRemoveFromEventList+0xb4>)
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4a13      	ldr	r2, [pc, #76]	@ (80042c8 <xTaskRemoveFromEventList+0xb8>)
 800427c:	441a      	add	r2, r3
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	3304      	adds	r3, #4
 8004282:	4619      	mov	r1, r3
 8004284:	4610      	mov	r0, r2
 8004286:	f7fe fa7e 	bl	8002786 <vListInsertEnd>
 800428a:	e005      	b.n	8004298 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	3318      	adds	r3, #24
 8004290:	4619      	mov	r1, r3
 8004292:	480e      	ldr	r0, [pc, #56]	@ (80042cc <xTaskRemoveFromEventList+0xbc>)
 8004294:	f7fe fa77 	bl	8002786 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800429c:	4b0c      	ldr	r3, [pc, #48]	@ (80042d0 <xTaskRemoveFromEventList+0xc0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d905      	bls.n	80042b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042a6:	2301      	movs	r3, #1
 80042a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042aa:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <xTaskRemoveFromEventList+0xc4>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	e001      	b.n	80042b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042b6:	697b      	ldr	r3, [r7, #20]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000dd0 	.word	0x20000dd0
 80042c4:	20000db0 	.word	0x20000db0
 80042c8:	200008d8 	.word	0x200008d8
 80042cc:	20000d68 	.word	0x20000d68
 80042d0:	200008d4 	.word	0x200008d4
 80042d4:	20000dbc 	.word	0x20000dbc

080042d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042e0:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <vTaskInternalSetTimeOutState+0x24>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042e8:	4b05      	ldr	r3, [pc, #20]	@ (8004300 <vTaskInternalSetTimeOutState+0x28>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	605a      	str	r2, [r3, #4]
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	20000dc0 	.word	0x20000dc0
 8004300:	20000dac 	.word	0x20000dac

08004304 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10b      	bne.n	800432c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	613b      	str	r3, [r7, #16]
}
 8004326:	bf00      	nop
 8004328:	bf00      	nop
 800432a:	e7fd      	b.n	8004328 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10b      	bne.n	800434a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	60fb      	str	r3, [r7, #12]
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	e7fd      	b.n	8004346 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800434a:	f000 ff95 	bl	8005278 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800434e:	4b1d      	ldr	r3, [pc, #116]	@ (80043c4 <xTaskCheckForTimeOut+0xc0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004366:	d102      	bne.n	800436e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	e023      	b.n	80043b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4b15      	ldr	r3, [pc, #84]	@ (80043c8 <xTaskCheckForTimeOut+0xc4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d007      	beq.n	800438a <xTaskCheckForTimeOut+0x86>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	429a      	cmp	r2, r3
 8004382:	d302      	bcc.n	800438a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004384:	2301      	movs	r3, #1
 8004386:	61fb      	str	r3, [r7, #28]
 8004388:	e015      	b.n	80043b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	429a      	cmp	r2, r3
 8004392:	d20b      	bcs.n	80043ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	1ad2      	subs	r2, r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff ff99 	bl	80042d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	e004      	b.n	80043b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043b2:	2301      	movs	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043b6:	f000 ff91 	bl	80052dc <vPortExitCritical>

	return xReturn;
 80043ba:	69fb      	ldr	r3, [r7, #28]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20000dac 	.word	0x20000dac
 80043c8:	20000dc0 	.word	0x20000dc0

080043cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043d0:	4b03      	ldr	r3, [pc, #12]	@ (80043e0 <vTaskMissedYield+0x14>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]
}
 80043d6:	bf00      	nop
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	20000dbc 	.word	0x20000dbc

080043e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043ec:	f000 f852 	bl	8004494 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043f0:	4b06      	ldr	r3, [pc, #24]	@ (800440c <prvIdleTask+0x28>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d9f9      	bls.n	80043ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80043f8:	4b05      	ldr	r3, [pc, #20]	@ (8004410 <prvIdleTask+0x2c>)
 80043fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004408:	e7f0      	b.n	80043ec <prvIdleTask+0x8>
 800440a:	bf00      	nop
 800440c:	200008d8 	.word	0x200008d8
 8004410:	e000ed04 	.word	0xe000ed04

08004414 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800441a:	2300      	movs	r3, #0
 800441c:	607b      	str	r3, [r7, #4]
 800441e:	e00c      	b.n	800443a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4a12      	ldr	r2, [pc, #72]	@ (8004474 <prvInitialiseTaskLists+0x60>)
 800442c:	4413      	add	r3, r2
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe f97c 	bl	800272c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3301      	adds	r3, #1
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b37      	cmp	r3, #55	@ 0x37
 800443e:	d9ef      	bls.n	8004420 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004440:	480d      	ldr	r0, [pc, #52]	@ (8004478 <prvInitialiseTaskLists+0x64>)
 8004442:	f7fe f973 	bl	800272c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004446:	480d      	ldr	r0, [pc, #52]	@ (800447c <prvInitialiseTaskLists+0x68>)
 8004448:	f7fe f970 	bl	800272c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800444c:	480c      	ldr	r0, [pc, #48]	@ (8004480 <prvInitialiseTaskLists+0x6c>)
 800444e:	f7fe f96d 	bl	800272c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004452:	480c      	ldr	r0, [pc, #48]	@ (8004484 <prvInitialiseTaskLists+0x70>)
 8004454:	f7fe f96a 	bl	800272c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004458:	480b      	ldr	r0, [pc, #44]	@ (8004488 <prvInitialiseTaskLists+0x74>)
 800445a:	f7fe f967 	bl	800272c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800445e:	4b0b      	ldr	r3, [pc, #44]	@ (800448c <prvInitialiseTaskLists+0x78>)
 8004460:	4a05      	ldr	r2, [pc, #20]	@ (8004478 <prvInitialiseTaskLists+0x64>)
 8004462:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004464:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <prvInitialiseTaskLists+0x7c>)
 8004466:	4a05      	ldr	r2, [pc, #20]	@ (800447c <prvInitialiseTaskLists+0x68>)
 8004468:	601a      	str	r2, [r3, #0]
}
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	200008d8 	.word	0x200008d8
 8004478:	20000d38 	.word	0x20000d38
 800447c:	20000d4c 	.word	0x20000d4c
 8004480:	20000d68 	.word	0x20000d68
 8004484:	20000d7c 	.word	0x20000d7c
 8004488:	20000d94 	.word	0x20000d94
 800448c:	20000d60 	.word	0x20000d60
 8004490:	20000d64 	.word	0x20000d64

08004494 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800449a:	e019      	b.n	80044d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800449c:	f000 feec 	bl	8005278 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a0:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <prvCheckTasksWaitingTermination+0x50>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe f9c7 	bl	8002840 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044b2:	4b0d      	ldr	r3, [pc, #52]	@ (80044e8 <prvCheckTasksWaitingTermination+0x54>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	4a0b      	ldr	r2, [pc, #44]	@ (80044e8 <prvCheckTasksWaitingTermination+0x54>)
 80044ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044bc:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <prvCheckTasksWaitingTermination+0x58>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	4a0a      	ldr	r2, [pc, #40]	@ (80044ec <prvCheckTasksWaitingTermination+0x58>)
 80044c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044c6:	f000 ff09 	bl	80052dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f810 	bl	80044f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044d0:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <prvCheckTasksWaitingTermination+0x58>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e1      	bne.n	800449c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000d7c 	.word	0x20000d7c
 80044e8:	20000da8 	.word	0x20000da8
 80044ec:	20000d90 	.word	0x20000d90

080044f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3354      	adds	r3, #84	@ 0x54
 80044fc:	4618      	mov	r0, r3
 80044fe:	f001 fc11 	bl	8005d24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004508:	2b00      	cmp	r3, #0
 800450a:	d108      	bne.n	800451e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004510:	4618      	mov	r0, r3
 8004512:	f001 f8a1 	bl	8005658 <vPortFree>
				vPortFree( pxTCB );
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f001 f89e 	bl	8005658 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800451c:	e019      	b.n	8004552 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004524:	2b01      	cmp	r3, #1
 8004526:	d103      	bne.n	8004530 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f001 f895 	bl	8005658 <vPortFree>
	}
 800452e:	e010      	b.n	8004552 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004536:	2b02      	cmp	r3, #2
 8004538:	d00b      	beq.n	8004552 <prvDeleteTCB+0x62>
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	60fb      	str	r3, [r7, #12]
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	e7fd      	b.n	800454e <prvDeleteTCB+0x5e>
	}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004562:	4b0c      	ldr	r3, [pc, #48]	@ (8004594 <prvResetNextTaskUnblockTime+0x38>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d104      	bne.n	8004576 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800456c:	4b0a      	ldr	r3, [pc, #40]	@ (8004598 <prvResetNextTaskUnblockTime+0x3c>)
 800456e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004572:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004574:	e008      	b.n	8004588 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004576:	4b07      	ldr	r3, [pc, #28]	@ (8004594 <prvResetNextTaskUnblockTime+0x38>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4a04      	ldr	r2, [pc, #16]	@ (8004598 <prvResetNextTaskUnblockTime+0x3c>)
 8004586:	6013      	str	r3, [r2, #0]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	20000d60 	.word	0x20000d60
 8004598:	20000dc8 	.word	0x20000dc8

0800459c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045a2:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <xTaskGetSchedulerState+0x34>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d102      	bne.n	80045b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045aa:	2301      	movs	r3, #1
 80045ac:	607b      	str	r3, [r7, #4]
 80045ae:	e008      	b.n	80045c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b0:	4b08      	ldr	r3, [pc, #32]	@ (80045d4 <xTaskGetSchedulerState+0x38>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045b8:	2302      	movs	r3, #2
 80045ba:	607b      	str	r3, [r7, #4]
 80045bc:	e001      	b.n	80045c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045be:	2300      	movs	r3, #0
 80045c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045c2:	687b      	ldr	r3, [r7, #4]
	}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	20000db4 	.word	0x20000db4
 80045d4:	20000dd0 	.word	0x20000dd0

080045d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d051      	beq.n	8004692 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f2:	4b2a      	ldr	r3, [pc, #168]	@ (800469c <xTaskPriorityInherit+0xc4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d241      	bcs.n	8004680 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	db06      	blt.n	8004612 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004604:	4b25      	ldr	r3, [pc, #148]	@ (800469c <xTaskPriorityInherit+0xc4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	6959      	ldr	r1, [r3, #20]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4a1f      	ldr	r2, [pc, #124]	@ (80046a0 <xTaskPriorityInherit+0xc8>)
 8004624:	4413      	add	r3, r2
 8004626:	4299      	cmp	r1, r3
 8004628:	d122      	bne.n	8004670 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	3304      	adds	r3, #4
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe f906 	bl	8002840 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004634:	4b19      	ldr	r3, [pc, #100]	@ (800469c <xTaskPriorityInherit+0xc4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004642:	4b18      	ldr	r3, [pc, #96]	@ (80046a4 <xTaskPriorityInherit+0xcc>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d903      	bls.n	8004652 <xTaskPriorityInherit+0x7a>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464e:	4a15      	ldr	r2, [pc, #84]	@ (80046a4 <xTaskPriorityInherit+0xcc>)
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4a10      	ldr	r2, [pc, #64]	@ (80046a0 <xTaskPriorityInherit+0xc8>)
 8004660:	441a      	add	r2, r3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	3304      	adds	r3, #4
 8004666:	4619      	mov	r1, r3
 8004668:	4610      	mov	r0, r2
 800466a:	f7fe f88c 	bl	8002786 <vListInsertEnd>
 800466e:	e004      	b.n	800467a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004670:	4b0a      	ldr	r3, [pc, #40]	@ (800469c <xTaskPriorityInherit+0xc4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800467a:	2301      	movs	r3, #1
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	e008      	b.n	8004692 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004684:	4b05      	ldr	r3, [pc, #20]	@ (800469c <xTaskPriorityInherit+0xc4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468a:	429a      	cmp	r2, r3
 800468c:	d201      	bcs.n	8004692 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800468e:	2301      	movs	r3, #1
 8004690:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004692:	68fb      	ldr	r3, [r7, #12]
	}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	200008d4 	.word	0x200008d4
 80046a0:	200008d8 	.word	0x200008d8
 80046a4:	20000db0 	.word	0x20000db0

080046a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d058      	beq.n	8004770 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046be:	4b2f      	ldr	r3, [pc, #188]	@ (800477c <xTaskPriorityDisinherit+0xd4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d00b      	beq.n	80046e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	60fb      	str	r3, [r7, #12]
}
 80046da:	bf00      	nop
 80046dc:	bf00      	nop
 80046de:	e7fd      	b.n	80046dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10b      	bne.n	8004700 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	60bb      	str	r3, [r7, #8]
}
 80046fa:	bf00      	nop
 80046fc:	bf00      	nop
 80046fe:	e7fd      	b.n	80046fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004704:	1e5a      	subs	r2, r3, #1
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004712:	429a      	cmp	r2, r3
 8004714:	d02c      	beq.n	8004770 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800471a:	2b00      	cmp	r3, #0
 800471c:	d128      	bne.n	8004770 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	3304      	adds	r3, #4
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe f88c 	bl	8002840 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004734:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004740:	4b0f      	ldr	r3, [pc, #60]	@ (8004780 <xTaskPriorityDisinherit+0xd8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d903      	bls.n	8004750 <xTaskPriorityDisinherit+0xa8>
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474c:	4a0c      	ldr	r2, [pc, #48]	@ (8004780 <xTaskPriorityDisinherit+0xd8>)
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4a09      	ldr	r2, [pc, #36]	@ (8004784 <xTaskPriorityDisinherit+0xdc>)
 800475e:	441a      	add	r2, r3
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	3304      	adds	r3, #4
 8004764:	4619      	mov	r1, r3
 8004766:	4610      	mov	r0, r2
 8004768:	f7fe f80d 	bl	8002786 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800476c:	2301      	movs	r3, #1
 800476e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004770:	697b      	ldr	r3, [r7, #20]
	}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	200008d4 	.word	0x200008d4
 8004780:	20000db0 	.word	0x20000db0
 8004784:	200008d8 	.word	0x200008d8

08004788 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004796:	2301      	movs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d06c      	beq.n	800487a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10b      	bne.n	80047c0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	60fb      	str	r3, [r7, #12]
}
 80047ba:	bf00      	nop
 80047bc:	bf00      	nop
 80047be:	e7fd      	b.n	80047bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d902      	bls.n	80047d0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	e002      	b.n	80047d6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d04c      	beq.n	800487a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d147      	bne.n	800487a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80047ea:	4b26      	ldr	r3, [pc, #152]	@ (8004884 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d10b      	bne.n	800480c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	60bb      	str	r3, [r7, #8]
}
 8004806:	bf00      	nop
 8004808:	bf00      	nop
 800480a:	e7fd      	b.n	8004808 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004810:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	db04      	blt.n	800482a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	6959      	ldr	r1, [r3, #20]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4a13      	ldr	r2, [pc, #76]	@ (8004888 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800483a:	4413      	add	r3, r2
 800483c:	4299      	cmp	r1, r3
 800483e:	d11c      	bne.n	800487a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	3304      	adds	r3, #4
 8004844:	4618      	mov	r0, r3
 8004846:	f7fd fffb 	bl	8002840 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800484e:	4b0f      	ldr	r3, [pc, #60]	@ (800488c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d903      	bls.n	800485e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485a:	4a0c      	ldr	r2, [pc, #48]	@ (800488c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4a07      	ldr	r2, [pc, #28]	@ (8004888 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800486c:	441a      	add	r2, r3
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	3304      	adds	r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f7fd ff86 	bl	8002786 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800487a:	bf00      	nop
 800487c:	3720      	adds	r7, #32
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	200008d4 	.word	0x200008d4
 8004888:	200008d8 	.word	0x200008d8
 800488c:	20000db0 	.word	0x20000db0

08004890 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004894:	4b07      	ldr	r3, [pc, #28]	@ (80048b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800489c:	4b05      	ldr	r3, [pc, #20]	@ (80048b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048a2:	3201      	adds	r2, #1
 80048a4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80048a6:	4b03      	ldr	r3, [pc, #12]	@ (80048b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80048a8:	681b      	ldr	r3, [r3, #0]
	}
 80048aa:	4618      	mov	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	200008d4 	.word	0x200008d4

080048b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048c2:	4b21      	ldr	r3, [pc, #132]	@ (8004948 <prvAddCurrentTaskToDelayedList+0x90>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048c8:	4b20      	ldr	r3, [pc, #128]	@ (800494c <prvAddCurrentTaskToDelayedList+0x94>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fd ffb6 	bl	8002840 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048da:	d10a      	bne.n	80048f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048e2:	4b1a      	ldr	r3, [pc, #104]	@ (800494c <prvAddCurrentTaskToDelayedList+0x94>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3304      	adds	r3, #4
 80048e8:	4619      	mov	r1, r3
 80048ea:	4819      	ldr	r0, [pc, #100]	@ (8004950 <prvAddCurrentTaskToDelayedList+0x98>)
 80048ec:	f7fd ff4b 	bl	8002786 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048f0:	e026      	b.n	8004940 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4413      	add	r3, r2
 80048f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048fa:	4b14      	ldr	r3, [pc, #80]	@ (800494c <prvAddCurrentTaskToDelayedList+0x94>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	429a      	cmp	r2, r3
 8004908:	d209      	bcs.n	800491e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800490a:	4b12      	ldr	r3, [pc, #72]	@ (8004954 <prvAddCurrentTaskToDelayedList+0x9c>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b0f      	ldr	r3, [pc, #60]	@ (800494c <prvAddCurrentTaskToDelayedList+0x94>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3304      	adds	r3, #4
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f7fd ff59 	bl	80027ce <vListInsert>
}
 800491c:	e010      	b.n	8004940 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800491e:	4b0e      	ldr	r3, [pc, #56]	@ (8004958 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b0a      	ldr	r3, [pc, #40]	@ (800494c <prvAddCurrentTaskToDelayedList+0x94>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3304      	adds	r3, #4
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f7fd ff4f 	bl	80027ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004930:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	429a      	cmp	r2, r3
 8004938:	d202      	bcs.n	8004940 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800493a:	4a08      	ldr	r2, [pc, #32]	@ (800495c <prvAddCurrentTaskToDelayedList+0xa4>)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6013      	str	r3, [r2, #0]
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20000dac 	.word	0x20000dac
 800494c:	200008d4 	.word	0x200008d4
 8004950:	20000d94 	.word	0x20000d94
 8004954:	20000d64 	.word	0x20000d64
 8004958:	20000d60 	.word	0x20000d60
 800495c:	20000dc8 	.word	0x20000dc8

08004960 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	@ 0x28
 8004964:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800496a:	f000 fb13 	bl	8004f94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800496e:	4b1d      	ldr	r3, [pc, #116]	@ (80049e4 <xTimerCreateTimerTask+0x84>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d021      	beq.n	80049ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800497e:	1d3a      	adds	r2, r7, #4
 8004980:	f107 0108 	add.w	r1, r7, #8
 8004984:	f107 030c 	add.w	r3, r7, #12
 8004988:	4618      	mov	r0, r3
 800498a:	f7fd feb5 	bl	80026f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	9202      	str	r2, [sp, #8]
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	2302      	movs	r3, #2
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	2300      	movs	r3, #0
 800499e:	460a      	mov	r2, r1
 80049a0:	4911      	ldr	r1, [pc, #68]	@ (80049e8 <xTimerCreateTimerTask+0x88>)
 80049a2:	4812      	ldr	r0, [pc, #72]	@ (80049ec <xTimerCreateTimerTask+0x8c>)
 80049a4:	f7fe ffa2 	bl	80038ec <xTaskCreateStatic>
 80049a8:	4603      	mov	r3, r0
 80049aa:	4a11      	ldr	r2, [pc, #68]	@ (80049f0 <xTimerCreateTimerTask+0x90>)
 80049ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80049ae:	4b10      	ldr	r3, [pc, #64]	@ (80049f0 <xTimerCreateTimerTask+0x90>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80049b6:	2301      	movs	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10b      	bne.n	80049d8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	613b      	str	r3, [r7, #16]
}
 80049d2:	bf00      	nop
 80049d4:	bf00      	nop
 80049d6:	e7fd      	b.n	80049d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80049d8:	697b      	ldr	r3, [r7, #20]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000e04 	.word	0x20000e04
 80049e8:	08006ab0 	.word	0x08006ab0
 80049ec:	08004b2d 	.word	0x08004b2d
 80049f0:	20000e08 	.word	0x20000e08

080049f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08a      	sub	sp, #40	@ 0x28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10b      	bne.n	8004a24 <xTimerGenericCommand+0x30>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	623b      	str	r3, [r7, #32]
}
 8004a1e:	bf00      	nop
 8004a20:	bf00      	nop
 8004a22:	e7fd      	b.n	8004a20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a24:	4b19      	ldr	r3, [pc, #100]	@ (8004a8c <xTimerGenericCommand+0x98>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d02a      	beq.n	8004a82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	dc18      	bgt.n	8004a70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a3e:	f7ff fdad 	bl	800459c <xTaskGetSchedulerState>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d109      	bne.n	8004a5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a48:	4b10      	ldr	r3, [pc, #64]	@ (8004a8c <xTimerGenericCommand+0x98>)
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	f107 0110 	add.w	r1, r7, #16
 8004a50:	2300      	movs	r3, #0
 8004a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a54:	f7fe f8d2 	bl	8002bfc <xQueueGenericSend>
 8004a58:	6278      	str	r0, [r7, #36]	@ 0x24
 8004a5a:	e012      	b.n	8004a82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a8c <xTimerGenericCommand+0x98>)
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	f107 0110 	add.w	r1, r7, #16
 8004a64:	2300      	movs	r3, #0
 8004a66:	2200      	movs	r2, #0
 8004a68:	f7fe f8c8 	bl	8002bfc <xQueueGenericSend>
 8004a6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004a6e:	e008      	b.n	8004a82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a70:	4b06      	ldr	r3, [pc, #24]	@ (8004a8c <xTimerGenericCommand+0x98>)
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	f107 0110 	add.w	r1, r7, #16
 8004a78:	2300      	movs	r3, #0
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	f7fe f9c0 	bl	8002e00 <xQueueGenericSendFromISR>
 8004a80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3728      	adds	r7, #40	@ 0x28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20000e04 	.word	0x20000e04

08004a90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a9a:	4b23      	ldr	r3, [pc, #140]	@ (8004b28 <prvProcessExpiredTimer+0x98>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fd fec9 	bl	8002840 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d023      	beq.n	8004b04 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	699a      	ldr	r2, [r3, #24]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	18d1      	adds	r1, r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	6978      	ldr	r0, [r7, #20]
 8004aca:	f000 f8d5 	bl	8004c78 <prvInsertTimerInActiveList>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d020      	beq.n	8004b16 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	2100      	movs	r1, #0
 8004ade:	6978      	ldr	r0, [r7, #20]
 8004ae0:	f7ff ff88 	bl	80049f4 <xTimerGenericCommand>
 8004ae4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d114      	bne.n	8004b16 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	60fb      	str	r3, [r7, #12]
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	e7fd      	b.n	8004b00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	6978      	ldr	r0, [r7, #20]
 8004b1c:	4798      	blx	r3
}
 8004b1e:	bf00      	nop
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000dfc 	.word	0x20000dfc

08004b2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b34:	f107 0308 	add.w	r3, r7, #8
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 f859 	bl	8004bf0 <prvGetNextExpireTime>
 8004b3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4619      	mov	r1, r3
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f805 	bl	8004b54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b4a:	f000 f8d7 	bl	8004cfc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b4e:	bf00      	nop
 8004b50:	e7f0      	b.n	8004b34 <prvTimerTask+0x8>
	...

08004b54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b5e:	f7ff f929 	bl	8003db4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b62:	f107 0308 	add.w	r3, r7, #8
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 f866 	bl	8004c38 <prvSampleTimeNow>
 8004b6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d130      	bne.n	8004bd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10a      	bne.n	8004b90 <prvProcessTimerOrBlockTask+0x3c>
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d806      	bhi.n	8004b90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b82:	f7ff f925 	bl	8003dd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b86:	68f9      	ldr	r1, [r7, #12]
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff ff81 	bl	8004a90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b8e:	e024      	b.n	8004bda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b96:	4b13      	ldr	r3, [pc, #76]	@ (8004be4 <prvProcessTimerOrBlockTask+0x90>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <prvProcessTimerOrBlockTask+0x50>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <prvProcessTimerOrBlockTask+0x52>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8004be8 <prvProcessTimerOrBlockTask+0x94>)
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f7fe fe65 	bl	8003884 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004bba:	f7ff f909 	bl	8003dd0 <xTaskResumeAll>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004bc4:	4b09      	ldr	r3, [pc, #36]	@ (8004bec <prvProcessTimerOrBlockTask+0x98>)
 8004bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	f3bf 8f6f 	isb	sy
}
 8004bd4:	e001      	b.n	8004bda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004bd6:	f7ff f8fb 	bl	8003dd0 <xTaskResumeAll>
}
 8004bda:	bf00      	nop
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000e00 	.word	0x20000e00
 8004be8:	20000e04 	.word	0x20000e04
 8004bec:	e000ed04 	.word	0xe000ed04

08004bf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8004c34 <prvGetNextExpireTime+0x44>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <prvGetNextExpireTime+0x16>
 8004c02:	2201      	movs	r2, #1
 8004c04:	e000      	b.n	8004c08 <prvGetNextExpireTime+0x18>
 8004c06:	2200      	movs	r2, #0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d105      	bne.n	8004c20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c14:	4b07      	ldr	r3, [pc, #28]	@ (8004c34 <prvGetNextExpireTime+0x44>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	e001      	b.n	8004c24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c24:	68fb      	ldr	r3, [r7, #12]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000dfc 	.word	0x20000dfc

08004c38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c40:	f7ff f964 	bl	8003f0c <xTaskGetTickCount>
 8004c44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c46:	4b0b      	ldr	r3, [pc, #44]	@ (8004c74 <prvSampleTimeNow+0x3c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d205      	bcs.n	8004c5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c50:	f000 f93a 	bl	8004ec8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	e002      	b.n	8004c62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c62:	4a04      	ldr	r2, [pc, #16]	@ (8004c74 <prvSampleTimeNow+0x3c>)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c68:	68fb      	ldr	r3, [r7, #12]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000e0c 	.word	0x20000e0c

08004c78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d812      	bhi.n	8004cc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	1ad2      	subs	r2, r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d302      	bcc.n	8004cb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004cac:	2301      	movs	r3, #1
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	e01b      	b.n	8004cea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004cb2:	4b10      	ldr	r3, [pc, #64]	@ (8004cf4 <prvInsertTimerInActiveList+0x7c>)
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	f7fd fd86 	bl	80027ce <vListInsert>
 8004cc2:	e012      	b.n	8004cea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d206      	bcs.n	8004cda <prvInsertTimerInActiveList+0x62>
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d302      	bcc.n	8004cda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	e007      	b.n	8004cea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cda:	4b07      	ldr	r3, [pc, #28]	@ (8004cf8 <prvInsertTimerInActiveList+0x80>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	f7fd fd72 	bl	80027ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004cea:	697b      	ldr	r3, [r7, #20]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20000e00 	.word	0x20000e00
 8004cf8:	20000dfc 	.word	0x20000dfc

08004cfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08e      	sub	sp, #56	@ 0x38
 8004d00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d02:	e0ce      	b.n	8004ea2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	da19      	bge.n	8004d3e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d0a:	1d3b      	adds	r3, r7, #4
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10b      	bne.n	8004d2e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	61fb      	str	r3, [r7, #28]
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	e7fd      	b.n	8004d2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d34:	6850      	ldr	r0, [r2, #4]
 8004d36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d38:	6892      	ldr	r2, [r2, #8]
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f2c0 80ae 	blt.w	8004ea2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d004      	beq.n	8004d5c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d54:	3304      	adds	r3, #4
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fd fd72 	bl	8002840 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d5c:	463b      	mov	r3, r7
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff ff6a 	bl	8004c38 <prvSampleTimeNow>
 8004d64:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b09      	cmp	r3, #9
 8004d6a:	f200 8097 	bhi.w	8004e9c <prvProcessReceivedCommands+0x1a0>
 8004d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <prvProcessReceivedCommands+0x78>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d9d 	.word	0x08004d9d
 8004d78:	08004d9d 	.word	0x08004d9d
 8004d7c:	08004d9d 	.word	0x08004d9d
 8004d80:	08004e13 	.word	0x08004e13
 8004d84:	08004e27 	.word	0x08004e27
 8004d88:	08004e73 	.word	0x08004e73
 8004d8c:	08004d9d 	.word	0x08004d9d
 8004d90:	08004d9d 	.word	0x08004d9d
 8004d94:	08004e13 	.word	0x08004e13
 8004d98:	08004e27 	.word	0x08004e27
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004da2:	f043 0301 	orr.w	r3, r3, #1
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004daa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	18d1      	adds	r1, r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dbc:	f7ff ff5c 	bl	8004c78 <prvInsertTimerInActiveList>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d06c      	beq.n	8004ea0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d061      	beq.n	8004ea0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	441a      	add	r2, r3
 8004de4:	2300      	movs	r3, #0
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	2300      	movs	r3, #0
 8004dea:	2100      	movs	r1, #0
 8004dec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dee:	f7ff fe01 	bl	80049f4 <xTimerGenericCommand>
 8004df2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d152      	bne.n	8004ea0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	61bb      	str	r3, [r7, #24]
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	e7fd      	b.n	8004e0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e18:	f023 0301 	bic.w	r3, r3, #1
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004e24:	e03d      	b.n	8004ea2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10b      	bne.n	8004e5e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	617b      	str	r3, [r7, #20]
}
 8004e58:	bf00      	nop
 8004e5a:	bf00      	nop
 8004e5c:	e7fd      	b.n	8004e5a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	18d1      	adds	r1, r2, r3
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e6c:	f7ff ff04 	bl	8004c78 <prvInsertTimerInActiveList>
					break;
 8004e70:	e017      	b.n	8004ea2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d103      	bne.n	8004e88 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004e80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e82:	f000 fbe9 	bl	8005658 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e86:	e00c      	b.n	8004ea2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e8e:	f023 0301 	bic.w	r3, r3, #1
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004e9a:	e002      	b.n	8004ea2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004e9c:	bf00      	nop
 8004e9e:	e000      	b.n	8004ea2 <prvProcessReceivedCommands+0x1a6>
					break;
 8004ea0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ea2:	4b08      	ldr	r3, [pc, #32]	@ (8004ec4 <prvProcessReceivedCommands+0x1c8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	1d39      	adds	r1, r7, #4
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fe f8d6 	bl	800305c <xQueueReceive>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f47f af26 	bne.w	8004d04 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004eb8:	bf00      	nop
 8004eba:	bf00      	nop
 8004ebc:	3730      	adds	r7, #48	@ 0x30
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000e04 	.word	0x20000e04

08004ec8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ece:	e049      	b.n	8004f64 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8004f8c <prvSwitchTimerLists+0xc4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eda:	4b2c      	ldr	r3, [pc, #176]	@ (8004f8c <prvSwitchTimerLists+0xc4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fd fca9 	bl	8002840 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d02f      	beq.n	8004f64 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d90e      	bls.n	8004f34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f22:	4b1a      	ldr	r3, [pc, #104]	@ (8004f8c <prvSwitchTimerLists+0xc4>)
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	f7fd fc4e 	bl	80027ce <vListInsert>
 8004f32:	e017      	b.n	8004f64 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f34:	2300      	movs	r3, #0
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f7ff fd58 	bl	80049f4 <xTimerGenericCommand>
 8004f44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10b      	bne.n	8004f64 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	603b      	str	r3, [r7, #0]
}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	e7fd      	b.n	8004f60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f64:	4b09      	ldr	r3, [pc, #36]	@ (8004f8c <prvSwitchTimerLists+0xc4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1b0      	bne.n	8004ed0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f6e:	4b07      	ldr	r3, [pc, #28]	@ (8004f8c <prvSwitchTimerLists+0xc4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f74:	4b06      	ldr	r3, [pc, #24]	@ (8004f90 <prvSwitchTimerLists+0xc8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a04      	ldr	r2, [pc, #16]	@ (8004f8c <prvSwitchTimerLists+0xc4>)
 8004f7a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f7c:	4a04      	ldr	r2, [pc, #16]	@ (8004f90 <prvSwitchTimerLists+0xc8>)
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	6013      	str	r3, [r2, #0]
}
 8004f82:	bf00      	nop
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000dfc 	.word	0x20000dfc
 8004f90:	20000e00 	.word	0x20000e00

08004f94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f9a:	f000 f96d 	bl	8005278 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f9e:	4b15      	ldr	r3, [pc, #84]	@ (8004ff4 <prvCheckForValidListAndQueue+0x60>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d120      	bne.n	8004fe8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004fa6:	4814      	ldr	r0, [pc, #80]	@ (8004ff8 <prvCheckForValidListAndQueue+0x64>)
 8004fa8:	f7fd fbc0 	bl	800272c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004fac:	4813      	ldr	r0, [pc, #76]	@ (8004ffc <prvCheckForValidListAndQueue+0x68>)
 8004fae:	f7fd fbbd 	bl	800272c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004fb2:	4b13      	ldr	r3, [pc, #76]	@ (8005000 <prvCheckForValidListAndQueue+0x6c>)
 8004fb4:	4a10      	ldr	r2, [pc, #64]	@ (8004ff8 <prvCheckForValidListAndQueue+0x64>)
 8004fb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fb8:	4b12      	ldr	r3, [pc, #72]	@ (8005004 <prvCheckForValidListAndQueue+0x70>)
 8004fba:	4a10      	ldr	r2, [pc, #64]	@ (8004ffc <prvCheckForValidListAndQueue+0x68>)
 8004fbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	4b11      	ldr	r3, [pc, #68]	@ (8005008 <prvCheckForValidListAndQueue+0x74>)
 8004fc4:	4a11      	ldr	r2, [pc, #68]	@ (800500c <prvCheckForValidListAndQueue+0x78>)
 8004fc6:	2110      	movs	r1, #16
 8004fc8:	200a      	movs	r0, #10
 8004fca:	f7fd fccd 	bl	8002968 <xQueueGenericCreateStatic>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	4a08      	ldr	r2, [pc, #32]	@ (8004ff4 <prvCheckForValidListAndQueue+0x60>)
 8004fd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004fd4:	4b07      	ldr	r3, [pc, #28]	@ (8004ff4 <prvCheckForValidListAndQueue+0x60>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fdc:	4b05      	ldr	r3, [pc, #20]	@ (8004ff4 <prvCheckForValidListAndQueue+0x60>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	490b      	ldr	r1, [pc, #44]	@ (8005010 <prvCheckForValidListAndQueue+0x7c>)
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe fbfa 	bl	80037dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fe8:	f000 f978 	bl	80052dc <vPortExitCritical>
}
 8004fec:	bf00      	nop
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000e04 	.word	0x20000e04
 8004ff8:	20000dd4 	.word	0x20000dd4
 8004ffc:	20000de8 	.word	0x20000de8
 8005000:	20000dfc 	.word	0x20000dfc
 8005004:	20000e00 	.word	0x20000e00
 8005008:	20000eb0 	.word	0x20000eb0
 800500c:	20000e10 	.word	0x20000e10
 8005010:	08006ab8 	.word	0x08006ab8

08005014 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3b04      	subs	r3, #4
 8005024:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800502c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3b04      	subs	r3, #4
 8005032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f023 0201 	bic.w	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3b04      	subs	r3, #4
 8005042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005044:	4a0c      	ldr	r2, [pc, #48]	@ (8005078 <pxPortInitialiseStack+0x64>)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3b14      	subs	r3, #20
 800504e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3b04      	subs	r3, #4
 800505a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f06f 0202 	mvn.w	r2, #2
 8005062:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3b20      	subs	r3, #32
 8005068:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800506a:	68fb      	ldr	r3, [r7, #12]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	0800507d 	.word	0x0800507d

0800507c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005086:	4b13      	ldr	r3, [pc, #76]	@ (80050d4 <prvTaskExitError+0x58>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800508e:	d00b      	beq.n	80050a8 <prvTaskExitError+0x2c>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	60fb      	str	r3, [r7, #12]
}
 80050a2:	bf00      	nop
 80050a4:	bf00      	nop
 80050a6:	e7fd      	b.n	80050a4 <prvTaskExitError+0x28>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	60bb      	str	r3, [r7, #8]
}
 80050ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050bc:	bf00      	nop
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0fc      	beq.n	80050be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	2000000c 	.word	0x2000000c
	...

080050e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050e0:	4b07      	ldr	r3, [pc, #28]	@ (8005100 <pxCurrentTCBConst2>)
 80050e2:	6819      	ldr	r1, [r3, #0]
 80050e4:	6808      	ldr	r0, [r1, #0]
 80050e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ea:	f380 8809 	msr	PSP, r0
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f380 8811 	msr	BASEPRI, r0
 80050fa:	4770      	bx	lr
 80050fc:	f3af 8000 	nop.w

08005100 <pxCurrentTCBConst2>:
 8005100:	200008d4 	.word	0x200008d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop

08005108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005108:	4808      	ldr	r0, [pc, #32]	@ (800512c <prvPortStartFirstTask+0x24>)
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	6800      	ldr	r0, [r0, #0]
 800510e:	f380 8808 	msr	MSP, r0
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f380 8814 	msr	CONTROL, r0
 800511a:	b662      	cpsie	i
 800511c:	b661      	cpsie	f
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	df00      	svc	0
 8005128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800512a:	bf00      	nop
 800512c:	e000ed08 	.word	0xe000ed08

08005130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005136:	4b47      	ldr	r3, [pc, #284]	@ (8005254 <xPortStartScheduler+0x124>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a47      	ldr	r2, [pc, #284]	@ (8005258 <xPortStartScheduler+0x128>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10b      	bne.n	8005158 <xPortStartScheduler+0x28>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	60fb      	str	r3, [r7, #12]
}
 8005152:	bf00      	nop
 8005154:	bf00      	nop
 8005156:	e7fd      	b.n	8005154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005158:	4b3e      	ldr	r3, [pc, #248]	@ (8005254 <xPortStartScheduler+0x124>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a3f      	ldr	r2, [pc, #252]	@ (800525c <xPortStartScheduler+0x12c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d10b      	bne.n	800517a <xPortStartScheduler+0x4a>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	613b      	str	r3, [r7, #16]
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	e7fd      	b.n	8005176 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800517a:	4b39      	ldr	r3, [pc, #228]	@ (8005260 <xPortStartScheduler+0x130>)
 800517c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	22ff      	movs	r2, #255	@ 0xff
 800518a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800519c:	b2da      	uxtb	r2, r3
 800519e:	4b31      	ldr	r3, [pc, #196]	@ (8005264 <xPortStartScheduler+0x134>)
 80051a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051a2:	4b31      	ldr	r3, [pc, #196]	@ (8005268 <xPortStartScheduler+0x138>)
 80051a4:	2207      	movs	r2, #7
 80051a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051a8:	e009      	b.n	80051be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80051aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005268 <xPortStartScheduler+0x138>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005268 <xPortStartScheduler+0x138>)
 80051b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051b4:	78fb      	ldrb	r3, [r7, #3]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c6:	2b80      	cmp	r3, #128	@ 0x80
 80051c8:	d0ef      	beq.n	80051aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051ca:	4b27      	ldr	r3, [pc, #156]	@ (8005268 <xPortStartScheduler+0x138>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f1c3 0307 	rsb	r3, r3, #7
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d00b      	beq.n	80051ee <xPortStartScheduler+0xbe>
	__asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	60bb      	str	r3, [r7, #8]
}
 80051e8:	bf00      	nop
 80051ea:	bf00      	nop
 80051ec:	e7fd      	b.n	80051ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005268 <xPortStartScheduler+0x138>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005268 <xPortStartScheduler+0x138>)
 80051f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005268 <xPortStartScheduler+0x138>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005200:	4a19      	ldr	r2, [pc, #100]	@ (8005268 <xPortStartScheduler+0x138>)
 8005202:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	b2da      	uxtb	r2, r3
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800520c:	4b17      	ldr	r3, [pc, #92]	@ (800526c <xPortStartScheduler+0x13c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a16      	ldr	r2, [pc, #88]	@ (800526c <xPortStartScheduler+0x13c>)
 8005212:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005216:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005218:	4b14      	ldr	r3, [pc, #80]	@ (800526c <xPortStartScheduler+0x13c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a13      	ldr	r2, [pc, #76]	@ (800526c <xPortStartScheduler+0x13c>)
 800521e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005222:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005224:	f000 f8da 	bl	80053dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005228:	4b11      	ldr	r3, [pc, #68]	@ (8005270 <xPortStartScheduler+0x140>)
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800522e:	f000 f8f9 	bl	8005424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005232:	4b10      	ldr	r3, [pc, #64]	@ (8005274 <xPortStartScheduler+0x144>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a0f      	ldr	r2, [pc, #60]	@ (8005274 <xPortStartScheduler+0x144>)
 8005238:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800523c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800523e:	f7ff ff63 	bl	8005108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005242:	f7fe ff2d 	bl	80040a0 <vTaskSwitchContext>
	prvTaskExitError();
 8005246:	f7ff ff19 	bl	800507c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	e000ed00 	.word	0xe000ed00
 8005258:	410fc271 	.word	0x410fc271
 800525c:	410fc270 	.word	0x410fc270
 8005260:	e000e400 	.word	0xe000e400
 8005264:	20000f00 	.word	0x20000f00
 8005268:	20000f04 	.word	0x20000f04
 800526c:	e000ed20 	.word	0xe000ed20
 8005270:	2000000c 	.word	0x2000000c
 8005274:	e000ef34 	.word	0xe000ef34

08005278 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	607b      	str	r3, [r7, #4]
}
 8005290:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005292:	4b10      	ldr	r3, [pc, #64]	@ (80052d4 <vPortEnterCritical+0x5c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3301      	adds	r3, #1
 8005298:	4a0e      	ldr	r2, [pc, #56]	@ (80052d4 <vPortEnterCritical+0x5c>)
 800529a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800529c:	4b0d      	ldr	r3, [pc, #52]	@ (80052d4 <vPortEnterCritical+0x5c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d110      	bne.n	80052c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052a4:	4b0c      	ldr	r3, [pc, #48]	@ (80052d8 <vPortEnterCritical+0x60>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	603b      	str	r3, [r7, #0]
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	e7fd      	b.n	80052c2 <vPortEnterCritical+0x4a>
	}
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	2000000c 	.word	0x2000000c
 80052d8:	e000ed04 	.word	0xe000ed04

080052dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052e2:	4b12      	ldr	r3, [pc, #72]	@ (800532c <vPortExitCritical+0x50>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10b      	bne.n	8005302 <vPortExitCritical+0x26>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	607b      	str	r3, [r7, #4]
}
 80052fc:	bf00      	nop
 80052fe:	bf00      	nop
 8005300:	e7fd      	b.n	80052fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005302:	4b0a      	ldr	r3, [pc, #40]	@ (800532c <vPortExitCritical+0x50>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3b01      	subs	r3, #1
 8005308:	4a08      	ldr	r2, [pc, #32]	@ (800532c <vPortExitCritical+0x50>)
 800530a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800530c:	4b07      	ldr	r3, [pc, #28]	@ (800532c <vPortExitCritical+0x50>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <vPortExitCritical+0x44>
 8005314:	2300      	movs	r3, #0
 8005316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	f383 8811 	msr	BASEPRI, r3
}
 800531e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	2000000c 	.word	0x2000000c

08005330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005330:	f3ef 8009 	mrs	r0, PSP
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	4b15      	ldr	r3, [pc, #84]	@ (8005390 <pxCurrentTCBConst>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	f01e 0f10 	tst.w	lr, #16
 8005340:	bf08      	it	eq
 8005342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534a:	6010      	str	r0, [r2, #0]
 800534c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005350:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005354:	f380 8811 	msr	BASEPRI, r0
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f7fe fe9e 	bl	80040a0 <vTaskSwitchContext>
 8005364:	f04f 0000 	mov.w	r0, #0
 8005368:	f380 8811 	msr	BASEPRI, r0
 800536c:	bc09      	pop	{r0, r3}
 800536e:	6819      	ldr	r1, [r3, #0]
 8005370:	6808      	ldr	r0, [r1, #0]
 8005372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005376:	f01e 0f10 	tst.w	lr, #16
 800537a:	bf08      	it	eq
 800537c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005380:	f380 8809 	msr	PSP, r0
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	f3af 8000 	nop.w

08005390 <pxCurrentTCBConst>:
 8005390:	200008d4 	.word	0x200008d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop

08005398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	607b      	str	r3, [r7, #4]
}
 80053b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053b2:	f7fe fdbb 	bl	8003f2c <xTaskIncrementTick>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053bc:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <xPortSysTickHandler+0x40>)
 80053be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	2300      	movs	r3, #0
 80053c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	f383 8811 	msr	BASEPRI, r3
}
 80053ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	e000ed04 	.word	0xe000ed04

080053dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005410 <vPortSetupTimerInterrupt+0x34>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005414 <vPortSetupTimerInterrupt+0x38>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005418 <vPortSetupTimerInterrupt+0x3c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a0a      	ldr	r2, [pc, #40]	@ (800541c <vPortSetupTimerInterrupt+0x40>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	099b      	lsrs	r3, r3, #6
 80053f8:	4a09      	ldr	r2, [pc, #36]	@ (8005420 <vPortSetupTimerInterrupt+0x44>)
 80053fa:	3b01      	subs	r3, #1
 80053fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053fe:	4b04      	ldr	r3, [pc, #16]	@ (8005410 <vPortSetupTimerInterrupt+0x34>)
 8005400:	2207      	movs	r2, #7
 8005402:	601a      	str	r2, [r3, #0]
}
 8005404:	bf00      	nop
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	e000e010 	.word	0xe000e010
 8005414:	e000e018 	.word	0xe000e018
 8005418:	20000000 	.word	0x20000000
 800541c:	10624dd3 	.word	0x10624dd3
 8005420:	e000e014 	.word	0xe000e014

08005424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005424:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005434 <vPortEnableVFP+0x10>
 8005428:	6801      	ldr	r1, [r0, #0]
 800542a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800542e:	6001      	str	r1, [r0, #0]
 8005430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005432:	bf00      	nop
 8005434:	e000ed88 	.word	0xe000ed88

08005438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800543e:	f3ef 8305 	mrs	r3, IPSR
 8005442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b0f      	cmp	r3, #15
 8005448:	d915      	bls.n	8005476 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800544a:	4a18      	ldr	r2, [pc, #96]	@ (80054ac <vPortValidateInterruptPriority+0x74>)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005454:	4b16      	ldr	r3, [pc, #88]	@ (80054b0 <vPortValidateInterruptPriority+0x78>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	7afa      	ldrb	r2, [r7, #11]
 800545a:	429a      	cmp	r2, r3
 800545c:	d20b      	bcs.n	8005476 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	607b      	str	r3, [r7, #4]
}
 8005470:	bf00      	nop
 8005472:	bf00      	nop
 8005474:	e7fd      	b.n	8005472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005476:	4b0f      	ldr	r3, [pc, #60]	@ (80054b4 <vPortValidateInterruptPriority+0x7c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800547e:	4b0e      	ldr	r3, [pc, #56]	@ (80054b8 <vPortValidateInterruptPriority+0x80>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d90b      	bls.n	800549e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	603b      	str	r3, [r7, #0]
}
 8005498:	bf00      	nop
 800549a:	bf00      	nop
 800549c:	e7fd      	b.n	800549a <vPortValidateInterruptPriority+0x62>
	}
 800549e:	bf00      	nop
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	e000e3f0 	.word	0xe000e3f0
 80054b0:	20000f00 	.word	0x20000f00
 80054b4:	e000ed0c 	.word	0xe000ed0c
 80054b8:	20000f04 	.word	0x20000f04

080054bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08a      	sub	sp, #40	@ 0x28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054c4:	2300      	movs	r3, #0
 80054c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054c8:	f7fe fc74 	bl	8003db4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054cc:	4b5c      	ldr	r3, [pc, #368]	@ (8005640 <pvPortMalloc+0x184>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054d4:	f000 f924 	bl	8005720 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005644 <pvPortMalloc+0x188>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4013      	ands	r3, r2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f040 8095 	bne.w	8005610 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01e      	beq.n	800552a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80054ec:	2208      	movs	r2, #8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4413      	add	r3, r2
 80054f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d015      	beq.n	800552a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f023 0307 	bic.w	r3, r3, #7
 8005504:	3308      	adds	r3, #8
 8005506:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <pvPortMalloc+0x6e>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	617b      	str	r3, [r7, #20]
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	e7fd      	b.n	8005526 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d06f      	beq.n	8005610 <pvPortMalloc+0x154>
 8005530:	4b45      	ldr	r3, [pc, #276]	@ (8005648 <pvPortMalloc+0x18c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	429a      	cmp	r2, r3
 8005538:	d86a      	bhi.n	8005610 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800553a:	4b44      	ldr	r3, [pc, #272]	@ (800564c <pvPortMalloc+0x190>)
 800553c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800553e:	4b43      	ldr	r3, [pc, #268]	@ (800564c <pvPortMalloc+0x190>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005544:	e004      	b.n	8005550 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	429a      	cmp	r2, r3
 8005558:	d903      	bls.n	8005562 <pvPortMalloc+0xa6>
 800555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f1      	bne.n	8005546 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005562:	4b37      	ldr	r3, [pc, #220]	@ (8005640 <pvPortMalloc+0x184>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005568:	429a      	cmp	r2, r3
 800556a:	d051      	beq.n	8005610 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2208      	movs	r2, #8
 8005572:	4413      	add	r3, r2
 8005574:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	1ad2      	subs	r2, r2, r3
 8005586:	2308      	movs	r3, #8
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	429a      	cmp	r2, r3
 800558c:	d920      	bls.n	80055d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800558e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4413      	add	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00b      	beq.n	80055b8 <pvPortMalloc+0xfc>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	613b      	str	r3, [r7, #16]
}
 80055b2:	bf00      	nop
 80055b4:	bf00      	nop
 80055b6:	e7fd      	b.n	80055b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	1ad2      	subs	r2, r2, r3
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055ca:	69b8      	ldr	r0, [r7, #24]
 80055cc:	f000 f90a 	bl	80057e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005648 <pvPortMalloc+0x18c>)
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	4a1b      	ldr	r2, [pc, #108]	@ (8005648 <pvPortMalloc+0x18c>)
 80055dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055de:	4b1a      	ldr	r3, [pc, #104]	@ (8005648 <pvPortMalloc+0x18c>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005650 <pvPortMalloc+0x194>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d203      	bcs.n	80055f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055ea:	4b17      	ldr	r3, [pc, #92]	@ (8005648 <pvPortMalloc+0x18c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a18      	ldr	r2, [pc, #96]	@ (8005650 <pvPortMalloc+0x194>)
 80055f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	4b13      	ldr	r3, [pc, #76]	@ (8005644 <pvPortMalloc+0x188>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005606:	4b13      	ldr	r3, [pc, #76]	@ (8005654 <pvPortMalloc+0x198>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3301      	adds	r3, #1
 800560c:	4a11      	ldr	r2, [pc, #68]	@ (8005654 <pvPortMalloc+0x198>)
 800560e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005610:	f7fe fbde 	bl	8003dd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <pvPortMalloc+0x17a>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	60fb      	str	r3, [r7, #12]
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <pvPortMalloc+0x176>
	return pvReturn;
 8005636:	69fb      	ldr	r3, [r7, #28]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3728      	adds	r7, #40	@ 0x28
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20004b10 	.word	0x20004b10
 8005644:	20004b24 	.word	0x20004b24
 8005648:	20004b14 	.word	0x20004b14
 800564c:	20004b08 	.word	0x20004b08
 8005650:	20004b18 	.word	0x20004b18
 8005654:	20004b1c 	.word	0x20004b1c

08005658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d04f      	beq.n	800570a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800566a:	2308      	movs	r3, #8
 800566c:	425b      	negs	r3, r3
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4413      	add	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	4b25      	ldr	r3, [pc, #148]	@ (8005714 <vPortFree+0xbc>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4013      	ands	r3, r2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10b      	bne.n	800569e <vPortFree+0x46>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	60fb      	str	r3, [r7, #12]
}
 8005698:	bf00      	nop
 800569a:	bf00      	nop
 800569c:	e7fd      	b.n	800569a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00b      	beq.n	80056be <vPortFree+0x66>
	__asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	60bb      	str	r3, [r7, #8]
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
 80056bc:	e7fd      	b.n	80056ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	4b14      	ldr	r3, [pc, #80]	@ (8005714 <vPortFree+0xbc>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4013      	ands	r3, r2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01e      	beq.n	800570a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d11a      	bne.n	800570a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005714 <vPortFree+0xbc>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	43db      	mvns	r3, r3
 80056de:	401a      	ands	r2, r3
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056e4:	f7fe fb66 	bl	8003db4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005718 <vPortFree+0xc0>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4413      	add	r3, r2
 80056f2:	4a09      	ldr	r2, [pc, #36]	@ (8005718 <vPortFree+0xc0>)
 80056f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056f6:	6938      	ldr	r0, [r7, #16]
 80056f8:	f000 f874 	bl	80057e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80056fc:	4b07      	ldr	r3, [pc, #28]	@ (800571c <vPortFree+0xc4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3301      	adds	r3, #1
 8005702:	4a06      	ldr	r2, [pc, #24]	@ (800571c <vPortFree+0xc4>)
 8005704:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005706:	f7fe fb63 	bl	8003dd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800570a:	bf00      	nop
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20004b24 	.word	0x20004b24
 8005718:	20004b14 	.word	0x20004b14
 800571c:	20004b20 	.word	0x20004b20

08005720 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005726:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800572a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800572c:	4b27      	ldr	r3, [pc, #156]	@ (80057cc <prvHeapInit+0xac>)
 800572e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00c      	beq.n	8005754 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3307      	adds	r3, #7
 800573e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0307 	bic.w	r3, r3, #7
 8005746:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	4a1f      	ldr	r2, [pc, #124]	@ (80057cc <prvHeapInit+0xac>)
 8005750:	4413      	add	r3, r2
 8005752:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005758:	4a1d      	ldr	r2, [pc, #116]	@ (80057d0 <prvHeapInit+0xb0>)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800575e:	4b1c      	ldr	r3, [pc, #112]	@ (80057d0 <prvHeapInit+0xb0>)
 8005760:	2200      	movs	r2, #0
 8005762:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	4413      	add	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800576c:	2208      	movs	r2, #8
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0307 	bic.w	r3, r3, #7
 800577a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4a15      	ldr	r2, [pc, #84]	@ (80057d4 <prvHeapInit+0xb4>)
 8005780:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005782:	4b14      	ldr	r3, [pc, #80]	@ (80057d4 <prvHeapInit+0xb4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2200      	movs	r2, #0
 8005788:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800578a:	4b12      	ldr	r3, [pc, #72]	@ (80057d4 <prvHeapInit+0xb4>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	1ad2      	subs	r2, r2, r3
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057a0:	4b0c      	ldr	r3, [pc, #48]	@ (80057d4 <prvHeapInit+0xb4>)
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	4a0a      	ldr	r2, [pc, #40]	@ (80057d8 <prvHeapInit+0xb8>)
 80057ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	4a09      	ldr	r2, [pc, #36]	@ (80057dc <prvHeapInit+0xbc>)
 80057b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057b8:	4b09      	ldr	r3, [pc, #36]	@ (80057e0 <prvHeapInit+0xc0>)
 80057ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80057be:	601a      	str	r2, [r3, #0]
}
 80057c0:	bf00      	nop
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20000f08 	.word	0x20000f08
 80057d0:	20004b08 	.word	0x20004b08
 80057d4:	20004b10 	.word	0x20004b10
 80057d8:	20004b18 	.word	0x20004b18
 80057dc:	20004b14 	.word	0x20004b14
 80057e0:	20004b24 	.word	0x20004b24

080057e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057ec:	4b28      	ldr	r3, [pc, #160]	@ (8005890 <prvInsertBlockIntoFreeList+0xac>)
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	e002      	b.n	80057f8 <prvInsertBlockIntoFreeList+0x14>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d8f7      	bhi.n	80057f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	4413      	add	r3, r2
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	d108      	bne.n	8005826 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	441a      	add	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	441a      	add	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d118      	bne.n	800586c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4b15      	ldr	r3, [pc, #84]	@ (8005894 <prvInsertBlockIntoFreeList+0xb0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d00d      	beq.n	8005862 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	441a      	add	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	e008      	b.n	8005874 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005862:	4b0c      	ldr	r3, [pc, #48]	@ (8005894 <prvInsertBlockIntoFreeList+0xb0>)
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	e003      	b.n	8005874 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	429a      	cmp	r2, r3
 800587a:	d002      	beq.n	8005882 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	20004b08 	.word	0x20004b08
 8005894:	20004b10 	.word	0x20004b10

08005898 <std>:
 8005898:	2300      	movs	r3, #0
 800589a:	b510      	push	{r4, lr}
 800589c:	4604      	mov	r4, r0
 800589e:	e9c0 3300 	strd	r3, r3, [r0]
 80058a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058a6:	6083      	str	r3, [r0, #8]
 80058a8:	8181      	strh	r1, [r0, #12]
 80058aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80058ac:	81c2      	strh	r2, [r0, #14]
 80058ae:	6183      	str	r3, [r0, #24]
 80058b0:	4619      	mov	r1, r3
 80058b2:	2208      	movs	r2, #8
 80058b4:	305c      	adds	r0, #92	@ 0x5c
 80058b6:	f000 fa1d 	bl	8005cf4 <memset>
 80058ba:	4b0d      	ldr	r3, [pc, #52]	@ (80058f0 <std+0x58>)
 80058bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80058be:	4b0d      	ldr	r3, [pc, #52]	@ (80058f4 <std+0x5c>)
 80058c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058c2:	4b0d      	ldr	r3, [pc, #52]	@ (80058f8 <std+0x60>)
 80058c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058c6:	4b0d      	ldr	r3, [pc, #52]	@ (80058fc <std+0x64>)
 80058c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80058ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005900 <std+0x68>)
 80058cc:	6224      	str	r4, [r4, #32]
 80058ce:	429c      	cmp	r4, r3
 80058d0:	d006      	beq.n	80058e0 <std+0x48>
 80058d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058d6:	4294      	cmp	r4, r2
 80058d8:	d002      	beq.n	80058e0 <std+0x48>
 80058da:	33d0      	adds	r3, #208	@ 0xd0
 80058dc:	429c      	cmp	r4, r3
 80058de:	d105      	bne.n	80058ec <std+0x54>
 80058e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e8:	f000 bada 	b.w	8005ea0 <__retarget_lock_init_recursive>
 80058ec:	bd10      	pop	{r4, pc}
 80058ee:	bf00      	nop
 80058f0:	08005b45 	.word	0x08005b45
 80058f4:	08005b67 	.word	0x08005b67
 80058f8:	08005b9f 	.word	0x08005b9f
 80058fc:	08005bc3 	.word	0x08005bc3
 8005900:	20004b28 	.word	0x20004b28

08005904 <stdio_exit_handler>:
 8005904:	4a02      	ldr	r2, [pc, #8]	@ (8005910 <stdio_exit_handler+0xc>)
 8005906:	4903      	ldr	r1, [pc, #12]	@ (8005914 <stdio_exit_handler+0x10>)
 8005908:	4803      	ldr	r0, [pc, #12]	@ (8005918 <stdio_exit_handler+0x14>)
 800590a:	f000 b869 	b.w	80059e0 <_fwalk_sglue>
 800590e:	bf00      	nop
 8005910:	20000010 	.word	0x20000010
 8005914:	08006785 	.word	0x08006785
 8005918:	20000020 	.word	0x20000020

0800591c <cleanup_stdio>:
 800591c:	6841      	ldr	r1, [r0, #4]
 800591e:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <cleanup_stdio+0x34>)
 8005920:	4299      	cmp	r1, r3
 8005922:	b510      	push	{r4, lr}
 8005924:	4604      	mov	r4, r0
 8005926:	d001      	beq.n	800592c <cleanup_stdio+0x10>
 8005928:	f000 ff2c 	bl	8006784 <_fflush_r>
 800592c:	68a1      	ldr	r1, [r4, #8]
 800592e:	4b09      	ldr	r3, [pc, #36]	@ (8005954 <cleanup_stdio+0x38>)
 8005930:	4299      	cmp	r1, r3
 8005932:	d002      	beq.n	800593a <cleanup_stdio+0x1e>
 8005934:	4620      	mov	r0, r4
 8005936:	f000 ff25 	bl	8006784 <_fflush_r>
 800593a:	68e1      	ldr	r1, [r4, #12]
 800593c:	4b06      	ldr	r3, [pc, #24]	@ (8005958 <cleanup_stdio+0x3c>)
 800593e:	4299      	cmp	r1, r3
 8005940:	d004      	beq.n	800594c <cleanup_stdio+0x30>
 8005942:	4620      	mov	r0, r4
 8005944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005948:	f000 bf1c 	b.w	8006784 <_fflush_r>
 800594c:	bd10      	pop	{r4, pc}
 800594e:	bf00      	nop
 8005950:	20004b28 	.word	0x20004b28
 8005954:	20004b90 	.word	0x20004b90
 8005958:	20004bf8 	.word	0x20004bf8

0800595c <global_stdio_init.part.0>:
 800595c:	b510      	push	{r4, lr}
 800595e:	4b0b      	ldr	r3, [pc, #44]	@ (800598c <global_stdio_init.part.0+0x30>)
 8005960:	4c0b      	ldr	r4, [pc, #44]	@ (8005990 <global_stdio_init.part.0+0x34>)
 8005962:	4a0c      	ldr	r2, [pc, #48]	@ (8005994 <global_stdio_init.part.0+0x38>)
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	4620      	mov	r0, r4
 8005968:	2200      	movs	r2, #0
 800596a:	2104      	movs	r1, #4
 800596c:	f7ff ff94 	bl	8005898 <std>
 8005970:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005974:	2201      	movs	r2, #1
 8005976:	2109      	movs	r1, #9
 8005978:	f7ff ff8e 	bl	8005898 <std>
 800597c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005980:	2202      	movs	r2, #2
 8005982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005986:	2112      	movs	r1, #18
 8005988:	f7ff bf86 	b.w	8005898 <std>
 800598c:	20004c60 	.word	0x20004c60
 8005990:	20004b28 	.word	0x20004b28
 8005994:	08005905 	.word	0x08005905

08005998 <__sfp_lock_acquire>:
 8005998:	4801      	ldr	r0, [pc, #4]	@ (80059a0 <__sfp_lock_acquire+0x8>)
 800599a:	f000 ba82 	b.w	8005ea2 <__retarget_lock_acquire_recursive>
 800599e:	bf00      	nop
 80059a0:	20004c69 	.word	0x20004c69

080059a4 <__sfp_lock_release>:
 80059a4:	4801      	ldr	r0, [pc, #4]	@ (80059ac <__sfp_lock_release+0x8>)
 80059a6:	f000 ba7d 	b.w	8005ea4 <__retarget_lock_release_recursive>
 80059aa:	bf00      	nop
 80059ac:	20004c69 	.word	0x20004c69

080059b0 <__sinit>:
 80059b0:	b510      	push	{r4, lr}
 80059b2:	4604      	mov	r4, r0
 80059b4:	f7ff fff0 	bl	8005998 <__sfp_lock_acquire>
 80059b8:	6a23      	ldr	r3, [r4, #32]
 80059ba:	b11b      	cbz	r3, 80059c4 <__sinit+0x14>
 80059bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c0:	f7ff bff0 	b.w	80059a4 <__sfp_lock_release>
 80059c4:	4b04      	ldr	r3, [pc, #16]	@ (80059d8 <__sinit+0x28>)
 80059c6:	6223      	str	r3, [r4, #32]
 80059c8:	4b04      	ldr	r3, [pc, #16]	@ (80059dc <__sinit+0x2c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f5      	bne.n	80059bc <__sinit+0xc>
 80059d0:	f7ff ffc4 	bl	800595c <global_stdio_init.part.0>
 80059d4:	e7f2      	b.n	80059bc <__sinit+0xc>
 80059d6:	bf00      	nop
 80059d8:	0800591d 	.word	0x0800591d
 80059dc:	20004c60 	.word	0x20004c60

080059e0 <_fwalk_sglue>:
 80059e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e4:	4607      	mov	r7, r0
 80059e6:	4688      	mov	r8, r1
 80059e8:	4614      	mov	r4, r2
 80059ea:	2600      	movs	r6, #0
 80059ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059f0:	f1b9 0901 	subs.w	r9, r9, #1
 80059f4:	d505      	bpl.n	8005a02 <_fwalk_sglue+0x22>
 80059f6:	6824      	ldr	r4, [r4, #0]
 80059f8:	2c00      	cmp	r4, #0
 80059fa:	d1f7      	bne.n	80059ec <_fwalk_sglue+0xc>
 80059fc:	4630      	mov	r0, r6
 80059fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a02:	89ab      	ldrh	r3, [r5, #12]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d907      	bls.n	8005a18 <_fwalk_sglue+0x38>
 8005a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	d003      	beq.n	8005a18 <_fwalk_sglue+0x38>
 8005a10:	4629      	mov	r1, r5
 8005a12:	4638      	mov	r0, r7
 8005a14:	47c0      	blx	r8
 8005a16:	4306      	orrs	r6, r0
 8005a18:	3568      	adds	r5, #104	@ 0x68
 8005a1a:	e7e9      	b.n	80059f0 <_fwalk_sglue+0x10>

08005a1c <_puts_r>:
 8005a1c:	6a03      	ldr	r3, [r0, #32]
 8005a1e:	b570      	push	{r4, r5, r6, lr}
 8005a20:	6884      	ldr	r4, [r0, #8]
 8005a22:	4605      	mov	r5, r0
 8005a24:	460e      	mov	r6, r1
 8005a26:	b90b      	cbnz	r3, 8005a2c <_puts_r+0x10>
 8005a28:	f7ff ffc2 	bl	80059b0 <__sinit>
 8005a2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a2e:	07db      	lsls	r3, r3, #31
 8005a30:	d405      	bmi.n	8005a3e <_puts_r+0x22>
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	0598      	lsls	r0, r3, #22
 8005a36:	d402      	bmi.n	8005a3e <_puts_r+0x22>
 8005a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a3a:	f000 fa32 	bl	8005ea2 <__retarget_lock_acquire_recursive>
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	0719      	lsls	r1, r3, #28
 8005a42:	d502      	bpl.n	8005a4a <_puts_r+0x2e>
 8005a44:	6923      	ldr	r3, [r4, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d135      	bne.n	8005ab6 <_puts_r+0x9a>
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f000 f8fb 	bl	8005c48 <__swsetup_r>
 8005a52:	b380      	cbz	r0, 8005ab6 <_puts_r+0x9a>
 8005a54:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005a58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a5a:	07da      	lsls	r2, r3, #31
 8005a5c:	d405      	bmi.n	8005a6a <_puts_r+0x4e>
 8005a5e:	89a3      	ldrh	r3, [r4, #12]
 8005a60:	059b      	lsls	r3, r3, #22
 8005a62:	d402      	bmi.n	8005a6a <_puts_r+0x4e>
 8005a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a66:	f000 fa1d 	bl	8005ea4 <__retarget_lock_release_recursive>
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	bd70      	pop	{r4, r5, r6, pc}
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	da04      	bge.n	8005a7c <_puts_r+0x60>
 8005a72:	69a2      	ldr	r2, [r4, #24]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	dc17      	bgt.n	8005aa8 <_puts_r+0x8c>
 8005a78:	290a      	cmp	r1, #10
 8005a7a:	d015      	beq.n	8005aa8 <_puts_r+0x8c>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	6022      	str	r2, [r4, #0]
 8005a82:	7019      	strb	r1, [r3, #0]
 8005a84:	68a3      	ldr	r3, [r4, #8]
 8005a86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	60a3      	str	r3, [r4, #8]
 8005a8e:	2900      	cmp	r1, #0
 8005a90:	d1ed      	bne.n	8005a6e <_puts_r+0x52>
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	da11      	bge.n	8005aba <_puts_r+0x9e>
 8005a96:	4622      	mov	r2, r4
 8005a98:	210a      	movs	r1, #10
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f000 f895 	bl	8005bca <__swbuf_r>
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d0d7      	beq.n	8005a54 <_puts_r+0x38>
 8005aa4:	250a      	movs	r5, #10
 8005aa6:	e7d7      	b.n	8005a58 <_puts_r+0x3c>
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f000 f88d 	bl	8005bca <__swbuf_r>
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d1e7      	bne.n	8005a84 <_puts_r+0x68>
 8005ab4:	e7ce      	b.n	8005a54 <_puts_r+0x38>
 8005ab6:	3e01      	subs	r6, #1
 8005ab8:	e7e4      	b.n	8005a84 <_puts_r+0x68>
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	6022      	str	r2, [r4, #0]
 8005ac0:	220a      	movs	r2, #10
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	e7ee      	b.n	8005aa4 <_puts_r+0x88>
	...

08005ac8 <puts>:
 8005ac8:	4b02      	ldr	r3, [pc, #8]	@ (8005ad4 <puts+0xc>)
 8005aca:	4601      	mov	r1, r0
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	f7ff bfa5 	b.w	8005a1c <_puts_r>
 8005ad2:	bf00      	nop
 8005ad4:	2000001c 	.word	0x2000001c

08005ad8 <sniprintf>:
 8005ad8:	b40c      	push	{r2, r3}
 8005ada:	b530      	push	{r4, r5, lr}
 8005adc:	4b18      	ldr	r3, [pc, #96]	@ (8005b40 <sniprintf+0x68>)
 8005ade:	1e0c      	subs	r4, r1, #0
 8005ae0:	681d      	ldr	r5, [r3, #0]
 8005ae2:	b09d      	sub	sp, #116	@ 0x74
 8005ae4:	da08      	bge.n	8005af8 <sniprintf+0x20>
 8005ae6:	238b      	movs	r3, #139	@ 0x8b
 8005ae8:	602b      	str	r3, [r5, #0]
 8005aea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005aee:	b01d      	add	sp, #116	@ 0x74
 8005af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005af4:	b002      	add	sp, #8
 8005af6:	4770      	bx	lr
 8005af8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005afc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005b06:	bf14      	ite	ne
 8005b08:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005b0c:	4623      	moveq	r3, r4
 8005b0e:	9304      	str	r3, [sp, #16]
 8005b10:	9307      	str	r3, [sp, #28]
 8005b12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b16:	9002      	str	r0, [sp, #8]
 8005b18:	9006      	str	r0, [sp, #24]
 8005b1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005b20:	ab21      	add	r3, sp, #132	@ 0x84
 8005b22:	a902      	add	r1, sp, #8
 8005b24:	4628      	mov	r0, r5
 8005b26:	9301      	str	r3, [sp, #4]
 8005b28:	f000 fb20 	bl	800616c <_svfiprintf_r>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	bfbc      	itt	lt
 8005b30:	238b      	movlt	r3, #139	@ 0x8b
 8005b32:	602b      	strlt	r3, [r5, #0]
 8005b34:	2c00      	cmp	r4, #0
 8005b36:	d0da      	beq.n	8005aee <sniprintf+0x16>
 8005b38:	9b02      	ldr	r3, [sp, #8]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	e7d6      	b.n	8005aee <sniprintf+0x16>
 8005b40:	2000001c 	.word	0x2000001c

08005b44 <__sread>:
 8005b44:	b510      	push	{r4, lr}
 8005b46:	460c      	mov	r4, r1
 8005b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b4c:	f000 f95a 	bl	8005e04 <_read_r>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	bfab      	itete	ge
 8005b54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b56:	89a3      	ldrhlt	r3, [r4, #12]
 8005b58:	181b      	addge	r3, r3, r0
 8005b5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b5e:	bfac      	ite	ge
 8005b60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b62:	81a3      	strhlt	r3, [r4, #12]
 8005b64:	bd10      	pop	{r4, pc}

08005b66 <__swrite>:
 8005b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6a:	461f      	mov	r7, r3
 8005b6c:	898b      	ldrh	r3, [r1, #12]
 8005b6e:	05db      	lsls	r3, r3, #23
 8005b70:	4605      	mov	r5, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	4616      	mov	r6, r2
 8005b76:	d505      	bpl.n	8005b84 <__swrite+0x1e>
 8005b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f000 f92e 	bl	8005de0 <_lseek_r>
 8005b84:	89a3      	ldrh	r3, [r4, #12]
 8005b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b8e:	81a3      	strh	r3, [r4, #12]
 8005b90:	4632      	mov	r2, r6
 8005b92:	463b      	mov	r3, r7
 8005b94:	4628      	mov	r0, r5
 8005b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9a:	f000 b945 	b.w	8005e28 <_write_r>

08005b9e <__sseek>:
 8005b9e:	b510      	push	{r4, lr}
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba6:	f000 f91b 	bl	8005de0 <_lseek_r>
 8005baa:	1c43      	adds	r3, r0, #1
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	bf15      	itete	ne
 8005bb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005bb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005bb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005bba:	81a3      	strheq	r3, [r4, #12]
 8005bbc:	bf18      	it	ne
 8005bbe:	81a3      	strhne	r3, [r4, #12]
 8005bc0:	bd10      	pop	{r4, pc}

08005bc2 <__sclose>:
 8005bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc6:	f000 b89d 	b.w	8005d04 <_close_r>

08005bca <__swbuf_r>:
 8005bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bcc:	460e      	mov	r6, r1
 8005bce:	4614      	mov	r4, r2
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	b118      	cbz	r0, 8005bdc <__swbuf_r+0x12>
 8005bd4:	6a03      	ldr	r3, [r0, #32]
 8005bd6:	b90b      	cbnz	r3, 8005bdc <__swbuf_r+0x12>
 8005bd8:	f7ff feea 	bl	80059b0 <__sinit>
 8005bdc:	69a3      	ldr	r3, [r4, #24]
 8005bde:	60a3      	str	r3, [r4, #8]
 8005be0:	89a3      	ldrh	r3, [r4, #12]
 8005be2:	071a      	lsls	r2, r3, #28
 8005be4:	d501      	bpl.n	8005bea <__swbuf_r+0x20>
 8005be6:	6923      	ldr	r3, [r4, #16]
 8005be8:	b943      	cbnz	r3, 8005bfc <__swbuf_r+0x32>
 8005bea:	4621      	mov	r1, r4
 8005bec:	4628      	mov	r0, r5
 8005bee:	f000 f82b 	bl	8005c48 <__swsetup_r>
 8005bf2:	b118      	cbz	r0, 8005bfc <__swbuf_r+0x32>
 8005bf4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	6922      	ldr	r2, [r4, #16]
 8005c00:	1a98      	subs	r0, r3, r2
 8005c02:	6963      	ldr	r3, [r4, #20]
 8005c04:	b2f6      	uxtb	r6, r6
 8005c06:	4283      	cmp	r3, r0
 8005c08:	4637      	mov	r7, r6
 8005c0a:	dc05      	bgt.n	8005c18 <__swbuf_r+0x4e>
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 fdb8 	bl	8006784 <_fflush_r>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d1ed      	bne.n	8005bf4 <__swbuf_r+0x2a>
 8005c18:	68a3      	ldr	r3, [r4, #8]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	60a3      	str	r3, [r4, #8]
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	6022      	str	r2, [r4, #0]
 8005c24:	701e      	strb	r6, [r3, #0]
 8005c26:	6962      	ldr	r2, [r4, #20]
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d004      	beq.n	8005c38 <__swbuf_r+0x6e>
 8005c2e:	89a3      	ldrh	r3, [r4, #12]
 8005c30:	07db      	lsls	r3, r3, #31
 8005c32:	d5e1      	bpl.n	8005bf8 <__swbuf_r+0x2e>
 8005c34:	2e0a      	cmp	r6, #10
 8005c36:	d1df      	bne.n	8005bf8 <__swbuf_r+0x2e>
 8005c38:	4621      	mov	r1, r4
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f000 fda2 	bl	8006784 <_fflush_r>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	d0d9      	beq.n	8005bf8 <__swbuf_r+0x2e>
 8005c44:	e7d6      	b.n	8005bf4 <__swbuf_r+0x2a>
	...

08005c48 <__swsetup_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4b29      	ldr	r3, [pc, #164]	@ (8005cf0 <__swsetup_r+0xa8>)
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	6818      	ldr	r0, [r3, #0]
 8005c50:	460c      	mov	r4, r1
 8005c52:	b118      	cbz	r0, 8005c5c <__swsetup_r+0x14>
 8005c54:	6a03      	ldr	r3, [r0, #32]
 8005c56:	b90b      	cbnz	r3, 8005c5c <__swsetup_r+0x14>
 8005c58:	f7ff feaa 	bl	80059b0 <__sinit>
 8005c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c60:	0719      	lsls	r1, r3, #28
 8005c62:	d422      	bmi.n	8005caa <__swsetup_r+0x62>
 8005c64:	06da      	lsls	r2, r3, #27
 8005c66:	d407      	bmi.n	8005c78 <__swsetup_r+0x30>
 8005c68:	2209      	movs	r2, #9
 8005c6a:	602a      	str	r2, [r5, #0]
 8005c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c76:	e033      	b.n	8005ce0 <__swsetup_r+0x98>
 8005c78:	0758      	lsls	r0, r3, #29
 8005c7a:	d512      	bpl.n	8005ca2 <__swsetup_r+0x5a>
 8005c7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c7e:	b141      	cbz	r1, 8005c92 <__swsetup_r+0x4a>
 8005c80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c84:	4299      	cmp	r1, r3
 8005c86:	d002      	beq.n	8005c8e <__swsetup_r+0x46>
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 f91b 	bl	8005ec4 <_free_r>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c98:	81a3      	strh	r3, [r4, #12]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	6063      	str	r3, [r4, #4]
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	f043 0308 	orr.w	r3, r3, #8
 8005ca8:	81a3      	strh	r3, [r4, #12]
 8005caa:	6923      	ldr	r3, [r4, #16]
 8005cac:	b94b      	cbnz	r3, 8005cc2 <__swsetup_r+0x7a>
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cb8:	d003      	beq.n	8005cc2 <__swsetup_r+0x7a>
 8005cba:	4621      	mov	r1, r4
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f000 fdaf 	bl	8006820 <__smakebuf_r>
 8005cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cc6:	f013 0201 	ands.w	r2, r3, #1
 8005cca:	d00a      	beq.n	8005ce2 <__swsetup_r+0x9a>
 8005ccc:	2200      	movs	r2, #0
 8005cce:	60a2      	str	r2, [r4, #8]
 8005cd0:	6962      	ldr	r2, [r4, #20]
 8005cd2:	4252      	negs	r2, r2
 8005cd4:	61a2      	str	r2, [r4, #24]
 8005cd6:	6922      	ldr	r2, [r4, #16]
 8005cd8:	b942      	cbnz	r2, 8005cec <__swsetup_r+0xa4>
 8005cda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005cde:	d1c5      	bne.n	8005c6c <__swsetup_r+0x24>
 8005ce0:	bd38      	pop	{r3, r4, r5, pc}
 8005ce2:	0799      	lsls	r1, r3, #30
 8005ce4:	bf58      	it	pl
 8005ce6:	6962      	ldrpl	r2, [r4, #20]
 8005ce8:	60a2      	str	r2, [r4, #8]
 8005cea:	e7f4      	b.n	8005cd6 <__swsetup_r+0x8e>
 8005cec:	2000      	movs	r0, #0
 8005cee:	e7f7      	b.n	8005ce0 <__swsetup_r+0x98>
 8005cf0:	2000001c 	.word	0x2000001c

08005cf4 <memset>:
 8005cf4:	4402      	add	r2, r0
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d100      	bne.n	8005cfe <memset+0xa>
 8005cfc:	4770      	bx	lr
 8005cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005d02:	e7f9      	b.n	8005cf8 <memset+0x4>

08005d04 <_close_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4d06      	ldr	r5, [pc, #24]	@ (8005d20 <_close_r+0x1c>)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	602b      	str	r3, [r5, #0]
 8005d10:	f7fa ff9d 	bl	8000c4e <_close>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_close_r+0x1a>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_close_r+0x1a>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	20004c64 	.word	0x20004c64

08005d24 <_reclaim_reent>:
 8005d24:	4b2d      	ldr	r3, [pc, #180]	@ (8005ddc <_reclaim_reent+0xb8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4283      	cmp	r3, r0
 8005d2a:	b570      	push	{r4, r5, r6, lr}
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	d053      	beq.n	8005dd8 <_reclaim_reent+0xb4>
 8005d30:	69c3      	ldr	r3, [r0, #28]
 8005d32:	b31b      	cbz	r3, 8005d7c <_reclaim_reent+0x58>
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	b163      	cbz	r3, 8005d52 <_reclaim_reent+0x2e>
 8005d38:	2500      	movs	r5, #0
 8005d3a:	69e3      	ldr	r3, [r4, #28]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	5959      	ldr	r1, [r3, r5]
 8005d40:	b9b1      	cbnz	r1, 8005d70 <_reclaim_reent+0x4c>
 8005d42:	3504      	adds	r5, #4
 8005d44:	2d80      	cmp	r5, #128	@ 0x80
 8005d46:	d1f8      	bne.n	8005d3a <_reclaim_reent+0x16>
 8005d48:	69e3      	ldr	r3, [r4, #28]
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	68d9      	ldr	r1, [r3, #12]
 8005d4e:	f000 f8b9 	bl	8005ec4 <_free_r>
 8005d52:	69e3      	ldr	r3, [r4, #28]
 8005d54:	6819      	ldr	r1, [r3, #0]
 8005d56:	b111      	cbz	r1, 8005d5e <_reclaim_reent+0x3a>
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 f8b3 	bl	8005ec4 <_free_r>
 8005d5e:	69e3      	ldr	r3, [r4, #28]
 8005d60:	689d      	ldr	r5, [r3, #8]
 8005d62:	b15d      	cbz	r5, 8005d7c <_reclaim_reent+0x58>
 8005d64:	4629      	mov	r1, r5
 8005d66:	4620      	mov	r0, r4
 8005d68:	682d      	ldr	r5, [r5, #0]
 8005d6a:	f000 f8ab 	bl	8005ec4 <_free_r>
 8005d6e:	e7f8      	b.n	8005d62 <_reclaim_reent+0x3e>
 8005d70:	680e      	ldr	r6, [r1, #0]
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 f8a6 	bl	8005ec4 <_free_r>
 8005d78:	4631      	mov	r1, r6
 8005d7a:	e7e1      	b.n	8005d40 <_reclaim_reent+0x1c>
 8005d7c:	6961      	ldr	r1, [r4, #20]
 8005d7e:	b111      	cbz	r1, 8005d86 <_reclaim_reent+0x62>
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 f89f 	bl	8005ec4 <_free_r>
 8005d86:	69e1      	ldr	r1, [r4, #28]
 8005d88:	b111      	cbz	r1, 8005d90 <_reclaim_reent+0x6c>
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f000 f89a 	bl	8005ec4 <_free_r>
 8005d90:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005d92:	b111      	cbz	r1, 8005d9a <_reclaim_reent+0x76>
 8005d94:	4620      	mov	r0, r4
 8005d96:	f000 f895 	bl	8005ec4 <_free_r>
 8005d9a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d9c:	b111      	cbz	r1, 8005da4 <_reclaim_reent+0x80>
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f000 f890 	bl	8005ec4 <_free_r>
 8005da4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005da6:	b111      	cbz	r1, 8005dae <_reclaim_reent+0x8a>
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 f88b 	bl	8005ec4 <_free_r>
 8005dae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005db0:	b111      	cbz	r1, 8005db8 <_reclaim_reent+0x94>
 8005db2:	4620      	mov	r0, r4
 8005db4:	f000 f886 	bl	8005ec4 <_free_r>
 8005db8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005dba:	b111      	cbz	r1, 8005dc2 <_reclaim_reent+0x9e>
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f000 f881 	bl	8005ec4 <_free_r>
 8005dc2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005dc4:	b111      	cbz	r1, 8005dcc <_reclaim_reent+0xa8>
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f000 f87c 	bl	8005ec4 <_free_r>
 8005dcc:	6a23      	ldr	r3, [r4, #32]
 8005dce:	b11b      	cbz	r3, 8005dd8 <_reclaim_reent+0xb4>
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005dd6:	4718      	bx	r3
 8005dd8:	bd70      	pop	{r4, r5, r6, pc}
 8005dda:	bf00      	nop
 8005ddc:	2000001c 	.word	0x2000001c

08005de0 <_lseek_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d07      	ldr	r5, [pc, #28]	@ (8005e00 <_lseek_r+0x20>)
 8005de4:	4604      	mov	r4, r0
 8005de6:	4608      	mov	r0, r1
 8005de8:	4611      	mov	r1, r2
 8005dea:	2200      	movs	r2, #0
 8005dec:	602a      	str	r2, [r5, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f7fa ff54 	bl	8000c9c <_lseek>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_lseek_r+0x1e>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_lseek_r+0x1e>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	20004c64 	.word	0x20004c64

08005e04 <_read_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d07      	ldr	r5, [pc, #28]	@ (8005e24 <_read_r+0x20>)
 8005e08:	4604      	mov	r4, r0
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	2200      	movs	r2, #0
 8005e10:	602a      	str	r2, [r5, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f7fa fefe 	bl	8000c14 <_read>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_read_r+0x1e>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_read_r+0x1e>
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	20004c64 	.word	0x20004c64

08005e28 <_write_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4d07      	ldr	r5, [pc, #28]	@ (8005e48 <_write_r+0x20>)
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	4608      	mov	r0, r1
 8005e30:	4611      	mov	r1, r2
 8005e32:	2200      	movs	r2, #0
 8005e34:	602a      	str	r2, [r5, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	f7fa fc54 	bl	80006e4 <_write>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d102      	bne.n	8005e46 <_write_r+0x1e>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	b103      	cbz	r3, 8005e46 <_write_r+0x1e>
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	20004c64 	.word	0x20004c64

08005e4c <__errno>:
 8005e4c:	4b01      	ldr	r3, [pc, #4]	@ (8005e54 <__errno+0x8>)
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	2000001c 	.word	0x2000001c

08005e58 <__libc_init_array>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	4d0d      	ldr	r5, [pc, #52]	@ (8005e90 <__libc_init_array+0x38>)
 8005e5c:	4c0d      	ldr	r4, [pc, #52]	@ (8005e94 <__libc_init_array+0x3c>)
 8005e5e:	1b64      	subs	r4, r4, r5
 8005e60:	10a4      	asrs	r4, r4, #2
 8005e62:	2600      	movs	r6, #0
 8005e64:	42a6      	cmp	r6, r4
 8005e66:	d109      	bne.n	8005e7c <__libc_init_array+0x24>
 8005e68:	4d0b      	ldr	r5, [pc, #44]	@ (8005e98 <__libc_init_array+0x40>)
 8005e6a:	4c0c      	ldr	r4, [pc, #48]	@ (8005e9c <__libc_init_array+0x44>)
 8005e6c:	f000 fd96 	bl	800699c <_init>
 8005e70:	1b64      	subs	r4, r4, r5
 8005e72:	10a4      	asrs	r4, r4, #2
 8005e74:	2600      	movs	r6, #0
 8005e76:	42a6      	cmp	r6, r4
 8005e78:	d105      	bne.n	8005e86 <__libc_init_array+0x2e>
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e80:	4798      	blx	r3
 8005e82:	3601      	adds	r6, #1
 8005e84:	e7ee      	b.n	8005e64 <__libc_init_array+0xc>
 8005e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8a:	4798      	blx	r3
 8005e8c:	3601      	adds	r6, #1
 8005e8e:	e7f2      	b.n	8005e76 <__libc_init_array+0x1e>
 8005e90:	08006b70 	.word	0x08006b70
 8005e94:	08006b70 	.word	0x08006b70
 8005e98:	08006b70 	.word	0x08006b70
 8005e9c:	08006b74 	.word	0x08006b74

08005ea0 <__retarget_lock_init_recursive>:
 8005ea0:	4770      	bx	lr

08005ea2 <__retarget_lock_acquire_recursive>:
 8005ea2:	4770      	bx	lr

08005ea4 <__retarget_lock_release_recursive>:
 8005ea4:	4770      	bx	lr

08005ea6 <memcpy>:
 8005ea6:	440a      	add	r2, r1
 8005ea8:	4291      	cmp	r1, r2
 8005eaa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005eae:	d100      	bne.n	8005eb2 <memcpy+0xc>
 8005eb0:	4770      	bx	lr
 8005eb2:	b510      	push	{r4, lr}
 8005eb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ebc:	4291      	cmp	r1, r2
 8005ebe:	d1f9      	bne.n	8005eb4 <memcpy+0xe>
 8005ec0:	bd10      	pop	{r4, pc}
	...

08005ec4 <_free_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4605      	mov	r5, r0
 8005ec8:	2900      	cmp	r1, #0
 8005eca:	d041      	beq.n	8005f50 <_free_r+0x8c>
 8005ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ed0:	1f0c      	subs	r4, r1, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	bfb8      	it	lt
 8005ed6:	18e4      	addlt	r4, r4, r3
 8005ed8:	f000 f8e0 	bl	800609c <__malloc_lock>
 8005edc:	4a1d      	ldr	r2, [pc, #116]	@ (8005f54 <_free_r+0x90>)
 8005ede:	6813      	ldr	r3, [r2, #0]
 8005ee0:	b933      	cbnz	r3, 8005ef0 <_free_r+0x2c>
 8005ee2:	6063      	str	r3, [r4, #4]
 8005ee4:	6014      	str	r4, [r2, #0]
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eec:	f000 b8dc 	b.w	80060a8 <__malloc_unlock>
 8005ef0:	42a3      	cmp	r3, r4
 8005ef2:	d908      	bls.n	8005f06 <_free_r+0x42>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	1821      	adds	r1, r4, r0
 8005ef8:	428b      	cmp	r3, r1
 8005efa:	bf01      	itttt	eq
 8005efc:	6819      	ldreq	r1, [r3, #0]
 8005efe:	685b      	ldreq	r3, [r3, #4]
 8005f00:	1809      	addeq	r1, r1, r0
 8005f02:	6021      	streq	r1, [r4, #0]
 8005f04:	e7ed      	b.n	8005ee2 <_free_r+0x1e>
 8005f06:	461a      	mov	r2, r3
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	b10b      	cbz	r3, 8005f10 <_free_r+0x4c>
 8005f0c:	42a3      	cmp	r3, r4
 8005f0e:	d9fa      	bls.n	8005f06 <_free_r+0x42>
 8005f10:	6811      	ldr	r1, [r2, #0]
 8005f12:	1850      	adds	r0, r2, r1
 8005f14:	42a0      	cmp	r0, r4
 8005f16:	d10b      	bne.n	8005f30 <_free_r+0x6c>
 8005f18:	6820      	ldr	r0, [r4, #0]
 8005f1a:	4401      	add	r1, r0
 8005f1c:	1850      	adds	r0, r2, r1
 8005f1e:	4283      	cmp	r3, r0
 8005f20:	6011      	str	r1, [r2, #0]
 8005f22:	d1e0      	bne.n	8005ee6 <_free_r+0x22>
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	6053      	str	r3, [r2, #4]
 8005f2a:	4408      	add	r0, r1
 8005f2c:	6010      	str	r0, [r2, #0]
 8005f2e:	e7da      	b.n	8005ee6 <_free_r+0x22>
 8005f30:	d902      	bls.n	8005f38 <_free_r+0x74>
 8005f32:	230c      	movs	r3, #12
 8005f34:	602b      	str	r3, [r5, #0]
 8005f36:	e7d6      	b.n	8005ee6 <_free_r+0x22>
 8005f38:	6820      	ldr	r0, [r4, #0]
 8005f3a:	1821      	adds	r1, r4, r0
 8005f3c:	428b      	cmp	r3, r1
 8005f3e:	bf04      	itt	eq
 8005f40:	6819      	ldreq	r1, [r3, #0]
 8005f42:	685b      	ldreq	r3, [r3, #4]
 8005f44:	6063      	str	r3, [r4, #4]
 8005f46:	bf04      	itt	eq
 8005f48:	1809      	addeq	r1, r1, r0
 8005f4a:	6021      	streq	r1, [r4, #0]
 8005f4c:	6054      	str	r4, [r2, #4]
 8005f4e:	e7ca      	b.n	8005ee6 <_free_r+0x22>
 8005f50:	bd38      	pop	{r3, r4, r5, pc}
 8005f52:	bf00      	nop
 8005f54:	20004c70 	.word	0x20004c70

08005f58 <sbrk_aligned>:
 8005f58:	b570      	push	{r4, r5, r6, lr}
 8005f5a:	4e0f      	ldr	r6, [pc, #60]	@ (8005f98 <sbrk_aligned+0x40>)
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	6831      	ldr	r1, [r6, #0]
 8005f60:	4605      	mov	r5, r0
 8005f62:	b911      	cbnz	r1, 8005f6a <sbrk_aligned+0x12>
 8005f64:	f000 fcd4 	bl	8006910 <_sbrk_r>
 8005f68:	6030      	str	r0, [r6, #0]
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	f000 fccf 	bl	8006910 <_sbrk_r>
 8005f72:	1c43      	adds	r3, r0, #1
 8005f74:	d103      	bne.n	8005f7e <sbrk_aligned+0x26>
 8005f76:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	bd70      	pop	{r4, r5, r6, pc}
 8005f7e:	1cc4      	adds	r4, r0, #3
 8005f80:	f024 0403 	bic.w	r4, r4, #3
 8005f84:	42a0      	cmp	r0, r4
 8005f86:	d0f8      	beq.n	8005f7a <sbrk_aligned+0x22>
 8005f88:	1a21      	subs	r1, r4, r0
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f000 fcc0 	bl	8006910 <_sbrk_r>
 8005f90:	3001      	adds	r0, #1
 8005f92:	d1f2      	bne.n	8005f7a <sbrk_aligned+0x22>
 8005f94:	e7ef      	b.n	8005f76 <sbrk_aligned+0x1e>
 8005f96:	bf00      	nop
 8005f98:	20004c6c 	.word	0x20004c6c

08005f9c <_malloc_r>:
 8005f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fa0:	1ccd      	adds	r5, r1, #3
 8005fa2:	f025 0503 	bic.w	r5, r5, #3
 8005fa6:	3508      	adds	r5, #8
 8005fa8:	2d0c      	cmp	r5, #12
 8005faa:	bf38      	it	cc
 8005fac:	250c      	movcc	r5, #12
 8005fae:	2d00      	cmp	r5, #0
 8005fb0:	4606      	mov	r6, r0
 8005fb2:	db01      	blt.n	8005fb8 <_malloc_r+0x1c>
 8005fb4:	42a9      	cmp	r1, r5
 8005fb6:	d904      	bls.n	8005fc2 <_malloc_r+0x26>
 8005fb8:	230c      	movs	r3, #12
 8005fba:	6033      	str	r3, [r6, #0]
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006098 <_malloc_r+0xfc>
 8005fc6:	f000 f869 	bl	800609c <__malloc_lock>
 8005fca:	f8d8 3000 	ldr.w	r3, [r8]
 8005fce:	461c      	mov	r4, r3
 8005fd0:	bb44      	cbnz	r4, 8006024 <_malloc_r+0x88>
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f7ff ffbf 	bl	8005f58 <sbrk_aligned>
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	4604      	mov	r4, r0
 8005fde:	d158      	bne.n	8006092 <_malloc_r+0xf6>
 8005fe0:	f8d8 4000 	ldr.w	r4, [r8]
 8005fe4:	4627      	mov	r7, r4
 8005fe6:	2f00      	cmp	r7, #0
 8005fe8:	d143      	bne.n	8006072 <_malloc_r+0xd6>
 8005fea:	2c00      	cmp	r4, #0
 8005fec:	d04b      	beq.n	8006086 <_malloc_r+0xea>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	eb04 0903 	add.w	r9, r4, r3
 8005ff8:	f000 fc8a 	bl	8006910 <_sbrk_r>
 8005ffc:	4581      	cmp	r9, r0
 8005ffe:	d142      	bne.n	8006086 <_malloc_r+0xea>
 8006000:	6821      	ldr	r1, [r4, #0]
 8006002:	1a6d      	subs	r5, r5, r1
 8006004:	4629      	mov	r1, r5
 8006006:	4630      	mov	r0, r6
 8006008:	f7ff ffa6 	bl	8005f58 <sbrk_aligned>
 800600c:	3001      	adds	r0, #1
 800600e:	d03a      	beq.n	8006086 <_malloc_r+0xea>
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	442b      	add	r3, r5
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	f8d8 3000 	ldr.w	r3, [r8]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	bb62      	cbnz	r2, 8006078 <_malloc_r+0xdc>
 800601e:	f8c8 7000 	str.w	r7, [r8]
 8006022:	e00f      	b.n	8006044 <_malloc_r+0xa8>
 8006024:	6822      	ldr	r2, [r4, #0]
 8006026:	1b52      	subs	r2, r2, r5
 8006028:	d420      	bmi.n	800606c <_malloc_r+0xd0>
 800602a:	2a0b      	cmp	r2, #11
 800602c:	d917      	bls.n	800605e <_malloc_r+0xc2>
 800602e:	1961      	adds	r1, r4, r5
 8006030:	42a3      	cmp	r3, r4
 8006032:	6025      	str	r5, [r4, #0]
 8006034:	bf18      	it	ne
 8006036:	6059      	strne	r1, [r3, #4]
 8006038:	6863      	ldr	r3, [r4, #4]
 800603a:	bf08      	it	eq
 800603c:	f8c8 1000 	streq.w	r1, [r8]
 8006040:	5162      	str	r2, [r4, r5]
 8006042:	604b      	str	r3, [r1, #4]
 8006044:	4630      	mov	r0, r6
 8006046:	f000 f82f 	bl	80060a8 <__malloc_unlock>
 800604a:	f104 000b 	add.w	r0, r4, #11
 800604e:	1d23      	adds	r3, r4, #4
 8006050:	f020 0007 	bic.w	r0, r0, #7
 8006054:	1ac2      	subs	r2, r0, r3
 8006056:	bf1c      	itt	ne
 8006058:	1a1b      	subne	r3, r3, r0
 800605a:	50a3      	strne	r3, [r4, r2]
 800605c:	e7af      	b.n	8005fbe <_malloc_r+0x22>
 800605e:	6862      	ldr	r2, [r4, #4]
 8006060:	42a3      	cmp	r3, r4
 8006062:	bf0c      	ite	eq
 8006064:	f8c8 2000 	streq.w	r2, [r8]
 8006068:	605a      	strne	r2, [r3, #4]
 800606a:	e7eb      	b.n	8006044 <_malloc_r+0xa8>
 800606c:	4623      	mov	r3, r4
 800606e:	6864      	ldr	r4, [r4, #4]
 8006070:	e7ae      	b.n	8005fd0 <_malloc_r+0x34>
 8006072:	463c      	mov	r4, r7
 8006074:	687f      	ldr	r7, [r7, #4]
 8006076:	e7b6      	b.n	8005fe6 <_malloc_r+0x4a>
 8006078:	461a      	mov	r2, r3
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	42a3      	cmp	r3, r4
 800607e:	d1fb      	bne.n	8006078 <_malloc_r+0xdc>
 8006080:	2300      	movs	r3, #0
 8006082:	6053      	str	r3, [r2, #4]
 8006084:	e7de      	b.n	8006044 <_malloc_r+0xa8>
 8006086:	230c      	movs	r3, #12
 8006088:	6033      	str	r3, [r6, #0]
 800608a:	4630      	mov	r0, r6
 800608c:	f000 f80c 	bl	80060a8 <__malloc_unlock>
 8006090:	e794      	b.n	8005fbc <_malloc_r+0x20>
 8006092:	6005      	str	r5, [r0, #0]
 8006094:	e7d6      	b.n	8006044 <_malloc_r+0xa8>
 8006096:	bf00      	nop
 8006098:	20004c70 	.word	0x20004c70

0800609c <__malloc_lock>:
 800609c:	4801      	ldr	r0, [pc, #4]	@ (80060a4 <__malloc_lock+0x8>)
 800609e:	f7ff bf00 	b.w	8005ea2 <__retarget_lock_acquire_recursive>
 80060a2:	bf00      	nop
 80060a4:	20004c68 	.word	0x20004c68

080060a8 <__malloc_unlock>:
 80060a8:	4801      	ldr	r0, [pc, #4]	@ (80060b0 <__malloc_unlock+0x8>)
 80060aa:	f7ff befb 	b.w	8005ea4 <__retarget_lock_release_recursive>
 80060ae:	bf00      	nop
 80060b0:	20004c68 	.word	0x20004c68

080060b4 <__ssputs_r>:
 80060b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b8:	688e      	ldr	r6, [r1, #8]
 80060ba:	461f      	mov	r7, r3
 80060bc:	42be      	cmp	r6, r7
 80060be:	680b      	ldr	r3, [r1, #0]
 80060c0:	4682      	mov	sl, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	4690      	mov	r8, r2
 80060c6:	d82d      	bhi.n	8006124 <__ssputs_r+0x70>
 80060c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80060d0:	d026      	beq.n	8006120 <__ssputs_r+0x6c>
 80060d2:	6965      	ldr	r5, [r4, #20]
 80060d4:	6909      	ldr	r1, [r1, #16]
 80060d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060da:	eba3 0901 	sub.w	r9, r3, r1
 80060de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060e2:	1c7b      	adds	r3, r7, #1
 80060e4:	444b      	add	r3, r9
 80060e6:	106d      	asrs	r5, r5, #1
 80060e8:	429d      	cmp	r5, r3
 80060ea:	bf38      	it	cc
 80060ec:	461d      	movcc	r5, r3
 80060ee:	0553      	lsls	r3, r2, #21
 80060f0:	d527      	bpl.n	8006142 <__ssputs_r+0x8e>
 80060f2:	4629      	mov	r1, r5
 80060f4:	f7ff ff52 	bl	8005f9c <_malloc_r>
 80060f8:	4606      	mov	r6, r0
 80060fa:	b360      	cbz	r0, 8006156 <__ssputs_r+0xa2>
 80060fc:	6921      	ldr	r1, [r4, #16]
 80060fe:	464a      	mov	r2, r9
 8006100:	f7ff fed1 	bl	8005ea6 <memcpy>
 8006104:	89a3      	ldrh	r3, [r4, #12]
 8006106:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800610a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800610e:	81a3      	strh	r3, [r4, #12]
 8006110:	6126      	str	r6, [r4, #16]
 8006112:	6165      	str	r5, [r4, #20]
 8006114:	444e      	add	r6, r9
 8006116:	eba5 0509 	sub.w	r5, r5, r9
 800611a:	6026      	str	r6, [r4, #0]
 800611c:	60a5      	str	r5, [r4, #8]
 800611e:	463e      	mov	r6, r7
 8006120:	42be      	cmp	r6, r7
 8006122:	d900      	bls.n	8006126 <__ssputs_r+0x72>
 8006124:	463e      	mov	r6, r7
 8006126:	6820      	ldr	r0, [r4, #0]
 8006128:	4632      	mov	r2, r6
 800612a:	4641      	mov	r1, r8
 800612c:	f000 fbb4 	bl	8006898 <memmove>
 8006130:	68a3      	ldr	r3, [r4, #8]
 8006132:	1b9b      	subs	r3, r3, r6
 8006134:	60a3      	str	r3, [r4, #8]
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	4433      	add	r3, r6
 800613a:	6023      	str	r3, [r4, #0]
 800613c:	2000      	movs	r0, #0
 800613e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006142:	462a      	mov	r2, r5
 8006144:	f000 fbf4 	bl	8006930 <_realloc_r>
 8006148:	4606      	mov	r6, r0
 800614a:	2800      	cmp	r0, #0
 800614c:	d1e0      	bne.n	8006110 <__ssputs_r+0x5c>
 800614e:	6921      	ldr	r1, [r4, #16]
 8006150:	4650      	mov	r0, sl
 8006152:	f7ff feb7 	bl	8005ec4 <_free_r>
 8006156:	230c      	movs	r3, #12
 8006158:	f8ca 3000 	str.w	r3, [sl]
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006162:	81a3      	strh	r3, [r4, #12]
 8006164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006168:	e7e9      	b.n	800613e <__ssputs_r+0x8a>
	...

0800616c <_svfiprintf_r>:
 800616c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006170:	4698      	mov	r8, r3
 8006172:	898b      	ldrh	r3, [r1, #12]
 8006174:	061b      	lsls	r3, r3, #24
 8006176:	b09d      	sub	sp, #116	@ 0x74
 8006178:	4607      	mov	r7, r0
 800617a:	460d      	mov	r5, r1
 800617c:	4614      	mov	r4, r2
 800617e:	d510      	bpl.n	80061a2 <_svfiprintf_r+0x36>
 8006180:	690b      	ldr	r3, [r1, #16]
 8006182:	b973      	cbnz	r3, 80061a2 <_svfiprintf_r+0x36>
 8006184:	2140      	movs	r1, #64	@ 0x40
 8006186:	f7ff ff09 	bl	8005f9c <_malloc_r>
 800618a:	6028      	str	r0, [r5, #0]
 800618c:	6128      	str	r0, [r5, #16]
 800618e:	b930      	cbnz	r0, 800619e <_svfiprintf_r+0x32>
 8006190:	230c      	movs	r3, #12
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006198:	b01d      	add	sp, #116	@ 0x74
 800619a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619e:	2340      	movs	r3, #64	@ 0x40
 80061a0:	616b      	str	r3, [r5, #20]
 80061a2:	2300      	movs	r3, #0
 80061a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80061a6:	2320      	movs	r3, #32
 80061a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80061b0:	2330      	movs	r3, #48	@ 0x30
 80061b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006350 <_svfiprintf_r+0x1e4>
 80061b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061ba:	f04f 0901 	mov.w	r9, #1
 80061be:	4623      	mov	r3, r4
 80061c0:	469a      	mov	sl, r3
 80061c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061c6:	b10a      	cbz	r2, 80061cc <_svfiprintf_r+0x60>
 80061c8:	2a25      	cmp	r2, #37	@ 0x25
 80061ca:	d1f9      	bne.n	80061c0 <_svfiprintf_r+0x54>
 80061cc:	ebba 0b04 	subs.w	fp, sl, r4
 80061d0:	d00b      	beq.n	80061ea <_svfiprintf_r+0x7e>
 80061d2:	465b      	mov	r3, fp
 80061d4:	4622      	mov	r2, r4
 80061d6:	4629      	mov	r1, r5
 80061d8:	4638      	mov	r0, r7
 80061da:	f7ff ff6b 	bl	80060b4 <__ssputs_r>
 80061de:	3001      	adds	r0, #1
 80061e0:	f000 80a7 	beq.w	8006332 <_svfiprintf_r+0x1c6>
 80061e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061e6:	445a      	add	r2, fp
 80061e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80061ea:	f89a 3000 	ldrb.w	r3, [sl]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 809f 	beq.w	8006332 <_svfiprintf_r+0x1c6>
 80061f4:	2300      	movs	r3, #0
 80061f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061fe:	f10a 0a01 	add.w	sl, sl, #1
 8006202:	9304      	str	r3, [sp, #16]
 8006204:	9307      	str	r3, [sp, #28]
 8006206:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800620a:	931a      	str	r3, [sp, #104]	@ 0x68
 800620c:	4654      	mov	r4, sl
 800620e:	2205      	movs	r2, #5
 8006210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006214:	484e      	ldr	r0, [pc, #312]	@ (8006350 <_svfiprintf_r+0x1e4>)
 8006216:	f7f9 ffdb 	bl	80001d0 <memchr>
 800621a:	9a04      	ldr	r2, [sp, #16]
 800621c:	b9d8      	cbnz	r0, 8006256 <_svfiprintf_r+0xea>
 800621e:	06d0      	lsls	r0, r2, #27
 8006220:	bf44      	itt	mi
 8006222:	2320      	movmi	r3, #32
 8006224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006228:	0711      	lsls	r1, r2, #28
 800622a:	bf44      	itt	mi
 800622c:	232b      	movmi	r3, #43	@ 0x2b
 800622e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006232:	f89a 3000 	ldrb.w	r3, [sl]
 8006236:	2b2a      	cmp	r3, #42	@ 0x2a
 8006238:	d015      	beq.n	8006266 <_svfiprintf_r+0xfa>
 800623a:	9a07      	ldr	r2, [sp, #28]
 800623c:	4654      	mov	r4, sl
 800623e:	2000      	movs	r0, #0
 8006240:	f04f 0c0a 	mov.w	ip, #10
 8006244:	4621      	mov	r1, r4
 8006246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800624a:	3b30      	subs	r3, #48	@ 0x30
 800624c:	2b09      	cmp	r3, #9
 800624e:	d94b      	bls.n	80062e8 <_svfiprintf_r+0x17c>
 8006250:	b1b0      	cbz	r0, 8006280 <_svfiprintf_r+0x114>
 8006252:	9207      	str	r2, [sp, #28]
 8006254:	e014      	b.n	8006280 <_svfiprintf_r+0x114>
 8006256:	eba0 0308 	sub.w	r3, r0, r8
 800625a:	fa09 f303 	lsl.w	r3, r9, r3
 800625e:	4313      	orrs	r3, r2
 8006260:	9304      	str	r3, [sp, #16]
 8006262:	46a2      	mov	sl, r4
 8006264:	e7d2      	b.n	800620c <_svfiprintf_r+0xa0>
 8006266:	9b03      	ldr	r3, [sp, #12]
 8006268:	1d19      	adds	r1, r3, #4
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	9103      	str	r1, [sp, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	bfbb      	ittet	lt
 8006272:	425b      	neglt	r3, r3
 8006274:	f042 0202 	orrlt.w	r2, r2, #2
 8006278:	9307      	strge	r3, [sp, #28]
 800627a:	9307      	strlt	r3, [sp, #28]
 800627c:	bfb8      	it	lt
 800627e:	9204      	strlt	r2, [sp, #16]
 8006280:	7823      	ldrb	r3, [r4, #0]
 8006282:	2b2e      	cmp	r3, #46	@ 0x2e
 8006284:	d10a      	bne.n	800629c <_svfiprintf_r+0x130>
 8006286:	7863      	ldrb	r3, [r4, #1]
 8006288:	2b2a      	cmp	r3, #42	@ 0x2a
 800628a:	d132      	bne.n	80062f2 <_svfiprintf_r+0x186>
 800628c:	9b03      	ldr	r3, [sp, #12]
 800628e:	1d1a      	adds	r2, r3, #4
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	9203      	str	r2, [sp, #12]
 8006294:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006298:	3402      	adds	r4, #2
 800629a:	9305      	str	r3, [sp, #20]
 800629c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006360 <_svfiprintf_r+0x1f4>
 80062a0:	7821      	ldrb	r1, [r4, #0]
 80062a2:	2203      	movs	r2, #3
 80062a4:	4650      	mov	r0, sl
 80062a6:	f7f9 ff93 	bl	80001d0 <memchr>
 80062aa:	b138      	cbz	r0, 80062bc <_svfiprintf_r+0x150>
 80062ac:	9b04      	ldr	r3, [sp, #16]
 80062ae:	eba0 000a 	sub.w	r0, r0, sl
 80062b2:	2240      	movs	r2, #64	@ 0x40
 80062b4:	4082      	lsls	r2, r0
 80062b6:	4313      	orrs	r3, r2
 80062b8:	3401      	adds	r4, #1
 80062ba:	9304      	str	r3, [sp, #16]
 80062bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c0:	4824      	ldr	r0, [pc, #144]	@ (8006354 <_svfiprintf_r+0x1e8>)
 80062c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062c6:	2206      	movs	r2, #6
 80062c8:	f7f9 ff82 	bl	80001d0 <memchr>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d036      	beq.n	800633e <_svfiprintf_r+0x1d2>
 80062d0:	4b21      	ldr	r3, [pc, #132]	@ (8006358 <_svfiprintf_r+0x1ec>)
 80062d2:	bb1b      	cbnz	r3, 800631c <_svfiprintf_r+0x1b0>
 80062d4:	9b03      	ldr	r3, [sp, #12]
 80062d6:	3307      	adds	r3, #7
 80062d8:	f023 0307 	bic.w	r3, r3, #7
 80062dc:	3308      	adds	r3, #8
 80062de:	9303      	str	r3, [sp, #12]
 80062e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e2:	4433      	add	r3, r6
 80062e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062e6:	e76a      	b.n	80061be <_svfiprintf_r+0x52>
 80062e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80062ec:	460c      	mov	r4, r1
 80062ee:	2001      	movs	r0, #1
 80062f0:	e7a8      	b.n	8006244 <_svfiprintf_r+0xd8>
 80062f2:	2300      	movs	r3, #0
 80062f4:	3401      	adds	r4, #1
 80062f6:	9305      	str	r3, [sp, #20]
 80062f8:	4619      	mov	r1, r3
 80062fa:	f04f 0c0a 	mov.w	ip, #10
 80062fe:	4620      	mov	r0, r4
 8006300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006304:	3a30      	subs	r2, #48	@ 0x30
 8006306:	2a09      	cmp	r2, #9
 8006308:	d903      	bls.n	8006312 <_svfiprintf_r+0x1a6>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d0c6      	beq.n	800629c <_svfiprintf_r+0x130>
 800630e:	9105      	str	r1, [sp, #20]
 8006310:	e7c4      	b.n	800629c <_svfiprintf_r+0x130>
 8006312:	fb0c 2101 	mla	r1, ip, r1, r2
 8006316:	4604      	mov	r4, r0
 8006318:	2301      	movs	r3, #1
 800631a:	e7f0      	b.n	80062fe <_svfiprintf_r+0x192>
 800631c:	ab03      	add	r3, sp, #12
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	462a      	mov	r2, r5
 8006322:	4b0e      	ldr	r3, [pc, #56]	@ (800635c <_svfiprintf_r+0x1f0>)
 8006324:	a904      	add	r1, sp, #16
 8006326:	4638      	mov	r0, r7
 8006328:	f3af 8000 	nop.w
 800632c:	1c42      	adds	r2, r0, #1
 800632e:	4606      	mov	r6, r0
 8006330:	d1d6      	bne.n	80062e0 <_svfiprintf_r+0x174>
 8006332:	89ab      	ldrh	r3, [r5, #12]
 8006334:	065b      	lsls	r3, r3, #25
 8006336:	f53f af2d 	bmi.w	8006194 <_svfiprintf_r+0x28>
 800633a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800633c:	e72c      	b.n	8006198 <_svfiprintf_r+0x2c>
 800633e:	ab03      	add	r3, sp, #12
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	462a      	mov	r2, r5
 8006344:	4b05      	ldr	r3, [pc, #20]	@ (800635c <_svfiprintf_r+0x1f0>)
 8006346:	a904      	add	r1, sp, #16
 8006348:	4638      	mov	r0, r7
 800634a:	f000 f879 	bl	8006440 <_printf_i>
 800634e:	e7ed      	b.n	800632c <_svfiprintf_r+0x1c0>
 8006350:	08006b34 	.word	0x08006b34
 8006354:	08006b3e 	.word	0x08006b3e
 8006358:	00000000 	.word	0x00000000
 800635c:	080060b5 	.word	0x080060b5
 8006360:	08006b3a 	.word	0x08006b3a

08006364 <_printf_common>:
 8006364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006368:	4616      	mov	r6, r2
 800636a:	4698      	mov	r8, r3
 800636c:	688a      	ldr	r2, [r1, #8]
 800636e:	690b      	ldr	r3, [r1, #16]
 8006370:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006374:	4293      	cmp	r3, r2
 8006376:	bfb8      	it	lt
 8006378:	4613      	movlt	r3, r2
 800637a:	6033      	str	r3, [r6, #0]
 800637c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006380:	4607      	mov	r7, r0
 8006382:	460c      	mov	r4, r1
 8006384:	b10a      	cbz	r2, 800638a <_printf_common+0x26>
 8006386:	3301      	adds	r3, #1
 8006388:	6033      	str	r3, [r6, #0]
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	0699      	lsls	r1, r3, #26
 800638e:	bf42      	ittt	mi
 8006390:	6833      	ldrmi	r3, [r6, #0]
 8006392:	3302      	addmi	r3, #2
 8006394:	6033      	strmi	r3, [r6, #0]
 8006396:	6825      	ldr	r5, [r4, #0]
 8006398:	f015 0506 	ands.w	r5, r5, #6
 800639c:	d106      	bne.n	80063ac <_printf_common+0x48>
 800639e:	f104 0a19 	add.w	sl, r4, #25
 80063a2:	68e3      	ldr	r3, [r4, #12]
 80063a4:	6832      	ldr	r2, [r6, #0]
 80063a6:	1a9b      	subs	r3, r3, r2
 80063a8:	42ab      	cmp	r3, r5
 80063aa:	dc26      	bgt.n	80063fa <_printf_common+0x96>
 80063ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063b0:	6822      	ldr	r2, [r4, #0]
 80063b2:	3b00      	subs	r3, #0
 80063b4:	bf18      	it	ne
 80063b6:	2301      	movne	r3, #1
 80063b8:	0692      	lsls	r2, r2, #26
 80063ba:	d42b      	bmi.n	8006414 <_printf_common+0xb0>
 80063bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063c0:	4641      	mov	r1, r8
 80063c2:	4638      	mov	r0, r7
 80063c4:	47c8      	blx	r9
 80063c6:	3001      	adds	r0, #1
 80063c8:	d01e      	beq.n	8006408 <_printf_common+0xa4>
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	6922      	ldr	r2, [r4, #16]
 80063ce:	f003 0306 	and.w	r3, r3, #6
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	bf02      	ittt	eq
 80063d6:	68e5      	ldreq	r5, [r4, #12]
 80063d8:	6833      	ldreq	r3, [r6, #0]
 80063da:	1aed      	subeq	r5, r5, r3
 80063dc:	68a3      	ldr	r3, [r4, #8]
 80063de:	bf0c      	ite	eq
 80063e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063e4:	2500      	movne	r5, #0
 80063e6:	4293      	cmp	r3, r2
 80063e8:	bfc4      	itt	gt
 80063ea:	1a9b      	subgt	r3, r3, r2
 80063ec:	18ed      	addgt	r5, r5, r3
 80063ee:	2600      	movs	r6, #0
 80063f0:	341a      	adds	r4, #26
 80063f2:	42b5      	cmp	r5, r6
 80063f4:	d11a      	bne.n	800642c <_printf_common+0xc8>
 80063f6:	2000      	movs	r0, #0
 80063f8:	e008      	b.n	800640c <_printf_common+0xa8>
 80063fa:	2301      	movs	r3, #1
 80063fc:	4652      	mov	r2, sl
 80063fe:	4641      	mov	r1, r8
 8006400:	4638      	mov	r0, r7
 8006402:	47c8      	blx	r9
 8006404:	3001      	adds	r0, #1
 8006406:	d103      	bne.n	8006410 <_printf_common+0xac>
 8006408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800640c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006410:	3501      	adds	r5, #1
 8006412:	e7c6      	b.n	80063a2 <_printf_common+0x3e>
 8006414:	18e1      	adds	r1, r4, r3
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	2030      	movs	r0, #48	@ 0x30
 800641a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800641e:	4422      	add	r2, r4
 8006420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006424:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006428:	3302      	adds	r3, #2
 800642a:	e7c7      	b.n	80063bc <_printf_common+0x58>
 800642c:	2301      	movs	r3, #1
 800642e:	4622      	mov	r2, r4
 8006430:	4641      	mov	r1, r8
 8006432:	4638      	mov	r0, r7
 8006434:	47c8      	blx	r9
 8006436:	3001      	adds	r0, #1
 8006438:	d0e6      	beq.n	8006408 <_printf_common+0xa4>
 800643a:	3601      	adds	r6, #1
 800643c:	e7d9      	b.n	80063f2 <_printf_common+0x8e>
	...

08006440 <_printf_i>:
 8006440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006444:	7e0f      	ldrb	r7, [r1, #24]
 8006446:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006448:	2f78      	cmp	r7, #120	@ 0x78
 800644a:	4691      	mov	r9, r2
 800644c:	4680      	mov	r8, r0
 800644e:	460c      	mov	r4, r1
 8006450:	469a      	mov	sl, r3
 8006452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006456:	d807      	bhi.n	8006468 <_printf_i+0x28>
 8006458:	2f62      	cmp	r7, #98	@ 0x62
 800645a:	d80a      	bhi.n	8006472 <_printf_i+0x32>
 800645c:	2f00      	cmp	r7, #0
 800645e:	f000 80d1 	beq.w	8006604 <_printf_i+0x1c4>
 8006462:	2f58      	cmp	r7, #88	@ 0x58
 8006464:	f000 80b8 	beq.w	80065d8 <_printf_i+0x198>
 8006468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800646c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006470:	e03a      	b.n	80064e8 <_printf_i+0xa8>
 8006472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006476:	2b15      	cmp	r3, #21
 8006478:	d8f6      	bhi.n	8006468 <_printf_i+0x28>
 800647a:	a101      	add	r1, pc, #4	@ (adr r1, 8006480 <_printf_i+0x40>)
 800647c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006480:	080064d9 	.word	0x080064d9
 8006484:	080064ed 	.word	0x080064ed
 8006488:	08006469 	.word	0x08006469
 800648c:	08006469 	.word	0x08006469
 8006490:	08006469 	.word	0x08006469
 8006494:	08006469 	.word	0x08006469
 8006498:	080064ed 	.word	0x080064ed
 800649c:	08006469 	.word	0x08006469
 80064a0:	08006469 	.word	0x08006469
 80064a4:	08006469 	.word	0x08006469
 80064a8:	08006469 	.word	0x08006469
 80064ac:	080065eb 	.word	0x080065eb
 80064b0:	08006517 	.word	0x08006517
 80064b4:	080065a5 	.word	0x080065a5
 80064b8:	08006469 	.word	0x08006469
 80064bc:	08006469 	.word	0x08006469
 80064c0:	0800660d 	.word	0x0800660d
 80064c4:	08006469 	.word	0x08006469
 80064c8:	08006517 	.word	0x08006517
 80064cc:	08006469 	.word	0x08006469
 80064d0:	08006469 	.word	0x08006469
 80064d4:	080065ad 	.word	0x080065ad
 80064d8:	6833      	ldr	r3, [r6, #0]
 80064da:	1d1a      	adds	r2, r3, #4
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6032      	str	r2, [r6, #0]
 80064e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064e8:	2301      	movs	r3, #1
 80064ea:	e09c      	b.n	8006626 <_printf_i+0x1e6>
 80064ec:	6833      	ldr	r3, [r6, #0]
 80064ee:	6820      	ldr	r0, [r4, #0]
 80064f0:	1d19      	adds	r1, r3, #4
 80064f2:	6031      	str	r1, [r6, #0]
 80064f4:	0606      	lsls	r6, r0, #24
 80064f6:	d501      	bpl.n	80064fc <_printf_i+0xbc>
 80064f8:	681d      	ldr	r5, [r3, #0]
 80064fa:	e003      	b.n	8006504 <_printf_i+0xc4>
 80064fc:	0645      	lsls	r5, r0, #25
 80064fe:	d5fb      	bpl.n	80064f8 <_printf_i+0xb8>
 8006500:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006504:	2d00      	cmp	r5, #0
 8006506:	da03      	bge.n	8006510 <_printf_i+0xd0>
 8006508:	232d      	movs	r3, #45	@ 0x2d
 800650a:	426d      	negs	r5, r5
 800650c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006510:	4858      	ldr	r0, [pc, #352]	@ (8006674 <_printf_i+0x234>)
 8006512:	230a      	movs	r3, #10
 8006514:	e011      	b.n	800653a <_printf_i+0xfa>
 8006516:	6821      	ldr	r1, [r4, #0]
 8006518:	6833      	ldr	r3, [r6, #0]
 800651a:	0608      	lsls	r0, r1, #24
 800651c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006520:	d402      	bmi.n	8006528 <_printf_i+0xe8>
 8006522:	0649      	lsls	r1, r1, #25
 8006524:	bf48      	it	mi
 8006526:	b2ad      	uxthmi	r5, r5
 8006528:	2f6f      	cmp	r7, #111	@ 0x6f
 800652a:	4852      	ldr	r0, [pc, #328]	@ (8006674 <_printf_i+0x234>)
 800652c:	6033      	str	r3, [r6, #0]
 800652e:	bf14      	ite	ne
 8006530:	230a      	movne	r3, #10
 8006532:	2308      	moveq	r3, #8
 8006534:	2100      	movs	r1, #0
 8006536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800653a:	6866      	ldr	r6, [r4, #4]
 800653c:	60a6      	str	r6, [r4, #8]
 800653e:	2e00      	cmp	r6, #0
 8006540:	db05      	blt.n	800654e <_printf_i+0x10e>
 8006542:	6821      	ldr	r1, [r4, #0]
 8006544:	432e      	orrs	r6, r5
 8006546:	f021 0104 	bic.w	r1, r1, #4
 800654a:	6021      	str	r1, [r4, #0]
 800654c:	d04b      	beq.n	80065e6 <_printf_i+0x1a6>
 800654e:	4616      	mov	r6, r2
 8006550:	fbb5 f1f3 	udiv	r1, r5, r3
 8006554:	fb03 5711 	mls	r7, r3, r1, r5
 8006558:	5dc7      	ldrb	r7, [r0, r7]
 800655a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800655e:	462f      	mov	r7, r5
 8006560:	42bb      	cmp	r3, r7
 8006562:	460d      	mov	r5, r1
 8006564:	d9f4      	bls.n	8006550 <_printf_i+0x110>
 8006566:	2b08      	cmp	r3, #8
 8006568:	d10b      	bne.n	8006582 <_printf_i+0x142>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	07df      	lsls	r7, r3, #31
 800656e:	d508      	bpl.n	8006582 <_printf_i+0x142>
 8006570:	6923      	ldr	r3, [r4, #16]
 8006572:	6861      	ldr	r1, [r4, #4]
 8006574:	4299      	cmp	r1, r3
 8006576:	bfde      	ittt	le
 8006578:	2330      	movle	r3, #48	@ 0x30
 800657a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800657e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006582:	1b92      	subs	r2, r2, r6
 8006584:	6122      	str	r2, [r4, #16]
 8006586:	f8cd a000 	str.w	sl, [sp]
 800658a:	464b      	mov	r3, r9
 800658c:	aa03      	add	r2, sp, #12
 800658e:	4621      	mov	r1, r4
 8006590:	4640      	mov	r0, r8
 8006592:	f7ff fee7 	bl	8006364 <_printf_common>
 8006596:	3001      	adds	r0, #1
 8006598:	d14a      	bne.n	8006630 <_printf_i+0x1f0>
 800659a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800659e:	b004      	add	sp, #16
 80065a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	f043 0320 	orr.w	r3, r3, #32
 80065aa:	6023      	str	r3, [r4, #0]
 80065ac:	4832      	ldr	r0, [pc, #200]	@ (8006678 <_printf_i+0x238>)
 80065ae:	2778      	movs	r7, #120	@ 0x78
 80065b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	6831      	ldr	r1, [r6, #0]
 80065b8:	061f      	lsls	r7, r3, #24
 80065ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80065be:	d402      	bmi.n	80065c6 <_printf_i+0x186>
 80065c0:	065f      	lsls	r7, r3, #25
 80065c2:	bf48      	it	mi
 80065c4:	b2ad      	uxthmi	r5, r5
 80065c6:	6031      	str	r1, [r6, #0]
 80065c8:	07d9      	lsls	r1, r3, #31
 80065ca:	bf44      	itt	mi
 80065cc:	f043 0320 	orrmi.w	r3, r3, #32
 80065d0:	6023      	strmi	r3, [r4, #0]
 80065d2:	b11d      	cbz	r5, 80065dc <_printf_i+0x19c>
 80065d4:	2310      	movs	r3, #16
 80065d6:	e7ad      	b.n	8006534 <_printf_i+0xf4>
 80065d8:	4826      	ldr	r0, [pc, #152]	@ (8006674 <_printf_i+0x234>)
 80065da:	e7e9      	b.n	80065b0 <_printf_i+0x170>
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	f023 0320 	bic.w	r3, r3, #32
 80065e2:	6023      	str	r3, [r4, #0]
 80065e4:	e7f6      	b.n	80065d4 <_printf_i+0x194>
 80065e6:	4616      	mov	r6, r2
 80065e8:	e7bd      	b.n	8006566 <_printf_i+0x126>
 80065ea:	6833      	ldr	r3, [r6, #0]
 80065ec:	6825      	ldr	r5, [r4, #0]
 80065ee:	6961      	ldr	r1, [r4, #20]
 80065f0:	1d18      	adds	r0, r3, #4
 80065f2:	6030      	str	r0, [r6, #0]
 80065f4:	062e      	lsls	r6, r5, #24
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	d501      	bpl.n	80065fe <_printf_i+0x1be>
 80065fa:	6019      	str	r1, [r3, #0]
 80065fc:	e002      	b.n	8006604 <_printf_i+0x1c4>
 80065fe:	0668      	lsls	r0, r5, #25
 8006600:	d5fb      	bpl.n	80065fa <_printf_i+0x1ba>
 8006602:	8019      	strh	r1, [r3, #0]
 8006604:	2300      	movs	r3, #0
 8006606:	6123      	str	r3, [r4, #16]
 8006608:	4616      	mov	r6, r2
 800660a:	e7bc      	b.n	8006586 <_printf_i+0x146>
 800660c:	6833      	ldr	r3, [r6, #0]
 800660e:	1d1a      	adds	r2, r3, #4
 8006610:	6032      	str	r2, [r6, #0]
 8006612:	681e      	ldr	r6, [r3, #0]
 8006614:	6862      	ldr	r2, [r4, #4]
 8006616:	2100      	movs	r1, #0
 8006618:	4630      	mov	r0, r6
 800661a:	f7f9 fdd9 	bl	80001d0 <memchr>
 800661e:	b108      	cbz	r0, 8006624 <_printf_i+0x1e4>
 8006620:	1b80      	subs	r0, r0, r6
 8006622:	6060      	str	r0, [r4, #4]
 8006624:	6863      	ldr	r3, [r4, #4]
 8006626:	6123      	str	r3, [r4, #16]
 8006628:	2300      	movs	r3, #0
 800662a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800662e:	e7aa      	b.n	8006586 <_printf_i+0x146>
 8006630:	6923      	ldr	r3, [r4, #16]
 8006632:	4632      	mov	r2, r6
 8006634:	4649      	mov	r1, r9
 8006636:	4640      	mov	r0, r8
 8006638:	47d0      	blx	sl
 800663a:	3001      	adds	r0, #1
 800663c:	d0ad      	beq.n	800659a <_printf_i+0x15a>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	079b      	lsls	r3, r3, #30
 8006642:	d413      	bmi.n	800666c <_printf_i+0x22c>
 8006644:	68e0      	ldr	r0, [r4, #12]
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	4298      	cmp	r0, r3
 800664a:	bfb8      	it	lt
 800664c:	4618      	movlt	r0, r3
 800664e:	e7a6      	b.n	800659e <_printf_i+0x15e>
 8006650:	2301      	movs	r3, #1
 8006652:	4632      	mov	r2, r6
 8006654:	4649      	mov	r1, r9
 8006656:	4640      	mov	r0, r8
 8006658:	47d0      	blx	sl
 800665a:	3001      	adds	r0, #1
 800665c:	d09d      	beq.n	800659a <_printf_i+0x15a>
 800665e:	3501      	adds	r5, #1
 8006660:	68e3      	ldr	r3, [r4, #12]
 8006662:	9903      	ldr	r1, [sp, #12]
 8006664:	1a5b      	subs	r3, r3, r1
 8006666:	42ab      	cmp	r3, r5
 8006668:	dcf2      	bgt.n	8006650 <_printf_i+0x210>
 800666a:	e7eb      	b.n	8006644 <_printf_i+0x204>
 800666c:	2500      	movs	r5, #0
 800666e:	f104 0619 	add.w	r6, r4, #25
 8006672:	e7f5      	b.n	8006660 <_printf_i+0x220>
 8006674:	08006b45 	.word	0x08006b45
 8006678:	08006b56 	.word	0x08006b56

0800667c <__sflush_r>:
 800667c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006684:	0716      	lsls	r6, r2, #28
 8006686:	4605      	mov	r5, r0
 8006688:	460c      	mov	r4, r1
 800668a:	d454      	bmi.n	8006736 <__sflush_r+0xba>
 800668c:	684b      	ldr	r3, [r1, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	dc02      	bgt.n	8006698 <__sflush_r+0x1c>
 8006692:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	dd48      	ble.n	800672a <__sflush_r+0xae>
 8006698:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800669a:	2e00      	cmp	r6, #0
 800669c:	d045      	beq.n	800672a <__sflush_r+0xae>
 800669e:	2300      	movs	r3, #0
 80066a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80066a4:	682f      	ldr	r7, [r5, #0]
 80066a6:	6a21      	ldr	r1, [r4, #32]
 80066a8:	602b      	str	r3, [r5, #0]
 80066aa:	d030      	beq.n	800670e <__sflush_r+0x92>
 80066ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	0759      	lsls	r1, r3, #29
 80066b2:	d505      	bpl.n	80066c0 <__sflush_r+0x44>
 80066b4:	6863      	ldr	r3, [r4, #4]
 80066b6:	1ad2      	subs	r2, r2, r3
 80066b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80066ba:	b10b      	cbz	r3, 80066c0 <__sflush_r+0x44>
 80066bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80066be:	1ad2      	subs	r2, r2, r3
 80066c0:	2300      	movs	r3, #0
 80066c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066c4:	6a21      	ldr	r1, [r4, #32]
 80066c6:	4628      	mov	r0, r5
 80066c8:	47b0      	blx	r6
 80066ca:	1c43      	adds	r3, r0, #1
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	d106      	bne.n	80066de <__sflush_r+0x62>
 80066d0:	6829      	ldr	r1, [r5, #0]
 80066d2:	291d      	cmp	r1, #29
 80066d4:	d82b      	bhi.n	800672e <__sflush_r+0xb2>
 80066d6:	4a2a      	ldr	r2, [pc, #168]	@ (8006780 <__sflush_r+0x104>)
 80066d8:	40ca      	lsrs	r2, r1
 80066da:	07d6      	lsls	r6, r2, #31
 80066dc:	d527      	bpl.n	800672e <__sflush_r+0xb2>
 80066de:	2200      	movs	r2, #0
 80066e0:	6062      	str	r2, [r4, #4]
 80066e2:	04d9      	lsls	r1, r3, #19
 80066e4:	6922      	ldr	r2, [r4, #16]
 80066e6:	6022      	str	r2, [r4, #0]
 80066e8:	d504      	bpl.n	80066f4 <__sflush_r+0x78>
 80066ea:	1c42      	adds	r2, r0, #1
 80066ec:	d101      	bne.n	80066f2 <__sflush_r+0x76>
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	b903      	cbnz	r3, 80066f4 <__sflush_r+0x78>
 80066f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80066f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066f6:	602f      	str	r7, [r5, #0]
 80066f8:	b1b9      	cbz	r1, 800672a <__sflush_r+0xae>
 80066fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066fe:	4299      	cmp	r1, r3
 8006700:	d002      	beq.n	8006708 <__sflush_r+0x8c>
 8006702:	4628      	mov	r0, r5
 8006704:	f7ff fbde 	bl	8005ec4 <_free_r>
 8006708:	2300      	movs	r3, #0
 800670a:	6363      	str	r3, [r4, #52]	@ 0x34
 800670c:	e00d      	b.n	800672a <__sflush_r+0xae>
 800670e:	2301      	movs	r3, #1
 8006710:	4628      	mov	r0, r5
 8006712:	47b0      	blx	r6
 8006714:	4602      	mov	r2, r0
 8006716:	1c50      	adds	r0, r2, #1
 8006718:	d1c9      	bne.n	80066ae <__sflush_r+0x32>
 800671a:	682b      	ldr	r3, [r5, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0c6      	beq.n	80066ae <__sflush_r+0x32>
 8006720:	2b1d      	cmp	r3, #29
 8006722:	d001      	beq.n	8006728 <__sflush_r+0xac>
 8006724:	2b16      	cmp	r3, #22
 8006726:	d11e      	bne.n	8006766 <__sflush_r+0xea>
 8006728:	602f      	str	r7, [r5, #0]
 800672a:	2000      	movs	r0, #0
 800672c:	e022      	b.n	8006774 <__sflush_r+0xf8>
 800672e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006732:	b21b      	sxth	r3, r3
 8006734:	e01b      	b.n	800676e <__sflush_r+0xf2>
 8006736:	690f      	ldr	r7, [r1, #16]
 8006738:	2f00      	cmp	r7, #0
 800673a:	d0f6      	beq.n	800672a <__sflush_r+0xae>
 800673c:	0793      	lsls	r3, r2, #30
 800673e:	680e      	ldr	r6, [r1, #0]
 8006740:	bf08      	it	eq
 8006742:	694b      	ldreq	r3, [r1, #20]
 8006744:	600f      	str	r7, [r1, #0]
 8006746:	bf18      	it	ne
 8006748:	2300      	movne	r3, #0
 800674a:	eba6 0807 	sub.w	r8, r6, r7
 800674e:	608b      	str	r3, [r1, #8]
 8006750:	f1b8 0f00 	cmp.w	r8, #0
 8006754:	dde9      	ble.n	800672a <__sflush_r+0xae>
 8006756:	6a21      	ldr	r1, [r4, #32]
 8006758:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800675a:	4643      	mov	r3, r8
 800675c:	463a      	mov	r2, r7
 800675e:	4628      	mov	r0, r5
 8006760:	47b0      	blx	r6
 8006762:	2800      	cmp	r0, #0
 8006764:	dc08      	bgt.n	8006778 <__sflush_r+0xfc>
 8006766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800676a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800676e:	81a3      	strh	r3, [r4, #12]
 8006770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006778:	4407      	add	r7, r0
 800677a:	eba8 0800 	sub.w	r8, r8, r0
 800677e:	e7e7      	b.n	8006750 <__sflush_r+0xd4>
 8006780:	20400001 	.word	0x20400001

08006784 <_fflush_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	690b      	ldr	r3, [r1, #16]
 8006788:	4605      	mov	r5, r0
 800678a:	460c      	mov	r4, r1
 800678c:	b913      	cbnz	r3, 8006794 <_fflush_r+0x10>
 800678e:	2500      	movs	r5, #0
 8006790:	4628      	mov	r0, r5
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	b118      	cbz	r0, 800679e <_fflush_r+0x1a>
 8006796:	6a03      	ldr	r3, [r0, #32]
 8006798:	b90b      	cbnz	r3, 800679e <_fflush_r+0x1a>
 800679a:	f7ff f909 	bl	80059b0 <__sinit>
 800679e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f3      	beq.n	800678e <_fflush_r+0xa>
 80067a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80067a8:	07d0      	lsls	r0, r2, #31
 80067aa:	d404      	bmi.n	80067b6 <_fflush_r+0x32>
 80067ac:	0599      	lsls	r1, r3, #22
 80067ae:	d402      	bmi.n	80067b6 <_fflush_r+0x32>
 80067b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067b2:	f7ff fb76 	bl	8005ea2 <__retarget_lock_acquire_recursive>
 80067b6:	4628      	mov	r0, r5
 80067b8:	4621      	mov	r1, r4
 80067ba:	f7ff ff5f 	bl	800667c <__sflush_r>
 80067be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067c0:	07da      	lsls	r2, r3, #31
 80067c2:	4605      	mov	r5, r0
 80067c4:	d4e4      	bmi.n	8006790 <_fflush_r+0xc>
 80067c6:	89a3      	ldrh	r3, [r4, #12]
 80067c8:	059b      	lsls	r3, r3, #22
 80067ca:	d4e1      	bmi.n	8006790 <_fflush_r+0xc>
 80067cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067ce:	f7ff fb69 	bl	8005ea4 <__retarget_lock_release_recursive>
 80067d2:	e7dd      	b.n	8006790 <_fflush_r+0xc>

080067d4 <__swhatbuf_r>:
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	460c      	mov	r4, r1
 80067d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067dc:	2900      	cmp	r1, #0
 80067de:	b096      	sub	sp, #88	@ 0x58
 80067e0:	4615      	mov	r5, r2
 80067e2:	461e      	mov	r6, r3
 80067e4:	da0d      	bge.n	8006802 <__swhatbuf_r+0x2e>
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80067ec:	f04f 0100 	mov.w	r1, #0
 80067f0:	bf14      	ite	ne
 80067f2:	2340      	movne	r3, #64	@ 0x40
 80067f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80067f8:	2000      	movs	r0, #0
 80067fa:	6031      	str	r1, [r6, #0]
 80067fc:	602b      	str	r3, [r5, #0]
 80067fe:	b016      	add	sp, #88	@ 0x58
 8006800:	bd70      	pop	{r4, r5, r6, pc}
 8006802:	466a      	mov	r2, sp
 8006804:	f000 f862 	bl	80068cc <_fstat_r>
 8006808:	2800      	cmp	r0, #0
 800680a:	dbec      	blt.n	80067e6 <__swhatbuf_r+0x12>
 800680c:	9901      	ldr	r1, [sp, #4]
 800680e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006812:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006816:	4259      	negs	r1, r3
 8006818:	4159      	adcs	r1, r3
 800681a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800681e:	e7eb      	b.n	80067f8 <__swhatbuf_r+0x24>

08006820 <__smakebuf_r>:
 8006820:	898b      	ldrh	r3, [r1, #12]
 8006822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006824:	079d      	lsls	r5, r3, #30
 8006826:	4606      	mov	r6, r0
 8006828:	460c      	mov	r4, r1
 800682a:	d507      	bpl.n	800683c <__smakebuf_r+0x1c>
 800682c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	6123      	str	r3, [r4, #16]
 8006834:	2301      	movs	r3, #1
 8006836:	6163      	str	r3, [r4, #20]
 8006838:	b003      	add	sp, #12
 800683a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800683c:	ab01      	add	r3, sp, #4
 800683e:	466a      	mov	r2, sp
 8006840:	f7ff ffc8 	bl	80067d4 <__swhatbuf_r>
 8006844:	9f00      	ldr	r7, [sp, #0]
 8006846:	4605      	mov	r5, r0
 8006848:	4639      	mov	r1, r7
 800684a:	4630      	mov	r0, r6
 800684c:	f7ff fba6 	bl	8005f9c <_malloc_r>
 8006850:	b948      	cbnz	r0, 8006866 <__smakebuf_r+0x46>
 8006852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006856:	059a      	lsls	r2, r3, #22
 8006858:	d4ee      	bmi.n	8006838 <__smakebuf_r+0x18>
 800685a:	f023 0303 	bic.w	r3, r3, #3
 800685e:	f043 0302 	orr.w	r3, r3, #2
 8006862:	81a3      	strh	r3, [r4, #12]
 8006864:	e7e2      	b.n	800682c <__smakebuf_r+0xc>
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	6020      	str	r0, [r4, #0]
 800686a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800686e:	81a3      	strh	r3, [r4, #12]
 8006870:	9b01      	ldr	r3, [sp, #4]
 8006872:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006876:	b15b      	cbz	r3, 8006890 <__smakebuf_r+0x70>
 8006878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800687c:	4630      	mov	r0, r6
 800687e:	f000 f837 	bl	80068f0 <_isatty_r>
 8006882:	b128      	cbz	r0, 8006890 <__smakebuf_r+0x70>
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	f023 0303 	bic.w	r3, r3, #3
 800688a:	f043 0301 	orr.w	r3, r3, #1
 800688e:	81a3      	strh	r3, [r4, #12]
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	431d      	orrs	r5, r3
 8006894:	81a5      	strh	r5, [r4, #12]
 8006896:	e7cf      	b.n	8006838 <__smakebuf_r+0x18>

08006898 <memmove>:
 8006898:	4288      	cmp	r0, r1
 800689a:	b510      	push	{r4, lr}
 800689c:	eb01 0402 	add.w	r4, r1, r2
 80068a0:	d902      	bls.n	80068a8 <memmove+0x10>
 80068a2:	4284      	cmp	r4, r0
 80068a4:	4623      	mov	r3, r4
 80068a6:	d807      	bhi.n	80068b8 <memmove+0x20>
 80068a8:	1e43      	subs	r3, r0, #1
 80068aa:	42a1      	cmp	r1, r4
 80068ac:	d008      	beq.n	80068c0 <memmove+0x28>
 80068ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068b6:	e7f8      	b.n	80068aa <memmove+0x12>
 80068b8:	4402      	add	r2, r0
 80068ba:	4601      	mov	r1, r0
 80068bc:	428a      	cmp	r2, r1
 80068be:	d100      	bne.n	80068c2 <memmove+0x2a>
 80068c0:	bd10      	pop	{r4, pc}
 80068c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068ca:	e7f7      	b.n	80068bc <memmove+0x24>

080068cc <_fstat_r>:
 80068cc:	b538      	push	{r3, r4, r5, lr}
 80068ce:	4d07      	ldr	r5, [pc, #28]	@ (80068ec <_fstat_r+0x20>)
 80068d0:	2300      	movs	r3, #0
 80068d2:	4604      	mov	r4, r0
 80068d4:	4608      	mov	r0, r1
 80068d6:	4611      	mov	r1, r2
 80068d8:	602b      	str	r3, [r5, #0]
 80068da:	f7fa f9c4 	bl	8000c66 <_fstat>
 80068de:	1c43      	adds	r3, r0, #1
 80068e0:	d102      	bne.n	80068e8 <_fstat_r+0x1c>
 80068e2:	682b      	ldr	r3, [r5, #0]
 80068e4:	b103      	cbz	r3, 80068e8 <_fstat_r+0x1c>
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	bd38      	pop	{r3, r4, r5, pc}
 80068ea:	bf00      	nop
 80068ec:	20004c64 	.word	0x20004c64

080068f0 <_isatty_r>:
 80068f0:	b538      	push	{r3, r4, r5, lr}
 80068f2:	4d06      	ldr	r5, [pc, #24]	@ (800690c <_isatty_r+0x1c>)
 80068f4:	2300      	movs	r3, #0
 80068f6:	4604      	mov	r4, r0
 80068f8:	4608      	mov	r0, r1
 80068fa:	602b      	str	r3, [r5, #0]
 80068fc:	f7fa f9c3 	bl	8000c86 <_isatty>
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	d102      	bne.n	800690a <_isatty_r+0x1a>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	b103      	cbz	r3, 800690a <_isatty_r+0x1a>
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	bd38      	pop	{r3, r4, r5, pc}
 800690c:	20004c64 	.word	0x20004c64

08006910 <_sbrk_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4d06      	ldr	r5, [pc, #24]	@ (800692c <_sbrk_r+0x1c>)
 8006914:	2300      	movs	r3, #0
 8006916:	4604      	mov	r4, r0
 8006918:	4608      	mov	r0, r1
 800691a:	602b      	str	r3, [r5, #0]
 800691c:	f7fa f9cc 	bl	8000cb8 <_sbrk>
 8006920:	1c43      	adds	r3, r0, #1
 8006922:	d102      	bne.n	800692a <_sbrk_r+0x1a>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	b103      	cbz	r3, 800692a <_sbrk_r+0x1a>
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	bd38      	pop	{r3, r4, r5, pc}
 800692c:	20004c64 	.word	0x20004c64

08006930 <_realloc_r>:
 8006930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006934:	4607      	mov	r7, r0
 8006936:	4614      	mov	r4, r2
 8006938:	460d      	mov	r5, r1
 800693a:	b921      	cbnz	r1, 8006946 <_realloc_r+0x16>
 800693c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006940:	4611      	mov	r1, r2
 8006942:	f7ff bb2b 	b.w	8005f9c <_malloc_r>
 8006946:	b92a      	cbnz	r2, 8006954 <_realloc_r+0x24>
 8006948:	f7ff fabc 	bl	8005ec4 <_free_r>
 800694c:	4625      	mov	r5, r4
 800694e:	4628      	mov	r0, r5
 8006950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006954:	f000 f81a 	bl	800698c <_malloc_usable_size_r>
 8006958:	4284      	cmp	r4, r0
 800695a:	4606      	mov	r6, r0
 800695c:	d802      	bhi.n	8006964 <_realloc_r+0x34>
 800695e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006962:	d8f4      	bhi.n	800694e <_realloc_r+0x1e>
 8006964:	4621      	mov	r1, r4
 8006966:	4638      	mov	r0, r7
 8006968:	f7ff fb18 	bl	8005f9c <_malloc_r>
 800696c:	4680      	mov	r8, r0
 800696e:	b908      	cbnz	r0, 8006974 <_realloc_r+0x44>
 8006970:	4645      	mov	r5, r8
 8006972:	e7ec      	b.n	800694e <_realloc_r+0x1e>
 8006974:	42b4      	cmp	r4, r6
 8006976:	4622      	mov	r2, r4
 8006978:	4629      	mov	r1, r5
 800697a:	bf28      	it	cs
 800697c:	4632      	movcs	r2, r6
 800697e:	f7ff fa92 	bl	8005ea6 <memcpy>
 8006982:	4629      	mov	r1, r5
 8006984:	4638      	mov	r0, r7
 8006986:	f7ff fa9d 	bl	8005ec4 <_free_r>
 800698a:	e7f1      	b.n	8006970 <_realloc_r+0x40>

0800698c <_malloc_usable_size_r>:
 800698c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006990:	1f18      	subs	r0, r3, #4
 8006992:	2b00      	cmp	r3, #0
 8006994:	bfbc      	itt	lt
 8006996:	580b      	ldrlt	r3, [r1, r0]
 8006998:	18c0      	addlt	r0, r0, r3
 800699a:	4770      	bx	lr

0800699c <_init>:
 800699c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699e:	bf00      	nop
 80069a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069a2:	bc08      	pop	{r3}
 80069a4:	469e      	mov	lr, r3
 80069a6:	4770      	bx	lr

080069a8 <_fini>:
 80069a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069aa:	bf00      	nop
 80069ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ae:	bc08      	pop	{r3}
 80069b0:	469e      	mov	lr, r3
 80069b2:	4770      	bx	lr
